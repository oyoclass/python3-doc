{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"What is Python3? Quote from Python's official website: Python is an easy to learn, powerful programming language. It has efficient high-level data structures and a simple but effective approach to object-oriented programming. Python\u2019s elegant syntax and dynamic typing, together with its interpreted nature, make it an ideal language for scripting and rapid application development in many areas on most platforms. Currently Python has two versions: Python2 and Python3. Python3 is the new version of Python. Quote from wikipedia: Python 3.0 (also called \"Python 3000\" or \"Py3K\") was released on December 3, 2008. It was designed to rectify fundamental design flaws in the language\u2014the changes required could not be implemented while retaining full backwards compatibility with the 2.x series, which necessitated a new major version number. The guiding principle of Python 3 was: \"reduce feature duplication by removing old ways of doing things\". Python2 won't be maintained after January 1, 2020. If you are new to programming, you should learn Python3 instead of Python2. However, if you are already familiar with Python2, learning Python3 will be very easy for you. About OYOclass' Python3 IDE (Beta) The Python3 IDE (Beta) is an application built into the OYOclass platform, which can be used to write Python3 code. OYOclass' Python3 IDE uses Python version 3.11 behind the scenes. The term \"IDE\" stands for \"Integrated Development Environment\", it provides a set of tools for programmers to write, edit and compile code efficiently. The following links from Python's official website can help you get started. The Python Tutorial The Python Language Reference The Python Standard Library Quick Start Copy the following code samples to OYOclass' Python3 Editor. Then, click the \"Run\" button. Print print(\"Hello World\") print(123) print(1 + 2) print(1 + 2 * 3) User Input name = input(\"What's your name?\\n\") age = input(\"How old are you?\\n\") print(f\"Hello {name}, you are {age} years old\") Loop for i in range(1, 6): print(\"* \" * i) Call Web API from urllib.request import urlopen import json req = urlopen(\"https://cataas.com/cat?json=true\") data = json.loads(req.read()) print(f\"Open the URL to see a cat: \\n https://cataas.com{data['url']}\") Beyond OYOclass' Python3 Editor (Beta) If you would like to do more with Python and go beyond the capabilities of OYOclass' Python3 Editor, please download and install the Python: Download Python : The version you download from Python's website is most likely greater than or equal to version 3.11. Python3's Official Documentation Resources in Awesome Python's Repository","title":"Home"},{"location":"#what-is-python3","text":"Quote from Python's official website: Python is an easy to learn, powerful programming language. It has efficient high-level data structures and a simple but effective approach to object-oriented programming. Python\u2019s elegant syntax and dynamic typing, together with its interpreted nature, make it an ideal language for scripting and rapid application development in many areas on most platforms. Currently Python has two versions: Python2 and Python3. Python3 is the new version of Python. Quote from wikipedia: Python 3.0 (also called \"Python 3000\" or \"Py3K\") was released on December 3, 2008. It was designed to rectify fundamental design flaws in the language\u2014the changes required could not be implemented while retaining full backwards compatibility with the 2.x series, which necessitated a new major version number. The guiding principle of Python 3 was: \"reduce feature duplication by removing old ways of doing things\". Python2 won't be maintained after January 1, 2020. If you are new to programming, you should learn Python3 instead of Python2. However, if you are already familiar with Python2, learning Python3 will be very easy for you.","title":"What is Python3?"},{"location":"#about-oyoclass-python3-ide-beta","text":"The Python3 IDE (Beta) is an application built into the OYOclass platform, which can be used to write Python3 code. OYOclass' Python3 IDE uses Python version 3.11 behind the scenes. The term \"IDE\" stands for \"Integrated Development Environment\", it provides a set of tools for programmers to write, edit and compile code efficiently. The following links from Python's official website can help you get started. The Python Tutorial The Python Language Reference The Python Standard Library","title":"About OYOclass' Python3 IDE (Beta)"},{"location":"#quick-start","text":"Copy the following code samples to OYOclass' Python3 Editor. Then, click the \"Run\" button. Print print(\"Hello World\") print(123) print(1 + 2) print(1 + 2 * 3) User Input name = input(\"What's your name?\\n\") age = input(\"How old are you?\\n\") print(f\"Hello {name}, you are {age} years old\") Loop for i in range(1, 6): print(\"* \" * i) Call Web API from urllib.request import urlopen import json req = urlopen(\"https://cataas.com/cat?json=true\") data = json.loads(req.read()) print(f\"Open the URL to see a cat: \\n https://cataas.com{data['url']}\")","title":"Quick Start"},{"location":"#beyond-oyoclass-python3-editor-beta","text":"If you would like to do more with Python and go beyond the capabilities of OYOclass' Python3 Editor, please download and install the Python: Download Python : The version you download from Python's website is most likely greater than or equal to version 3.11. Python3's Official Documentation Resources in Awesome Python's Repository","title":"Beyond OYOclass' Python3 Editor (Beta)"},{"location":"core/boolean/","text":"Boolean Booleans are used to show the logical truth values True and False . Constants True False The following values are considered False : None, False, 0, 0.0, 0j, '', (), [], {}, set([]) Convert Value to Boolean bool(x) : Convert x to True or False Logical Operations and : x and y. This means that if x is False, then x, else y or : x or y. This means that if x is False, then y, else x not : not x. This means that if x is False, then True, else False Example print(True) # True print(1 < 2) # True print(2 > 3) # False print(3 <= 3) # True print(1 < 2 and 2 > 3) # False print(1 < 2 or 2 > 3) # True print(not 1 < 2) # False print(bool(0)) # False print(bool([])) # False print(bool(3)) # True Reference Standard Types at docs.python.org","title":"Boolean"},{"location":"core/boolean/#boolean","text":"Booleans are used to show the logical truth values True and False .","title":"Boolean"},{"location":"core/boolean/#constants","text":"True False The following values are considered False : None, False, 0, 0.0, 0j, '', (), [], {}, set([])","title":"Constants"},{"location":"core/boolean/#convert-value-to-boolean","text":"bool(x) : Convert x to True or False","title":"Convert Value to Boolean"},{"location":"core/boolean/#logical-operations","text":"and : x and y. This means that if x is False, then x, else y or : x or y. This means that if x is False, then y, else x not : not x. This means that if x is False, then True, else False","title":"Logical Operations"},{"location":"core/boolean/#example","text":"print(True) # True print(1 < 2) # True print(2 > 3) # False print(3 <= 3) # True print(1 < 2 and 2 > 3) # False print(1 < 2 or 2 > 3) # True print(not 1 < 2) # False print(bool(0)) # False print(bool([])) # False print(bool(3)) # True","title":"Example"},{"location":"core/boolean/#reference","text":"Standard Types at docs.python.org","title":"Reference"},{"location":"core/comments/","text":"Comments Comments are used in Python to allow programmers to write notes in their code. These lines of code will not be run by the interpreter. There are 2 ways to do this in Python. Single Line Comments (#) In Python, you can use the \"#\" symbol to write comments that take up one line. Example #This is a comment print(\"hello\") In the code sample above, it would only print the word \"hello\". The code snippet above would not print the words \"This is a comment\". Multi-line Comments In Python, you can use triple quotes to write comments that take up multiple lines. Example ''' This is a multi-lined comment. This uses single-quotes to make this comment. These are called triple quotes because there are 3 quotes at the beginning and the end of the quote. ''' print(\"world\") \"\"\" This is a multi-lined comment. This uses double-quotes to make this comment. These are called triple quotes because there are 3 quotes at the beginning and the end of the quote. \"\"\" In the code sample above, it would only print the word \"world\". The statement above would not print the explanation in the first and second comment.","title":"Comments"},{"location":"core/comments/#comments","text":"Comments are used in Python to allow programmers to write notes in their code. These lines of code will not be run by the interpreter. There are 2 ways to do this in Python.","title":"Comments"},{"location":"core/comments/#single-line-comments","text":"In Python, you can use the \"#\" symbol to write comments that take up one line.","title":"Single Line Comments (#)"},{"location":"core/comments/#example","text":"#This is a comment print(\"hello\") In the code sample above, it would only print the word \"hello\". The code snippet above would not print the words \"This is a comment\".","title":"Example"},{"location":"core/comments/#multi-line-comments","text":"In Python, you can use triple quotes to write comments that take up multiple lines.","title":"Multi-line Comments"},{"location":"core/comments/#example_1","text":"''' This is a multi-lined comment. This uses single-quotes to make this comment. These are called triple quotes because there are 3 quotes at the beginning and the end of the quote. ''' print(\"world\") \"\"\" This is a multi-lined comment. This uses double-quotes to make this comment. These are called triple quotes because there are 3 quotes at the beginning and the end of the quote. \"\"\" In the code sample above, it would only print the word \"world\". The statement above would not print the explanation in the first and second comment.","title":"Example"},{"location":"core/comparison/","text":"Comparison Comparison operations are supported by all objects. They all have the same priority (which is higher than that those of the Boolean operations). Operations < : strictly less than <= : less than or equal to > : strictly greater than >= : greater than or equal to == : equal != : not equal is : object identity is not : negated object identity Example print(2 != 3) # True print(5 >= 4) # True print(2 is 2) # True print(300 is 300) # True num = 350 print(num is not 350) # False Reference Comparisons at docs.python.org","title":"Comparison"},{"location":"core/comparison/#comparison","text":"Comparison operations are supported by all objects. They all have the same priority (which is higher than that those of the Boolean operations).","title":"Comparison"},{"location":"core/comparison/#operations","text":"< : strictly less than <= : less than or equal to > : strictly greater than >= : greater than or equal to == : equal != : not equal is : object identity is not : negated object identity","title":"Operations"},{"location":"core/comparison/#example","text":"print(2 != 3) # True print(5 >= 4) # True print(2 is 2) # True print(300 is 300) # True num = 350 print(num is not 350) # False","title":"Example"},{"location":"core/comparison/#reference","text":"Comparisons at docs.python.org","title":"Reference"},{"location":"core/dictionary/","text":"Dictionary Dictionaries are sometimes found in other languages such as \u201cassociative memories\u201d and \u201cassociative arrays\u201d. Unlike sequences, which are indexed by a range of numbers, dictionaries are indexed by keys, which can be any immutable type. It is best to think of a dictionary as an unordered set of key-value pairs, where all the keys must be unique. A pair of curly braces creates an empty dictionary: {} . When you place values in a dictionary, you must write the key-value pair like this: key: value . Functions dict.clear() : Removes all items from the dictionary. dict.get(key[, default]) : Returns the value for key if key is in the dictionary, else default. If default is not given, it defaults to None , so that this method never raises a KeyError . key in dict : Returns True if d has key key , else False . dict.items() : Returns a new view of the dictionary\u2019s items ( (key, value) pairs). dict.keys() : Returns a new view of the dictionary\u2019s keys. dict.pop(key[, default]) : If key is in the dictionary, remove it and return its value, else return default . If default is not given and key is not in the dictionary, a KeyError is raised. dict.setdefault(key[, default]) : If key is in the dictionary, return its value. If not, insert key with a value of default and return default . default defaults to None . dict.update([other]) : Updates the dictionary with the key/value pairs from other , overwriting existing keys. Returns None . dict.values() : Returns a new view of the dictionary\u2019s values. Example a = {\"name\": \"Bo\", \"age\": 20} print(\"name\" in a) # True print(a.keys()) # dict_keys(['name', 'age']) print(a.values()) # dict_values(['Bo', 20]) a.setdefault(\"gender\", \"m\") print(a) # {'name': 'Bo', 'age': 20, 'gender': 'm'} a.update({\"city\": \"Stony Brook\"}) print(a) # {'name': 'Bo', 'age': 20, 'gender': 'm', 'city': 'Stony Brook'} Change from Python2 The has_key(key) function is no longer supported in Python3. Reference Dictionary as a Data Structure at docs.python.org Dict as a Mapping Type at docs.python.org","title":"Dictionary"},{"location":"core/dictionary/#dictionary","text":"Dictionaries are sometimes found in other languages such as \u201cassociative memories\u201d and \u201cassociative arrays\u201d. Unlike sequences, which are indexed by a range of numbers, dictionaries are indexed by keys, which can be any immutable type. It is best to think of a dictionary as an unordered set of key-value pairs, where all the keys must be unique. A pair of curly braces creates an empty dictionary: {} . When you place values in a dictionary, you must write the key-value pair like this: key: value .","title":"Dictionary"},{"location":"core/dictionary/#functions","text":"dict.clear() : Removes all items from the dictionary. dict.get(key[, default]) : Returns the value for key if key is in the dictionary, else default. If default is not given, it defaults to None , so that this method never raises a KeyError . key in dict : Returns True if d has key key , else False . dict.items() : Returns a new view of the dictionary\u2019s items ( (key, value) pairs). dict.keys() : Returns a new view of the dictionary\u2019s keys. dict.pop(key[, default]) : If key is in the dictionary, remove it and return its value, else return default . If default is not given and key is not in the dictionary, a KeyError is raised. dict.setdefault(key[, default]) : If key is in the dictionary, return its value. If not, insert key with a value of default and return default . default defaults to None . dict.update([other]) : Updates the dictionary with the key/value pairs from other , overwriting existing keys. Returns None . dict.values() : Returns a new view of the dictionary\u2019s values.","title":"Functions"},{"location":"core/dictionary/#example","text":"a = {\"name\": \"Bo\", \"age\": 20} print(\"name\" in a) # True print(a.keys()) # dict_keys(['name', 'age']) print(a.values()) # dict_values(['Bo', 20]) a.setdefault(\"gender\", \"m\") print(a) # {'name': 'Bo', 'age': 20, 'gender': 'm'} a.update({\"city\": \"Stony Brook\"}) print(a) # {'name': 'Bo', 'age': 20, 'gender': 'm', 'city': 'Stony Brook'}","title":"Example"},{"location":"core/dictionary/#change-from-python2","text":"The has_key(key) function is no longer supported in Python3.","title":"Change from Python2"},{"location":"core/dictionary/#reference","text":"Dictionary as a Data Structure at docs.python.org Dict as a Mapping Type at docs.python.org","title":"Reference"},{"location":"core/function/","text":"Functions Most of the functions work the same way in both Python2 and Python3. However, there are a few functions that have different return types. For example, the round() function in Python2 returns a floating-point number, while round in Python3 returns an integer (unless specified). Below are a list of commonly used built-in functions. Built-in functions abs all any bin bool chr dict dir divmod enumerate filter float hex int isinstance issubclass len list long map max min oct ord pow print range raw_input reduce repr reversed round set slice sorted str sum tuple xrange zip For information about how to use the above functions, check out built-in functions on Python's official documentation. Example print(bin(3)) # 0b11 print(hex(255)) # 0xff print(abs(-5)) # 5 print(pow(3, 2)) # 9 print(round(3.5)) # 4 print(round(3.2)) # 3 print(oct(8)) # 0o10 print(ord('A')) # 65 print(chr(97)) # a a = [1,4,5,2,3] print(sorted(a)) # [1, 2, 3, 4, 5] User-defined functions You can define your own function by using the def keyword. Example: def my_add(a, b): c = a + b return c print(my_add(1, 2)) # 3 Reference Built-in functions at docs.python.org","title":"Function"},{"location":"core/function/#functions","text":"Most of the functions work the same way in both Python2 and Python3. However, there are a few functions that have different return types. For example, the round() function in Python2 returns a floating-point number, while round in Python3 returns an integer (unless specified). Below are a list of commonly used built-in functions.","title":"Functions"},{"location":"core/function/#built-in-functions","text":"abs all any bin bool chr dict dir divmod enumerate filter float hex int isinstance issubclass len list long map max min oct ord pow print range raw_input reduce repr reversed round set slice sorted str sum tuple xrange zip For information about how to use the above functions, check out built-in functions on Python's official documentation.","title":"Built-in functions"},{"location":"core/function/#example","text":"print(bin(3)) # 0b11 print(hex(255)) # 0xff print(abs(-5)) # 5 print(pow(3, 2)) # 9 print(round(3.5)) # 4 print(round(3.2)) # 3 print(oct(8)) # 0o10 print(ord('A')) # 65 print(chr(97)) # a a = [1,4,5,2,3] print(sorted(a)) # [1, 2, 3, 4, 5]","title":"Example"},{"location":"core/function/#user-defined-functions","text":"You can define your own function by using the def keyword. Example: def my_add(a, b): c = a + b return c print(my_add(1, 2)) # 3","title":"User-defined functions"},{"location":"core/function/#reference","text":"Built-in functions at docs.python.org","title":"Reference"},{"location":"core/inputoutput/","text":"Standard Output and Input Standard Output The most common way to output something is using print function: print(2 * 3) print(\"hello\") arr = [1, 2, 3, 4] print(arr) Output: 6 hello [1, 2, 3, 4] Or you can use sys.stdout.write : from sys import stdout arr = [1, 2, 3, 4] stdout.write(\"hello \") stdout.write(str(arr)) Note The parameter of write must be a String Output: hello [1, 2, 3, 4] Standard Input To get user input, you can use the input function: name = input(\"What's your name?\") print \"hello\", name Change from Python2 The raw_input function from Python2 is no longer supported in Python3. The input() function in Python3 works the same way as the raw_input() function in Python2. The input() function in Python3 always returns a String. You must cast the variable to use the variable as a different type. num = input(\"Give me a number\") print(num) # 12 print(num * 2) # 1212 # now convert it to number num = int(num) print(num * 2) # 24 You can also read user's input by using sys.stdin.read or sys.stdin.readline : from sys import stdin name = stdin.readline() print(name) # Only reads 3 characters name = stdin.readline(3) print(name)","title":"Standard Input & Output"},{"location":"core/inputoutput/#standard-output-and-input","text":"","title":"Standard Output and Input"},{"location":"core/inputoutput/#standard-output","text":"The most common way to output something is using print function: print(2 * 3) print(\"hello\") arr = [1, 2, 3, 4] print(arr) Output: 6 hello [1, 2, 3, 4] Or you can use sys.stdout.write : from sys import stdout arr = [1, 2, 3, 4] stdout.write(\"hello \") stdout.write(str(arr)) Note The parameter of write must be a String Output: hello [1, 2, 3, 4]","title":"Standard Output"},{"location":"core/inputoutput/#standard-input","text":"To get user input, you can use the input function: name = input(\"What's your name?\") print \"hello\", name","title":"Standard Input"},{"location":"core/inputoutput/#change-from-python2","text":"The raw_input function from Python2 is no longer supported in Python3. The input() function in Python3 works the same way as the raw_input() function in Python2. The input() function in Python3 always returns a String. You must cast the variable to use the variable as a different type. num = input(\"Give me a number\") print(num) # 12 print(num * 2) # 1212 # now convert it to number num = int(num) print(num * 2) # 24 You can also read user's input by using sys.stdin.read or sys.stdin.readline : from sys import stdin name = stdin.readline() print(name) # Only reads 3 characters name = stdin.readline(3) print(name)","title":"Change from Python2"},{"location":"core/listtuple/","text":"List Lists are used to group together values. They consist of a group of values or items, separated by commas, between square brackets. Lists might contain items of different types, but usually the items in a list have the same type. The index in a list starts at 0, and you can visit last element using index -1. a = [1, 5, 2, 3] print(a[0]) # 1 print(a[1]) # 5 print(a[-1]) # 3 print(a[1:3]) # Get elements from index 1 to index 3 (exclusive), i.e. [5, 2] Change the element at a index: a = [1, 5, 2, 3] a[1] = 7 print(a) # [1, 7, 2, 3] To check if an element is in a list, you can use the in operator: a = [1, 5, 2, 3] print(5 in a) # True Use the len function to get the length (number of elements) of a list: a = [1, 5, 2, 3] print(len(a)) # 4 Functions for Lists list.append(x) list.count(x) list.extend(L) list.index(x) list.insert(i, x) list.pop([i]) list.remove(x) list.reverse() list.sort(cmp=None, key=None, reverse=False) For instructions on how to use these functions, check out list functions in Python's official documentation. Example a = [1, 5, 2, 3] a.append(6) print(a) # [1, 5, 2, 3, 6] print(a.count(5)) # 1 a.remove(2) print(a) # [1, 5, 3, 6] a.reverse() print(a) # [6, 3, 5, 1] a.sort() print(a) # [1, 3, 5, 6] Tuple Tuples are similar to lists. The main difference is that lists are mutable and tuples are immutable. Once you define a tuple within parentheses () , you can not change the elements of the tuple. b = (1, 5, 2, 3) b.append(6) # This will give an error, since b is a tuple and immutable. Conversion between Tuple and List Although a tuple cannot be changed, you can convert it to list, make changes, and then convert it back to tuple. You can do this with the tuple and list functions. b = (1, 5, 2, 3) b = list(b) # Convert tuple to list b.append(6) # Change list - append one more element b = tuple(b) # Convert list to tuple print(b) # (1, 5, 2, 3, 6) Reference Introduction of Lists on docs.python.org More on Lists on docs.python.org","title":"List & Tuple"},{"location":"core/listtuple/#list","text":"Lists are used to group together values. They consist of a group of values or items, separated by commas, between square brackets. Lists might contain items of different types, but usually the items in a list have the same type. The index in a list starts at 0, and you can visit last element using index -1. a = [1, 5, 2, 3] print(a[0]) # 1 print(a[1]) # 5 print(a[-1]) # 3 print(a[1:3]) # Get elements from index 1 to index 3 (exclusive), i.e. [5, 2] Change the element at a index: a = [1, 5, 2, 3] a[1] = 7 print(a) # [1, 7, 2, 3] To check if an element is in a list, you can use the in operator: a = [1, 5, 2, 3] print(5 in a) # True Use the len function to get the length (number of elements) of a list: a = [1, 5, 2, 3] print(len(a)) # 4","title":"List"},{"location":"core/listtuple/#functions-for-lists","text":"list.append(x) list.count(x) list.extend(L) list.index(x) list.insert(i, x) list.pop([i]) list.remove(x) list.reverse() list.sort(cmp=None, key=None, reverse=False) For instructions on how to use these functions, check out list functions in Python's official documentation.","title":"Functions for Lists"},{"location":"core/listtuple/#example","text":"a = [1, 5, 2, 3] a.append(6) print(a) # [1, 5, 2, 3, 6] print(a.count(5)) # 1 a.remove(2) print(a) # [1, 5, 3, 6] a.reverse() print(a) # [6, 3, 5, 1] a.sort() print(a) # [1, 3, 5, 6]","title":"Example"},{"location":"core/listtuple/#tuple","text":"Tuples are similar to lists. The main difference is that lists are mutable and tuples are immutable. Once you define a tuple within parentheses () , you can not change the elements of the tuple. b = (1, 5, 2, 3) b.append(6) # This will give an error, since b is a tuple and immutable.","title":"Tuple"},{"location":"core/listtuple/#conversion-between-tuple-and-list","text":"Although a tuple cannot be changed, you can convert it to list, make changes, and then convert it back to tuple. You can do this with the tuple and list functions. b = (1, 5, 2, 3) b = list(b) # Convert tuple to list b.append(6) # Change list - append one more element b = tuple(b) # Convert list to tuple print(b) # (1, 5, 2, 3, 6)","title":"Conversion between Tuple and List"},{"location":"core/listtuple/#reference","text":"Introduction of Lists on docs.python.org More on Lists on docs.python.org","title":"Reference"},{"location":"core/none/","text":"None None is frequently used to represent the absence of a value. An example of this is when default arguments are not passed to a function. Example a = None print(a) # None print(a is None) # True Reference None at docs.python.org","title":"None"},{"location":"core/none/#none","text":"None is frequently used to represent the absence of a value. An example of this is when default arguments are not passed to a function.","title":"None"},{"location":"core/none/#example","text":"a = None print(a) # None print(a is None) # True","title":"Example"},{"location":"core/none/#reference","text":"None at docs.python.org","title":"Reference"},{"location":"core/number/","text":"Number You can use integer and floating-point numbers in Python3. For example, a = 1 b = 2 print(a + b) # 3 print(b * 3) # 6 print(1 + 2 * 3) # 7 print((1 + 2) * 3) # 9 c = 1.5 print(c * 2) # 3.0 print(1 / 3) # 0.3333333333333333 print(1.0 / 3) # 0.3333333333333333 Converting Numbers to Integer and Floating-Point Numbers: int(x) : Converts x to integer float(x) : Converts x to floating-point number Example: print(int(12.3)) # 12 print(int(\"234\")) # 234 print(float(12)) # 12.0 Differences Between Python2 and Python3 In Python2: x = 5 / 2.0 # x = 2.5 x = 5 / 2 # x = 2 x = 5 // 2 # x = 2 In Python3: x = 5 / 2.0 # x = 2.5 x = 5 / 2 # x = 2.5 x = 5 // 2 # x = 2 The main difference for the mathematical operations between Python2 and Python3 is 5 / 2 . In Python2, single-slash division returns integer divison . This means that the remainder part of the result is discarded. In Python3, single-slash division returns regular division , where the remainder remains a part of the answer. When you do floor division ( 5 // 2 ) or an integer divided by a float ( 5 / 2.0 ), the result is the same in both Python 2 and Python3. Major Change from Python2 The long type in Python has been removed. There are no long-type integers in Python3. Reference Numeric Types at docs.python.org","title":"Number"},{"location":"core/number/#number","text":"You can use integer and floating-point numbers in Python3. For example, a = 1 b = 2 print(a + b) # 3 print(b * 3) # 6 print(1 + 2 * 3) # 7 print((1 + 2) * 3) # 9 c = 1.5 print(c * 2) # 3.0 print(1 / 3) # 0.3333333333333333 print(1.0 / 3) # 0.3333333333333333","title":"Number"},{"location":"core/number/#converting-numbers-to-integer-and-floating-point-numbers","text":"int(x) : Converts x to integer float(x) : Converts x to floating-point number Example: print(int(12.3)) # 12 print(int(\"234\")) # 234 print(float(12)) # 12.0","title":"Converting Numbers to Integer and Floating-Point Numbers:"},{"location":"core/number/#differences-between-python2-and-python3","text":"In Python2: x = 5 / 2.0 # x = 2.5 x = 5 / 2 # x = 2 x = 5 // 2 # x = 2 In Python3: x = 5 / 2.0 # x = 2.5 x = 5 / 2 # x = 2.5 x = 5 // 2 # x = 2 The main difference for the mathematical operations between Python2 and Python3 is 5 / 2 . In Python2, single-slash division returns integer divison . This means that the remainder part of the result is discarded. In Python3, single-slash division returns regular division , where the remainder remains a part of the answer. When you do floor division ( 5 // 2 ) or an integer divided by a float ( 5 / 2.0 ), the result is the same in both Python 2 and Python3.","title":"Differences Between Python2 and Python3"},{"location":"core/number/#major-change-from-python2","text":"The long type in Python has been removed. There are no long-type integers in Python3.","title":"Major Change from Python2"},{"location":"core/number/#reference","text":"Numeric Types at docs.python.org","title":"Reference"},{"location":"core/set/","text":"Set A set is an unordered collection with no duplicate elements. Basic uses of sets include membership testing and eliminating duplicate entries. Set objects also support mathematical operations like union, intersection, difference, and symmetric difference. You can use the set() function to make a set. Here is a quick example: basket = ['apple', 'orange', 'apple', 'pear', 'orange', 'banana'] fruit = set(basket) print(fruit) # {'apple', 'orange', 'pear', 'banana'} Empty Sets Sets in Python3 are enclosed in curly braces ( {} ). However, in order to create an empty set, you would not use a set of empty curly braces ( {} ). To create an empty set, you would use the set() function with no parameters. var1 = set() var2 = {} print(type(var1)) #<class 'set'> print(type(var2)) #<class 'dict'> Functions set.add(elem) : Adds element elem to the set. set.copy() : Returns a new set that is shallow copy of set . set.difference(*others) : Returns a new set with elements that are in the set that are not in the others . set - other : Functions the same as set.difference(other) . set.difference_update(*others) : Updates the set, removing elements found in others. set.discard(elem) : Removes element elem from the set if it is present. set.intersection(others) : Returns a new set with elements common to the set and all others . set.intersection_update(others) : Updates the set, keeping only elements found in it and all others . set.isdisjoint(other) : Returns True if the set has no elements in common with other. Sets are disjoint if and only if their intersection is the empty set. set.issubset(other) : Test whether every element in the set is in other . set <= other : Test whether every element is in other . set < other : Test whether the set is a proper subset of other ( set <= other and set != other ). set.issuperset(other) : Test whether every element in other is in the set. set >= other : Test whether every element in other is in the set. set > other : Test whether the set is a proper superset of other ( set >= other and set != other ). set.pop() : Removes and returns an arbitrary element from the set. set.remove(elem) : Remove element elem from the set. set.symmetric_difference(other) : Returns a new set with elements in either the set or other but not both . set ^ other : Returns a set with elements in either the set or other but not both . set.symmetric_difference_update(other) : Updates the set, keeping only elements found in either set, but not in both . set.union(others) : Returns a new set with elements from the set and all others . set | other : Returns a new set with elements from the set and other . set.update(*others) : Updates the set, adding elements from all others . Example a = set() a.add(1) a.add(2) a.add(1) print(a) # {1, 2} print(len(a)) # 2 b = set([2,2,3]) print(b) # {2, 3} print(a.intersection(b)) # {2} c = set([3]) print(b.issuperset(c)) # True print(a ^ b) # {1, 3} print(a >= b) # False print(c <= c) # True print(c < c) # False print(a.union(b)) # {1, 2, 3} Reference Sets as a Data Structure on docs.python.org . Set as a Built-in Type on docs.python.org .","title":"Set"},{"location":"core/set/#set","text":"A set is an unordered collection with no duplicate elements. Basic uses of sets include membership testing and eliminating duplicate entries. Set objects also support mathematical operations like union, intersection, difference, and symmetric difference. You can use the set() function to make a set. Here is a quick example: basket = ['apple', 'orange', 'apple', 'pear', 'orange', 'banana'] fruit = set(basket) print(fruit) # {'apple', 'orange', 'pear', 'banana'}","title":"Set"},{"location":"core/set/#empty-sets","text":"Sets in Python3 are enclosed in curly braces ( {} ). However, in order to create an empty set, you would not use a set of empty curly braces ( {} ). To create an empty set, you would use the set() function with no parameters. var1 = set() var2 = {} print(type(var1)) #<class 'set'> print(type(var2)) #<class 'dict'>","title":"Empty Sets"},{"location":"core/set/#functions","text":"set.add(elem) : Adds element elem to the set. set.copy() : Returns a new set that is shallow copy of set . set.difference(*others) : Returns a new set with elements that are in the set that are not in the others . set - other : Functions the same as set.difference(other) . set.difference_update(*others) : Updates the set, removing elements found in others. set.discard(elem) : Removes element elem from the set if it is present. set.intersection(others) : Returns a new set with elements common to the set and all others . set.intersection_update(others) : Updates the set, keeping only elements found in it and all others . set.isdisjoint(other) : Returns True if the set has no elements in common with other. Sets are disjoint if and only if their intersection is the empty set. set.issubset(other) : Test whether every element in the set is in other . set <= other : Test whether every element is in other . set < other : Test whether the set is a proper subset of other ( set <= other and set != other ). set.issuperset(other) : Test whether every element in other is in the set. set >= other : Test whether every element in other is in the set. set > other : Test whether the set is a proper superset of other ( set >= other and set != other ). set.pop() : Removes and returns an arbitrary element from the set. set.remove(elem) : Remove element elem from the set. set.symmetric_difference(other) : Returns a new set with elements in either the set or other but not both . set ^ other : Returns a set with elements in either the set or other but not both . set.symmetric_difference_update(other) : Updates the set, keeping only elements found in either set, but not in both . set.union(others) : Returns a new set with elements from the set and all others . set | other : Returns a new set with elements from the set and other . set.update(*others) : Updates the set, adding elements from all others .","title":"Functions"},{"location":"core/set/#example","text":"a = set() a.add(1) a.add(2) a.add(1) print(a) # {1, 2} print(len(a)) # 2 b = set([2,2,3]) print(b) # {2, 3} print(a.intersection(b)) # {2} c = set([3]) print(b.issuperset(c)) # True print(a ^ b) # {1, 3} print(a >= b) # False print(c <= c) # True print(c < c) # False print(a.union(b)) # {1, 2, 3}","title":"Example"},{"location":"core/set/#reference","text":"Sets as a Data Structure on docs.python.org . Set as a Built-in Type on docs.python.org .","title":"Reference"},{"location":"core/string/","text":"String You can define a string using two single-quotes, two double-quotes, or two triple-quotes. For example, you can declare a string using s = \"hello\" . Once you have a string, you can apply any of the methods listed in the functions portion. Formatting Strings in Python In Python2: i = 1 s = \"abc\" mystr1 = \"{} {}\".format(i, s) mystr2 = \"%d %s\" % (i, s) print(mystr1) #1 abc print(mystr2) #1 abc In Python3: i = 1 s = \"abc\" mystr1 = \"{} {}\".format(i, s) mystr2 = f\"{i} {s}\" print(mystr1) #1 abc print(mystr2) #1 abc There are multiple ways to format strings in Python2 and Python3. If you look at the above examples, you can see that \"{} {}\".format(i, s) works in both Python2 and Python3. In Python2, you can use the % operator with strings to format strings through string interpolation . You should not use this function in Python3 because it is deprecated . The new way to do string interpolation in Python3 is through the use of the f operator. Functions str.capitalize() str.center(width[, fillchar]) str.count(sub[, start[, end]]) str.endswith(suffix) str.expandtabs([tabsize]) str.find(sub[, start[, end]]) str.format(*args, **kwargs) str.index(sub[, start[, end]]) str.isalnum() str.isalpha() str.isdigit() str.islower() str.isnumeric() str.isspace() str.istitle() str.isupper() str.join(iterable) str.ljust(width[, fillchar]) str.lower() str.lstrip([chars]) str.partition(sep) str.replace(old, new[, count]) str.rfind(sub[, start[, end]]) str.rindex(sub[, start[, end]]) str.rjust(width[, fillchar]) str.rpartition(sep) str.rstrip([chars]) str.split( sep=None, maxsplit=-1 ) str.splitlines([keepends]) str.startswith(prefix[, start[, end]]) str.strip([chars]) str.swapcase() str.title() str.upper() str.zfill(width) For information about how to use above functions, check out String Methods in Python's official documentation. Example a = \"hello world\" print(a.capitalize()) # Hello world print(a.upper()) # HELLO WORLD print(a.find(\"world\")) # 6 print(a.split()) # ['hello', 'world'] print(a.isalnum()) # False b = \"hello {0} {1}\" print(b.format(\"Albert\", \"Einstein\")) # hello Albert Einstein Reference String methods at docs.python.org","title":"String"},{"location":"core/string/#string","text":"You can define a string using two single-quotes, two double-quotes, or two triple-quotes. For example, you can declare a string using s = \"hello\" . Once you have a string, you can apply any of the methods listed in the functions portion.","title":"String"},{"location":"core/string/#formatting-strings-in-python","text":"In Python2: i = 1 s = \"abc\" mystr1 = \"{} {}\".format(i, s) mystr2 = \"%d %s\" % (i, s) print(mystr1) #1 abc print(mystr2) #1 abc In Python3: i = 1 s = \"abc\" mystr1 = \"{} {}\".format(i, s) mystr2 = f\"{i} {s}\" print(mystr1) #1 abc print(mystr2) #1 abc There are multiple ways to format strings in Python2 and Python3. If you look at the above examples, you can see that \"{} {}\".format(i, s) works in both Python2 and Python3. In Python2, you can use the % operator with strings to format strings through string interpolation . You should not use this function in Python3 because it is deprecated . The new way to do string interpolation in Python3 is through the use of the f operator.","title":"Formatting Strings in Python"},{"location":"core/string/#functions","text":"str.capitalize() str.center(width[, fillchar]) str.count(sub[, start[, end]]) str.endswith(suffix) str.expandtabs([tabsize]) str.find(sub[, start[, end]]) str.format(*args, **kwargs) str.index(sub[, start[, end]]) str.isalnum() str.isalpha() str.isdigit() str.islower() str.isnumeric() str.isspace() str.istitle() str.isupper() str.join(iterable) str.ljust(width[, fillchar]) str.lower() str.lstrip([chars]) str.partition(sep) str.replace(old, new[, count]) str.rfind(sub[, start[, end]]) str.rindex(sub[, start[, end]]) str.rjust(width[, fillchar]) str.rpartition(sep) str.rstrip([chars]) str.split( sep=None, maxsplit=-1 ) str.splitlines([keepends]) str.startswith(prefix[, start[, end]]) str.strip([chars]) str.swapcase() str.title() str.upper() str.zfill(width) For information about how to use above functions, check out String Methods in Python's official documentation.","title":"Functions"},{"location":"core/string/#example","text":"a = \"hello world\" print(a.capitalize()) # Hello world print(a.upper()) # HELLO WORLD print(a.find(\"world\")) # 6 print(a.split()) # ['hello', 'world'] print(a.isalnum()) # False b = \"hello {0} {1}\" print(b.format(\"Albert\", \"Einstein\")) # hello Albert Einstein","title":"Example"},{"location":"core/string/#reference","text":"String methods at docs.python.org","title":"Reference"},{"location":"extralibs/","text":"3rd-party python libraries OYOclass' Python3 Editor also provides some extra libraries you can install and use. To find and install those libraries, you can simply click the \"library\" icon on the left, once found the library you can just click \"Install\" on the corner:","title":"Intro"},{"location":"extralibs/#3rd-party-python-libraries","text":"OYOclass' Python3 Editor also provides some extra libraries you can install and use. To find and install those libraries, you can simply click the \"library\" icon on the left, once found the library you can just click \"Install\" on the corner:","title":"3rd-party python libraries"},{"location":"extralibs/arcade/","text":"Arcade Arcade is a simple game engine library for Python for building 2D games. You can easily build simple games in a small amount of time to test out your ideas with an easy to learn interface. Examples Drawing OYObot's Head Before we add any player input, let's simply try drawing something to the screen: import arcade # Open the window. Set the window title and dimensions arcade.open_window(600, 600, 'OYObot Head') # Set the background color arcade.set_background_color(arcade.color.BLUE) # the start_render function tells arcade to clear the screen and begin drawing # a new frame arcade.start_render() # OYObot's head is 3 concentric circles of decreasing radius head_x = 300 head_y = 300 arcade.draw_circle_filled(head_x, head_y, 200, arcade.color.BLACK) arcade.draw_circle_filled(head_x, head_y, 160, arcade.color.WHITE) arcade.draw_circle_filled(head_x, head_y, 80, arcade.color.BLACK) # the finish_render function tells arcade that we're done drawing and to show # the result to the player arcade.finish_render() arcade.run() Your output will look like this: Getting Player Input Getting player input requires we read it from the built in on_key_press function. We can do this by creating our own class that extends from arcade's arcade.Window class: import arcade SCREEN_WIDTH = 800 SCREEN_HEIGHT = 600 SCREEN_TITLE = \"Better Move Sprite with Keyboard Example\" ARROW_KEYS = (arcade.key.UP, arcade.key.DOWN, arcade.key.LEFT, arcade.key.RIGHT) MOVEMENT_SPEED = 5 class Player(arcade.Sprite): def update(self): # Move the player self.center_x += self.change_x self.center_y += self.change_y class MyGame(arcade.Window): # OVERWRITE BUILTIN FUNCTIONS def __init__(self, width, height, title): super().__init__(width, height, title) # Create a variable to hold the player list self.player_list = None # Set up the player info self.player_sprite = None # Track the current state of what key is pressed self.left_pressed = False self.right_pressed = False self.up_pressed = False self.down_pressed = False # Set the background color arcade.set_background_color(arcade.color.AMAZON) def setup(self): # Sprite lists self.player_list = arcade.SpriteList() # Set up the player # This sprite image is built into arcade self.player_sprite = Player(\":resources:images/animated_characters/female_person/femalePerson_idle.png\") self.player_sprite.center_x = 400 self.player_sprite.center_y = 400 self.player_list.append(self.player_sprite) def on_draw(self): # Clear the screen self.clear() # Draw all the sprites. self.player_list.draw() def on_update(self, delta_time): # Call update to move the sprite self.player_list.update() def on_key_press(self, key, modifiers): if key in ARROW_KEYS: if key == arcade.key.UP: self.up_pressed = True elif key == arcade.key.DOWN: self.down_pressed = True elif key == arcade.key.LEFT: self.left_pressed = True elif key == arcade.key.RIGHT: self.right_pressed = True self.update_player_speed() def on_key_release(self, key, modifiers): if key in ARROW_KEYS: if key == arcade.key.UP: self.up_pressed = False elif key == arcade.key.DOWN: self.down_pressed = False elif key == arcade.key.LEFT: self.left_pressed = False elif key == arcade.key.RIGHT: self.right_pressed = False self.update_player_speed() # END OVERWRITE BUILTIN FUNCTIONS # Custom function def update_player_speed(self): # Calculate speed based on the keys pressed self.player_sprite.change_x = 0 self.player_sprite.change_y = 0 # Since we add speeds together whenever each key is pressed, holding # opposite directions will add up to 0 and hold the player still if self.up_pressed: self.player_sprite.change_y += MOVEMENT_SPEED if self.down_pressed: self.player_sprite.change_y -= MOVEMENT_SPEED if self.left_pressed: self.player_sprite.change_x -= MOVEMENT_SPEED if self.right_pressed: self.player_sprite.change_x += MOVEMENT_SPEED window = MyGame(SCREEN_WIDTH, SCREEN_HEIGHT, 'Keyboard Movement') window.setup() arcade.run() You will get a window on the right like this, and you can use your arrow keys to move the sprite around: Reference Arcade at api.arcade.academy Some Example Games that show what the Arcade library can do","title":"arcade"},{"location":"extralibs/arcade/#arcade","text":"Arcade is a simple game engine library for Python for building 2D games. You can easily build simple games in a small amount of time to test out your ideas with an easy to learn interface.","title":"Arcade"},{"location":"extralibs/arcade/#examples","text":"","title":"Examples"},{"location":"extralibs/arcade/#drawing-oyobots-head","text":"Before we add any player input, let's simply try drawing something to the screen: import arcade # Open the window. Set the window title and dimensions arcade.open_window(600, 600, 'OYObot Head') # Set the background color arcade.set_background_color(arcade.color.BLUE) # the start_render function tells arcade to clear the screen and begin drawing # a new frame arcade.start_render() # OYObot's head is 3 concentric circles of decreasing radius head_x = 300 head_y = 300 arcade.draw_circle_filled(head_x, head_y, 200, arcade.color.BLACK) arcade.draw_circle_filled(head_x, head_y, 160, arcade.color.WHITE) arcade.draw_circle_filled(head_x, head_y, 80, arcade.color.BLACK) # the finish_render function tells arcade that we're done drawing and to show # the result to the player arcade.finish_render() arcade.run() Your output will look like this:","title":"Drawing OYObot's Head"},{"location":"extralibs/arcade/#getting-player-input","text":"Getting player input requires we read it from the built in on_key_press function. We can do this by creating our own class that extends from arcade's arcade.Window class: import arcade SCREEN_WIDTH = 800 SCREEN_HEIGHT = 600 SCREEN_TITLE = \"Better Move Sprite with Keyboard Example\" ARROW_KEYS = (arcade.key.UP, arcade.key.DOWN, arcade.key.LEFT, arcade.key.RIGHT) MOVEMENT_SPEED = 5 class Player(arcade.Sprite): def update(self): # Move the player self.center_x += self.change_x self.center_y += self.change_y class MyGame(arcade.Window): # OVERWRITE BUILTIN FUNCTIONS def __init__(self, width, height, title): super().__init__(width, height, title) # Create a variable to hold the player list self.player_list = None # Set up the player info self.player_sprite = None # Track the current state of what key is pressed self.left_pressed = False self.right_pressed = False self.up_pressed = False self.down_pressed = False # Set the background color arcade.set_background_color(arcade.color.AMAZON) def setup(self): # Sprite lists self.player_list = arcade.SpriteList() # Set up the player # This sprite image is built into arcade self.player_sprite = Player(\":resources:images/animated_characters/female_person/femalePerson_idle.png\") self.player_sprite.center_x = 400 self.player_sprite.center_y = 400 self.player_list.append(self.player_sprite) def on_draw(self): # Clear the screen self.clear() # Draw all the sprites. self.player_list.draw() def on_update(self, delta_time): # Call update to move the sprite self.player_list.update() def on_key_press(self, key, modifiers): if key in ARROW_KEYS: if key == arcade.key.UP: self.up_pressed = True elif key == arcade.key.DOWN: self.down_pressed = True elif key == arcade.key.LEFT: self.left_pressed = True elif key == arcade.key.RIGHT: self.right_pressed = True self.update_player_speed() def on_key_release(self, key, modifiers): if key in ARROW_KEYS: if key == arcade.key.UP: self.up_pressed = False elif key == arcade.key.DOWN: self.down_pressed = False elif key == arcade.key.LEFT: self.left_pressed = False elif key == arcade.key.RIGHT: self.right_pressed = False self.update_player_speed() # END OVERWRITE BUILTIN FUNCTIONS # Custom function def update_player_speed(self): # Calculate speed based on the keys pressed self.player_sprite.change_x = 0 self.player_sprite.change_y = 0 # Since we add speeds together whenever each key is pressed, holding # opposite directions will add up to 0 and hold the player still if self.up_pressed: self.player_sprite.change_y += MOVEMENT_SPEED if self.down_pressed: self.player_sprite.change_y -= MOVEMENT_SPEED if self.left_pressed: self.player_sprite.change_x -= MOVEMENT_SPEED if self.right_pressed: self.player_sprite.change_x += MOVEMENT_SPEED window = MyGame(SCREEN_WIDTH, SCREEN_HEIGHT, 'Keyboard Movement') window.setup() arcade.run() You will get a window on the right like this, and you can use your arrow keys to move the sprite around:","title":"Getting Player Input"},{"location":"extralibs/arcade/#reference","text":"Arcade at api.arcade.academy Some Example Games that show what the Arcade library can do","title":"Reference"},{"location":"extralibs/beautifulsoup/","text":"BeautifulSoup4 BeautifulSoup4 is a library that parses HTML and XML files and provides an easy interface for extracting information out of them. Can be very useful when combined with the Requests library for scraping data off of webpages. Examples Get Title of Webpage with requests After installing the requests library, paste the following code into main.py : from bs4 import BeautifulSoup import requests url = \"https://www.wikipedia.org/\" req = requests.get(url) soup = BeautifulSoup(req.text, \"html.parser\") print(soup.title) Results: <title>Wikipedia</title> Reference BeautifulSoup4 at crummy.com","title":"beautifulsoup4"},{"location":"extralibs/beautifulsoup/#beautifulsoup4","text":"BeautifulSoup4 is a library that parses HTML and XML files and provides an easy interface for extracting information out of them. Can be very useful when combined with the Requests library for scraping data off of webpages.","title":"BeautifulSoup4"},{"location":"extralibs/beautifulsoup/#examples","text":"","title":"Examples"},{"location":"extralibs/beautifulsoup/#get-title-of-webpage-with-requests","text":"After installing the requests library, paste the following code into main.py : from bs4 import BeautifulSoup import requests url = \"https://www.wikipedia.org/\" req = requests.get(url) soup = BeautifulSoup(req.text, \"html.parser\") print(soup.title) Results: <title>Wikipedia</title>","title":"Get Title of Webpage with requests"},{"location":"extralibs/beautifulsoup/#reference","text":"BeautifulSoup4 at crummy.com","title":"Reference"},{"location":"extralibs/boto3/","text":"Boto3 Boto3 is a Python library written by Amazon to interact with their cloud services. In particular, it's useful for accessing Amazon's S3 (Simple Storage Service). Note Amazon offers a free version of their S3 service, however you are required to provide a phone number and credit card to use it. There are alternative services that offer S3 compatible storage for free with no credit card required, and we created a guide on how to set one up: Backblaze S3 Compatible Storage Service Warning When including private S3 credentials in your code, make sure you DO NOT make your project \"Open Source\" when you share it. Examples In all the following examples, you must replace all the credentials marked with pointed brackets (<>) with your own . You can find them by following the guide linked above. Add Object to Bucket You can put all kinds of objects in an S3 bucket. For an example, let's write a simple text file to it: import boto3 s3 = boto3.resource('s3', endpoint_url = '<YOUR ENDPOINT>', aws_access_key_id = '<YOUR KEYID>', aws_secret_access_key = '<YOUR ACCESS KEY>') s3.Bucket('<YOUR BUCKET NAME>').put_object( Key='example.txt', Body='this is an example text document' ) If we look at our bucket's file list, we can see that the example.txt is now there: Note It may take some time before this list updates and you can see it in your bucket through the web browser. We will still be able to access the file even if it's not visible yet in your account. Retrieving Object from Bucket Now that the object exists in the bucket, we can retrieve it: import boto3 s3 = boto3.resource('s3', endpoint_url = '<YOUR ENDPOINT>', aws_access_key_id = '<YOUR KEYID>', aws_secret_access_key = '<YOUR ACCESS KEY>') obj = s3.Object('<YOUR BUCKET NAME>', 'example.txt') obj_content = obj.get()['Body'].read().decode() print(obj_content) Output: this is an example text document Deleting Object from Bucket We can also delete an object stored in our bucket: import boto3 s3 = boto3.resource('s3', endpoint_url = '<YOUR ENDPOINT>', aws_access_key_id = '<YOUR KEYID>', aws_secret_access_key = '<YOUR ACCESS KEY>') obj = s3.Object('<YOUR BUCKET NAME>', 'example.txt') obj.delete() Now if we run the previous example where we try to read example.txt , we get the following error: botocore.errorfactory.NoSuchKey: An error occurred (NoSuchKey) when calling the GetObject operation: Key not found So we know that we have successfully deleted this object. Reference boto3 at amazonaws.com","title":"boto3"},{"location":"extralibs/boto3/#boto3","text":"Boto3 is a Python library written by Amazon to interact with their cloud services. In particular, it's useful for accessing Amazon's S3 (Simple Storage Service). Note Amazon offers a free version of their S3 service, however you are required to provide a phone number and credit card to use it. There are alternative services that offer S3 compatible storage for free with no credit card required, and we created a guide on how to set one up: Backblaze S3 Compatible Storage Service Warning When including private S3 credentials in your code, make sure you DO NOT make your project \"Open Source\" when you share it.","title":"Boto3"},{"location":"extralibs/boto3/#examples","text":"In all the following examples, you must replace all the credentials marked with pointed brackets (<>) with your own . You can find them by following the guide linked above.","title":"Examples"},{"location":"extralibs/boto3/#add-object-to-bucket","text":"You can put all kinds of objects in an S3 bucket. For an example, let's write a simple text file to it: import boto3 s3 = boto3.resource('s3', endpoint_url = '<YOUR ENDPOINT>', aws_access_key_id = '<YOUR KEYID>', aws_secret_access_key = '<YOUR ACCESS KEY>') s3.Bucket('<YOUR BUCKET NAME>').put_object( Key='example.txt', Body='this is an example text document' ) If we look at our bucket's file list, we can see that the example.txt is now there: Note It may take some time before this list updates and you can see it in your bucket through the web browser. We will still be able to access the file even if it's not visible yet in your account.","title":"Add Object to Bucket"},{"location":"extralibs/boto3/#retrieving-object-from-bucket","text":"Now that the object exists in the bucket, we can retrieve it: import boto3 s3 = boto3.resource('s3', endpoint_url = '<YOUR ENDPOINT>', aws_access_key_id = '<YOUR KEYID>', aws_secret_access_key = '<YOUR ACCESS KEY>') obj = s3.Object('<YOUR BUCKET NAME>', 'example.txt') obj_content = obj.get()['Body'].read().decode() print(obj_content) Output: this is an example text document","title":"Retrieving Object from Bucket"},{"location":"extralibs/boto3/#deleting-object-from-bucket","text":"We can also delete an object stored in our bucket: import boto3 s3 = boto3.resource('s3', endpoint_url = '<YOUR ENDPOINT>', aws_access_key_id = '<YOUR KEYID>', aws_secret_access_key = '<YOUR ACCESS KEY>') obj = s3.Object('<YOUR BUCKET NAME>', 'example.txt') obj.delete() Now if we run the previous example where we try to read example.txt , we get the following error: botocore.errorfactory.NoSuchKey: An error occurred (NoSuchKey) when calling the GetObject operation: Key not found So we know that we have successfully deleted this object.","title":"Deleting Object from Bucket"},{"location":"extralibs/boto3/#reference","text":"boto3 at amazonaws.com","title":"Reference"},{"location":"extralibs/bottle/","text":"Bottle Bottle is an ultra-lightweight web framework that works with just the Python Standard Library. Bottle also supports html template frameworks like Jinja2 for building more robust websites. Examples Say Hello Let's create a simple server with two endpoints. Copy and paste the code below to the Python3 Editor: from bottle import route, run, template @route('/') def index(): return 'index page' @route('/hello/<name>') def hello(name): return template('<b>Hello {{name}}</b>!', name=name) # host must be 0.0.0.0 to work in the Python3 Editor run(host='0.0.0.0', port=8080) When you click run, you will see the website running to the right of your code. When you visit \"/\", you will see a page like this: And when you visit \"/hello/john\", you will see a page like this: Reference Bottle at bottlepy.org","title":"bottle"},{"location":"extralibs/bottle/#bottle","text":"Bottle is an ultra-lightweight web framework that works with just the Python Standard Library. Bottle also supports html template frameworks like Jinja2 for building more robust websites.","title":"Bottle"},{"location":"extralibs/bottle/#examples","text":"","title":"Examples"},{"location":"extralibs/bottle/#say-hello","text":"Let's create a simple server with two endpoints. Copy and paste the code below to the Python3 Editor: from bottle import route, run, template @route('/') def index(): return 'index page' @route('/hello/<name>') def hello(name): return template('<b>Hello {{name}}</b>!', name=name) # host must be 0.0.0.0 to work in the Python3 Editor run(host='0.0.0.0', port=8080) When you click run, you will see the website running to the right of your code. When you visit \"/\", you will see a page like this: And when you visit \"/hello/john\", you will see a page like this:","title":"Say Hello"},{"location":"extralibs/bottle/#reference","text":"Bottle at bottlepy.org","title":"Reference"},{"location":"extralibs/dataset/","text":"Dataset The \"dataset\" library makes reading and writing data in SQLite databases as simple as reading and writing JSON files. Example: Simple Student Roster We can rewrite the example in the SQLite documentation with this dataset library. import dataset db = dataset.connect('sqlite:///example.db') table = db[\"students\"] table.insert({ \"last_name\": \"Doe\", \"first_name\": \"John\", \"age\": 16, \"gpa\": 3.2 }) table.insert({ \"last_name\": \"Doe\", \"first_name\": \"Jane\", \"age\": 13, \"gpa\": 3.8 }) table.insert({ \"last_name\": \"Smith\", \"first_name\": \"Ronald\", \"age\": 14, \"gpa\": 2.7 }) # find all students that age > 15 students = table.find(age={\">\": 15}) for student in students: print(student) # find one student whose first name is \"Jane\" jane = table.find_one(first_name=\"Jane\") print(jane) Run the code: Students with age > 13: OrderedDict([('id', 1), ('last_name', 'Doe'), ('first_name', 'John'), ('age', 16), ('gpa', 3.2)]) OrderedDict([('id', 3), ('last_name', 'Smith'), ('first_name', 'Ronald'), ('age', 14), ('gpa', 2.7)]) Student with name Jane: OrderedDict([('id', 2), ('last_name', 'Doe'), ('first_name', 'Jane'), ('age', 13), ('gpa', 3.8)]) In the above example, we first connect to a database file named \"example.db\", if the file doesn't exist, dataset will automatically create this file, then we insert 3 students into the table, then we query all students whose age is greater than 13. We also made a query to find a student whose name is \"Jane\". You can see that with the dataset library, we don't need to write SQL statements like SELECT , INSERT , it makes the operation much easier. Reference For more examples on query, insert, update and delete, please head to the dataset official documentation: https://dataset.readthedocs.io/","title":"dataset"},{"location":"extralibs/dataset/#dataset","text":"The \"dataset\" library makes reading and writing data in SQLite databases as simple as reading and writing JSON files.","title":"Dataset"},{"location":"extralibs/dataset/#example-simple-student-roster","text":"We can rewrite the example in the SQLite documentation with this dataset library. import dataset db = dataset.connect('sqlite:///example.db') table = db[\"students\"] table.insert({ \"last_name\": \"Doe\", \"first_name\": \"John\", \"age\": 16, \"gpa\": 3.2 }) table.insert({ \"last_name\": \"Doe\", \"first_name\": \"Jane\", \"age\": 13, \"gpa\": 3.8 }) table.insert({ \"last_name\": \"Smith\", \"first_name\": \"Ronald\", \"age\": 14, \"gpa\": 2.7 }) # find all students that age > 15 students = table.find(age={\">\": 15}) for student in students: print(student) # find one student whose first name is \"Jane\" jane = table.find_one(first_name=\"Jane\") print(jane) Run the code: Students with age > 13: OrderedDict([('id', 1), ('last_name', 'Doe'), ('first_name', 'John'), ('age', 16), ('gpa', 3.2)]) OrderedDict([('id', 3), ('last_name', 'Smith'), ('first_name', 'Ronald'), ('age', 14), ('gpa', 2.7)]) Student with name Jane: OrderedDict([('id', 2), ('last_name', 'Doe'), ('first_name', 'Jane'), ('age', 13), ('gpa', 3.8)]) In the above example, we first connect to a database file named \"example.db\", if the file doesn't exist, dataset will automatically create this file, then we insert 3 students into the table, then we query all students whose age is greater than 13. We also made a query to find a student whose name is \"Jane\". You can see that with the dataset library, we don't need to write SQL statements like SELECT , INSERT , it makes the operation much easier.","title":"Example: Simple Student Roster"},{"location":"extralibs/dataset/#reference","text":"For more examples on query, insert, update and delete, please head to the dataset official documentation: https://dataset.readthedocs.io/","title":"Reference"},{"location":"extralibs/fastapi/","text":"FastAPI FastAPI is a web framework that's designed to help programmers create API quickly and cleanly while being self-documenting. It is based on Starlette . It's made to be easy to understand and ready for production releases and is currently being used in many real-world applications by major companies like Microsoft. Note Since FastAPI is built on Starlette, an ASGI web server is needed. We will be using Uvicorn in the following examples, so make sure you also add the Uvicorn library to your project before trying to run the example code. Examples Creating a Basic API Let's create a simple \"Hello, World!\" API to get a feel for how FastAPI works: import time import uvicorn from fastapi import FastAPI app = FastAPI() @app.get('/') async def root(): return { 'message': 'Hello, World!', 'timestamp': time.time() } uvicorn.run(app, host='0.0.0.0', port=8000) When run, we will get a window to a webpage that returns this: {\"message\":\"Hello, World!\",\"timestamp\":1678210725.4149153} While not anything special by itself, we can see that FastAPI will automatically create a docs page we can access and test our APIs. We can see them if we navigate to the /docs endpoint in our app: From this page, click on the Root dropdown, and then click on Try it out : Then, when you click on the Execute button, you will get all your request's info presented directly in this window: More Robust API Definitions with Python Typehints FastAPI really shines when, and is designed to be used with, Python Typehints . Even though Python is a dynamically typed language where you don't need to assign a type (like str , int , and so on) to each variable when declaring them like Java. However, Python supports typehints , which is a tool for programmers to communicate what kind of variables functions are expecting and what they will return. They are optional, but can help in creating easier to understand and maintainable code. Let's see how that works with FastAPI with this example: import uvicorn from fastapi import FastAPI app = FastAPI() INVENTORY = ['a', 'b', 'c', 'd', 'e'] @app.get('/inventory/{slot_index}') async def read_item(slot_index: int): try: return {'ok': True, 'item': INVENTORY[slot_index]} except Exception: return {'ok': False, 'msg': 'Invalid index'} uvicorn.run(app, host='0.0.0.0', port=8000) When we visit a valid url like /inventory/4 , we will get a page like this: {\"ok\":true,\"item\":\"e\"} The useful part comes when we look at the docs again. When we click Try it out for this new endpoint, it comes with an input for the slot_index argument, where we can easily try out many values in an easy-to-use interface: If we try with an index of 5 , we get this: Argument Validation We can use the Query object from FastAPI to specify a query argument, as well as put some constraints on it: import uvicorn from fastapi import FastAPI, Query app = FastAPI() @app.get('/paramtest') async def read_item(q: str | None = Query(default=None, max_length=5)): return {'echo': q} uvicorn.run(app, host='0.0.0.0', port=8000) Then, when we visit /paramtest?q=abcde , we get a page that shows this: {\"echo\":\"abcde\"} If we visit the docs and try to input a query that's too long, it will render an error message for us: Reference FastAPI at tiangolo.com Python Typehints at docs.python.org","title":"fastapi"},{"location":"extralibs/fastapi/#fastapi","text":"FastAPI is a web framework that's designed to help programmers create API quickly and cleanly while being self-documenting. It is based on Starlette . It's made to be easy to understand and ready for production releases and is currently being used in many real-world applications by major companies like Microsoft. Note Since FastAPI is built on Starlette, an ASGI web server is needed. We will be using Uvicorn in the following examples, so make sure you also add the Uvicorn library to your project before trying to run the example code.","title":"FastAPI"},{"location":"extralibs/fastapi/#examples","text":"","title":"Examples"},{"location":"extralibs/fastapi/#creating-a-basic-api","text":"Let's create a simple \"Hello, World!\" API to get a feel for how FastAPI works: import time import uvicorn from fastapi import FastAPI app = FastAPI() @app.get('/') async def root(): return { 'message': 'Hello, World!', 'timestamp': time.time() } uvicorn.run(app, host='0.0.0.0', port=8000) When run, we will get a window to a webpage that returns this: {\"message\":\"Hello, World!\",\"timestamp\":1678210725.4149153} While not anything special by itself, we can see that FastAPI will automatically create a docs page we can access and test our APIs. We can see them if we navigate to the /docs endpoint in our app: From this page, click on the Root dropdown, and then click on Try it out : Then, when you click on the Execute button, you will get all your request's info presented directly in this window:","title":"Creating a Basic API"},{"location":"extralibs/fastapi/#more-robust-api-definitions-with-python-typehints","text":"FastAPI really shines when, and is designed to be used with, Python Typehints . Even though Python is a dynamically typed language where you don't need to assign a type (like str , int , and so on) to each variable when declaring them like Java. However, Python supports typehints , which is a tool for programmers to communicate what kind of variables functions are expecting and what they will return. They are optional, but can help in creating easier to understand and maintainable code. Let's see how that works with FastAPI with this example: import uvicorn from fastapi import FastAPI app = FastAPI() INVENTORY = ['a', 'b', 'c', 'd', 'e'] @app.get('/inventory/{slot_index}') async def read_item(slot_index: int): try: return {'ok': True, 'item': INVENTORY[slot_index]} except Exception: return {'ok': False, 'msg': 'Invalid index'} uvicorn.run(app, host='0.0.0.0', port=8000) When we visit a valid url like /inventory/4 , we will get a page like this: {\"ok\":true,\"item\":\"e\"} The useful part comes when we look at the docs again. When we click Try it out for this new endpoint, it comes with an input for the slot_index argument, where we can easily try out many values in an easy-to-use interface: If we try with an index of 5 , we get this:","title":"More Robust API Definitions with Python Typehints"},{"location":"extralibs/fastapi/#argument-validation","text":"We can use the Query object from FastAPI to specify a query argument, as well as put some constraints on it: import uvicorn from fastapi import FastAPI, Query app = FastAPI() @app.get('/paramtest') async def read_item(q: str | None = Query(default=None, max_length=5)): return {'echo': q} uvicorn.run(app, host='0.0.0.0', port=8000) Then, when we visit /paramtest?q=abcde , we get a page that shows this: {\"echo\":\"abcde\"} If we visit the docs and try to input a query that's too long, it will render an error message for us:","title":"Argument Validation"},{"location":"extralibs/fastapi/#reference","text":"FastAPI at tiangolo.com Python Typehints at docs.python.org","title":"Reference"},{"location":"extralibs/firebase-admin/","text":"firebase-admin firebase-admin is a Python library that allows for accessing and interacting with Firebase projects. In particular, Firebase offers a free realtime database service that we can use to store and access data from Python3 Editor projects. Note You need to have an active Google account and project on Firebase to use this package. For a guide on how to set one up with a realtime database activated, check our cloud services guide to Firebase: Free Google Account and Firebase Setup Warning When including private database credentials in your code, make sure you DO NOT make your project \"Open Source\" when you share it. Connecting to Your Realtime Database To use this library, you must have an active and setup Firebase account with a realtime database set up . You can create one and set it up following the guide linked above. Downloading Your Credentials JSON First, go to the left side of the Firebase UI and find the gear icon next to the Project Overview label. Then, click on Project Settings : From there, click on the Service Accounts tab on the top, make sure Firebase Admin SDK is selected, then click on Generate new private key . This will download a .json file that we will need to upload to the Python3 Editor: Note Do not share this file with anybody else. It would give them full access to your database in a way you cannot control. Uploading Your Credentials JSON to Your Project At the top of your project's file list in Python3 Editor, click on the dropdown menu and select Upload File : Find the credentials file in your computer's file browser, and we can rename it to cred.json : Examples In all the following examples, you must have a credentials JSON file uploaded to your project somewhere . To keep it simple, we're using a file named cred.json in our project's root path. Creating a Document Let's create a couple of documents to insert into our Firebase. We can add documents in dictionary form: import firebase_admin from firebase_admin import db cred_obj = firebase_admin.credentials.Certificate('cred.json') default_app = firebase_admin.initialize_app(cred_obj, { 'databaseURL': 'https://<YOUR DATABASE URL>.firebaseio.com/' }) ref = db.reference('/') data = { \"Cat1\": { \"Name\": 'Simba', \"Age\": 12 }, \"Cat2\": { \"Name\": 'Chickpea', \"Age\": 3 } } ref.set(data) If we look at our Firebase now, we can see the data has been inserted: Reading a Document We can retrieve our data with the db reference's get() method: import firebase_admin from firebase_admin import db cred_obj = firebase_admin.credentials.Certificate('cred.json') default_app = firebase_admin.initialize_app(cred_obj, { 'databaseURL': 'https://<YOUR DATABASE URL>.firebaseio.com/' }) ref = db.reference('/') cat1 = ref.get()['Cat1'] print(cat1) Output: {'Age': 12, 'Name': 'Simba'} Updating a Document We can update a document key by using a reference's update() method: import firebase_admin from firebase_admin import db cred_obj = firebase_admin.credentials.Certificate('cred.json') default_app = firebase_admin.initialize_app(cred_obj, { 'databaseURL': 'https://<YOUR DATABASE URL>.firebaseio.com/' }) # We only want to update Cat1 cat1_ref = db.reference(\"/Cat1\") # Before read print(cat1_ref.get()) # Perform update data = { 'Age': 13 } cat1_ref.update(data) # After read print(cat1_ref.get()) Output: {'Age': 12, 'Name': 'Simba'} {'Age': 13, 'Name': 'Simba'} Deleting a Document Finally, we can delete a document by calling the delete() method on a reference to it: import firebase_admin from firebase_admin import db cred_obj = firebase_admin.credentials.Certificate('cred.json') default_app = firebase_admin.initialize_app(cred_obj, { 'databaseURL': 'https://example-project-b8372-default-rtdb.firebaseio.com/' }) cat1_ref = db.reference(\"Cat1\") # Get our Cat1 print(cat1_ref.get()) # Print it out cat1_ref.delete() # Delete from Firebase print(cat1_ref.get()) # Try to read it again Output: {'Age': 13, 'Name': 'Simba'} None Reference Firebase Admin Python SDK at firebase.google.com","title":"firebase-admin"},{"location":"extralibs/firebase-admin/#firebase-admin","text":"firebase-admin is a Python library that allows for accessing and interacting with Firebase projects. In particular, Firebase offers a free realtime database service that we can use to store and access data from Python3 Editor projects. Note You need to have an active Google account and project on Firebase to use this package. For a guide on how to set one up with a realtime database activated, check our cloud services guide to Firebase: Free Google Account and Firebase Setup Warning When including private database credentials in your code, make sure you DO NOT make your project \"Open Source\" when you share it.","title":"firebase-admin"},{"location":"extralibs/firebase-admin/#connecting-to-your-realtime-database","text":"To use this library, you must have an active and setup Firebase account with a realtime database set up . You can create one and set it up following the guide linked above.","title":"Connecting to Your Realtime Database"},{"location":"extralibs/firebase-admin/#downloading-your-credentials-json","text":"First, go to the left side of the Firebase UI and find the gear icon next to the Project Overview label. Then, click on Project Settings : From there, click on the Service Accounts tab on the top, make sure Firebase Admin SDK is selected, then click on Generate new private key . This will download a .json file that we will need to upload to the Python3 Editor: Note Do not share this file with anybody else. It would give them full access to your database in a way you cannot control.","title":"Downloading Your Credentials JSON"},{"location":"extralibs/firebase-admin/#uploading-your-credentials-json-to-your-project","text":"At the top of your project's file list in Python3 Editor, click on the dropdown menu and select Upload File : Find the credentials file in your computer's file browser, and we can rename it to cred.json :","title":"Uploading Your Credentials JSON to Your Project"},{"location":"extralibs/firebase-admin/#examples","text":"In all the following examples, you must have a credentials JSON file uploaded to your project somewhere . To keep it simple, we're using a file named cred.json in our project's root path.","title":"Examples"},{"location":"extralibs/firebase-admin/#creating-a-document","text":"Let's create a couple of documents to insert into our Firebase. We can add documents in dictionary form: import firebase_admin from firebase_admin import db cred_obj = firebase_admin.credentials.Certificate('cred.json') default_app = firebase_admin.initialize_app(cred_obj, { 'databaseURL': 'https://<YOUR DATABASE URL>.firebaseio.com/' }) ref = db.reference('/') data = { \"Cat1\": { \"Name\": 'Simba', \"Age\": 12 }, \"Cat2\": { \"Name\": 'Chickpea', \"Age\": 3 } } ref.set(data) If we look at our Firebase now, we can see the data has been inserted:","title":"Creating a Document"},{"location":"extralibs/firebase-admin/#reading-a-document","text":"We can retrieve our data with the db reference's get() method: import firebase_admin from firebase_admin import db cred_obj = firebase_admin.credentials.Certificate('cred.json') default_app = firebase_admin.initialize_app(cred_obj, { 'databaseURL': 'https://<YOUR DATABASE URL>.firebaseio.com/' }) ref = db.reference('/') cat1 = ref.get()['Cat1'] print(cat1) Output: {'Age': 12, 'Name': 'Simba'}","title":"Reading a Document"},{"location":"extralibs/firebase-admin/#updating-a-document","text":"We can update a document key by using a reference's update() method: import firebase_admin from firebase_admin import db cred_obj = firebase_admin.credentials.Certificate('cred.json') default_app = firebase_admin.initialize_app(cred_obj, { 'databaseURL': 'https://<YOUR DATABASE URL>.firebaseio.com/' }) # We only want to update Cat1 cat1_ref = db.reference(\"/Cat1\") # Before read print(cat1_ref.get()) # Perform update data = { 'Age': 13 } cat1_ref.update(data) # After read print(cat1_ref.get()) Output: {'Age': 12, 'Name': 'Simba'} {'Age': 13, 'Name': 'Simba'}","title":"Updating a Document"},{"location":"extralibs/firebase-admin/#deleting-a-document","text":"Finally, we can delete a document by calling the delete() method on a reference to it: import firebase_admin from firebase_admin import db cred_obj = firebase_admin.credentials.Certificate('cred.json') default_app = firebase_admin.initialize_app(cred_obj, { 'databaseURL': 'https://example-project-b8372-default-rtdb.firebaseio.com/' }) cat1_ref = db.reference(\"Cat1\") # Get our Cat1 print(cat1_ref.get()) # Print it out cat1_ref.delete() # Delete from Firebase print(cat1_ref.get()) # Try to read it again Output: {'Age': 13, 'Name': 'Simba'} None","title":"Deleting a Document"},{"location":"extralibs/firebase-admin/#reference","text":"Firebase Admin Python SDK at firebase.google.com","title":"Reference"},{"location":"extralibs/flask/","text":"Flask Flask is a micro web framwork. Flask is similar to Bottle , but it has more functionality out of the box and scales easier. Flask is better suited for larger projects that can span across mulitple Python files. Example Say Hello Let's create a simple server using Flask. This creates a server that says \"Welcome to Flask!\" when visiting the index page: from flask import Flask app = Flask(__name__) @app.route('/') def index(): return 'Welcome to Flask!' if __name__ == '__main__': # host must be 0.0.0.0 to work in the Python3 Editor app.run(host='0.0.0.0', port=8080) When we run our code, we get the folllowing output on the right: Basic Web Server with Templates Flask will look for template files in the templates directory by default, so first, create a new folder named templates , then add a file named welcome.html . To create a folder in your project, click on NEW FOLDER at the top of your project's file list: Then, name it \"templates\" in the window that pops up: Add a new file to your project and name it welcome.html . Paste the following HTML into the file then put it inside of your templates folder that we just created: <!DOCTYPE html> <html> <head> </head> <body> Welcome to my website, {{name}}! </body> </html> Your project's file list should look like this when you are done: Now that we have a template in our templates folder, copy and paste the below code to main.py : from flask import Flask, render_template app = Flask(__name__) @app.route('/') def index(): return 'This is the index page' @app.route('/welcome/<name>') def welcome(name): return render_template( 'welcome.html', name=name ) if __name__ == '__main__': # host must be 0.0.0.0 to work in the Python3 Editor app.run(host='0.0.0.0', port=8080) When you visit \"/\", you will see a page like this: And when you visit \"/welcome/jane\", you will see a page like this: Reference Flask at flask.palletsprojects.com","title":"flask"},{"location":"extralibs/flask/#flask","text":"Flask is a micro web framwork. Flask is similar to Bottle , but it has more functionality out of the box and scales easier. Flask is better suited for larger projects that can span across mulitple Python files.","title":"Flask"},{"location":"extralibs/flask/#example","text":"","title":"Example"},{"location":"extralibs/flask/#say-hello","text":"Let's create a simple server using Flask. This creates a server that says \"Welcome to Flask!\" when visiting the index page: from flask import Flask app = Flask(__name__) @app.route('/') def index(): return 'Welcome to Flask!' if __name__ == '__main__': # host must be 0.0.0.0 to work in the Python3 Editor app.run(host='0.0.0.0', port=8080) When we run our code, we get the folllowing output on the right:","title":"Say Hello"},{"location":"extralibs/flask/#basic-web-server-with-templates","text":"Flask will look for template files in the templates directory by default, so first, create a new folder named templates , then add a file named welcome.html . To create a folder in your project, click on NEW FOLDER at the top of your project's file list: Then, name it \"templates\" in the window that pops up: Add a new file to your project and name it welcome.html . Paste the following HTML into the file then put it inside of your templates folder that we just created: <!DOCTYPE html> <html> <head> </head> <body> Welcome to my website, {{name}}! </body> </html> Your project's file list should look like this when you are done: Now that we have a template in our templates folder, copy and paste the below code to main.py : from flask import Flask, render_template app = Flask(__name__) @app.route('/') def index(): return 'This is the index page' @app.route('/welcome/<name>') def welcome(name): return render_template( 'welcome.html', name=name ) if __name__ == '__main__': # host must be 0.0.0.0 to work in the Python3 Editor app.run(host='0.0.0.0', port=8080) When you visit \"/\", you will see a page like this: And when you visit \"/welcome/jane\", you will see a page like this:","title":"Basic Web Server with Templates"},{"location":"extralibs/flask/#reference","text":"Flask at flask.palletsprojects.com","title":"Reference"},{"location":"extralibs/httpx/","text":"HTTPX HTTPX is an HTTP client for Python, similar to Requests , which can be used synchronously and asynchronously. Examples Basic Web Requests Note Typical web requests can be performed exactly the same way as they can with the Requests package. The examples on that page can work exactly the same with HTTPX , just replace the package name. The basic way to load a webpage is with a GET request. The following code will send a GET request to a webpage, and load the result into a response object: import httpx query = {'exampleKey': 'exampleValue'} resp = httpx.get('https://httpbin.service.oyoclass.com/get', params=query) print(resp.text) Most webpages will give their raw HTML, however this site acts like an echo for testing: { \"args\": { \"exampleKey\": \"exampleValue\" }, \"headers\": { \"Accept\": \"*/*\", \"Accept-Encoding\": \"gzip\", \"Cdn-Loop\": \"cloudflare\", \"Cf-Connecting-Ip\": \"23.92.19.165\", \"Cf-Ipcountry\": \"US\", \"Cf-Ray\": \"7a45cdbb68178c3b-EWR\", \"Cf-Visitor\": \"{\\\"scheme\\\":\\\"https\\\"}\", \"Host\": \"httpbin.service.oyoclass.com\", \"User-Agent\": \"python-httpx/0.23.3\" }, \"origin\": \"23.92.19.165, 23.92.19.165\", \"url\": \"https://httpbin.service.oyoclass.com/get?exampleKey=exampleValue\" } Access a Public API Let's access coingecko.com 's public API for getting the current price of bitcoin in USD: import httpx url = 'https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd' resp = httpx.get(url) print(resp.text) Output (your results will vary depending on the current price of BTC) : {\"bitcoin\":{\"usd\":24218}} Using the OYOclass Proxy If the above API is being blocked, you can try adding https://proxy.oyoclass.com/ to the beginning of your URL: import httpx url = 'https://proxy.oyoclass.com/https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd' resp = httpx.get(url) print(resp.text) POST Data to a Webpage We can also POST data to webpages with HTTPX. This action is like submitting form data or logging into a webpage, not trying to load a page: import httpx post_data = {'exampleKey': 'exampleValue'} resp = httpx.post('https://httpbin.service.oyoclass.com/post', data=post_data) print(resp.text) The target URL in the example is also a special echo endpoint: { \"args\": {}, \"data\": \"\", \"files\": {}, \"form\": { \"exampleKey\": \"exampleValue\" }, \"headers\": { \"Accept\": \"*/*\", \"Accept-Encoding\": \"gzip\", \"Cdn-Loop\": \"cloudflare\", \"Cf-Connecting-Ip\": \"23.92.19.165\", \"Cf-Ipcountry\": \"US\", \"Cf-Ray\": \"7a8654b9fd6278df-EWR\", \"Cf-Visitor\": \"{\\\"scheme\\\":\\\"https\\\"}\", \"Content-Length\": \"23\", \"Content-Type\": \"application/x-www-form-urlencoded\", \"Host\": \"httpbin.service.oyoclass.com\", \"User-Agent\": \"python-httpx/0.23.3\" }, \"json\": null, \"origin\": \"23.92.19.165, 23.92.19.165\", \"url\": \"https://httpbin.service.oyoclass.com/post\" } Using a Client to Share Request Parameters If you want a set of parameters to be shared across a range of requests, you should use a request client: import pprint import httpx headers = {'user-agent': 'example-app/1.0'} with httpx.Client(headers=headers) as client: resp1 = client.get('https://httpbin.service.oyoclass.com/get', params={\"num\": 1}) resp2 = client.get('https://httpbin.service.oyoclass.com/get', params={\"num\": 2}) print('Request 1:') pprint.pprint(resp1.json()) print('\\nRequest2:') pprint.pprint(resp2.json()) Output (extra headers have been removed to make output more clear) : Request 1: {'args': {'num': '1'}, 'headers': {'User-Agent': 'example-app/1.0'}, 'url': 'https://httpbin.service.oyoclass.com/get?num=1'} Request2: {'args': {'num': '2'}, 'headers': {'User-Agent': 'example-app/1.0'}, 'url': 'https://httpbin.service.oyoclass.com/get?num=2'} asyncio Support HTTPX offers an async client which works with Python's builtin asyncio : import asyncio import httpx async def main(): async with httpx.AsyncClient() as client: resp = await client.get('https://httpbin.service.oyoclass.com/get') print(resp.text) asyncio.run(main()) Output for this example is the same for the first example: { \"args\": { \"exampleKey\": \"exampleValue\" }, \"headers\": { \"Accept\": \"*/*\", \"Accept-Encoding\": \"gzip\", \"Cdn-Loop\": \"cloudflare\", \"Cf-Connecting-Ip\": \"23.92.19.165\", \"Cf-Ipcountry\": \"US\", \"Cf-Ray\": \"7a45cdbb68178c3b-EWR\", \"Cf-Visitor\": \"{\\\"scheme\\\":\\\"https\\\"}\", \"Host\": \"httpbin.service.oyoclass.com\", \"User-Agent\": \"python-httpx/0.23.3\" }, \"origin\": \"23.92.19.165, 23.92.19.165\", \"url\": \"https://httpbin.service.oyoclass.com/get?exampleKey=exampleValue\" } Reference HTTPX at python-httpx.org","title":"httpx"},{"location":"extralibs/httpx/#httpx","text":"HTTPX is an HTTP client for Python, similar to Requests , which can be used synchronously and asynchronously.","title":"HTTPX"},{"location":"extralibs/httpx/#examples","text":"","title":"Examples"},{"location":"extralibs/httpx/#basic-web-requests","text":"Note Typical web requests can be performed exactly the same way as they can with the Requests package. The examples on that page can work exactly the same with HTTPX , just replace the package name. The basic way to load a webpage is with a GET request. The following code will send a GET request to a webpage, and load the result into a response object: import httpx query = {'exampleKey': 'exampleValue'} resp = httpx.get('https://httpbin.service.oyoclass.com/get', params=query) print(resp.text) Most webpages will give their raw HTML, however this site acts like an echo for testing: { \"args\": { \"exampleKey\": \"exampleValue\" }, \"headers\": { \"Accept\": \"*/*\", \"Accept-Encoding\": \"gzip\", \"Cdn-Loop\": \"cloudflare\", \"Cf-Connecting-Ip\": \"23.92.19.165\", \"Cf-Ipcountry\": \"US\", \"Cf-Ray\": \"7a45cdbb68178c3b-EWR\", \"Cf-Visitor\": \"{\\\"scheme\\\":\\\"https\\\"}\", \"Host\": \"httpbin.service.oyoclass.com\", \"User-Agent\": \"python-httpx/0.23.3\" }, \"origin\": \"23.92.19.165, 23.92.19.165\", \"url\": \"https://httpbin.service.oyoclass.com/get?exampleKey=exampleValue\" }","title":"Basic Web Requests"},{"location":"extralibs/httpx/#access-a-public-api","text":"Let's access coingecko.com 's public API for getting the current price of bitcoin in USD: import httpx url = 'https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd' resp = httpx.get(url) print(resp.text) Output (your results will vary depending on the current price of BTC) : {\"bitcoin\":{\"usd\":24218}}","title":"Access a Public API"},{"location":"extralibs/httpx/#using-the-oyoclass-proxy","text":"If the above API is being blocked, you can try adding https://proxy.oyoclass.com/ to the beginning of your URL: import httpx url = 'https://proxy.oyoclass.com/https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd' resp = httpx.get(url) print(resp.text)","title":"Using the OYOclass Proxy"},{"location":"extralibs/httpx/#post-data-to-a-webpage","text":"We can also POST data to webpages with HTTPX. This action is like submitting form data or logging into a webpage, not trying to load a page: import httpx post_data = {'exampleKey': 'exampleValue'} resp = httpx.post('https://httpbin.service.oyoclass.com/post', data=post_data) print(resp.text) The target URL in the example is also a special echo endpoint: { \"args\": {}, \"data\": \"\", \"files\": {}, \"form\": { \"exampleKey\": \"exampleValue\" }, \"headers\": { \"Accept\": \"*/*\", \"Accept-Encoding\": \"gzip\", \"Cdn-Loop\": \"cloudflare\", \"Cf-Connecting-Ip\": \"23.92.19.165\", \"Cf-Ipcountry\": \"US\", \"Cf-Ray\": \"7a8654b9fd6278df-EWR\", \"Cf-Visitor\": \"{\\\"scheme\\\":\\\"https\\\"}\", \"Content-Length\": \"23\", \"Content-Type\": \"application/x-www-form-urlencoded\", \"Host\": \"httpbin.service.oyoclass.com\", \"User-Agent\": \"python-httpx/0.23.3\" }, \"json\": null, \"origin\": \"23.92.19.165, 23.92.19.165\", \"url\": \"https://httpbin.service.oyoclass.com/post\" }","title":"POST Data to a Webpage"},{"location":"extralibs/httpx/#using-a-client-to-share-request-parameters","text":"If you want a set of parameters to be shared across a range of requests, you should use a request client: import pprint import httpx headers = {'user-agent': 'example-app/1.0'} with httpx.Client(headers=headers) as client: resp1 = client.get('https://httpbin.service.oyoclass.com/get', params={\"num\": 1}) resp2 = client.get('https://httpbin.service.oyoclass.com/get', params={\"num\": 2}) print('Request 1:') pprint.pprint(resp1.json()) print('\\nRequest2:') pprint.pprint(resp2.json()) Output (extra headers have been removed to make output more clear) : Request 1: {'args': {'num': '1'}, 'headers': {'User-Agent': 'example-app/1.0'}, 'url': 'https://httpbin.service.oyoclass.com/get?num=1'} Request2: {'args': {'num': '2'}, 'headers': {'User-Agent': 'example-app/1.0'}, 'url': 'https://httpbin.service.oyoclass.com/get?num=2'}","title":"Using a Client to Share Request Parameters"},{"location":"extralibs/httpx/#asyncio-support","text":"HTTPX offers an async client which works with Python's builtin asyncio : import asyncio import httpx async def main(): async with httpx.AsyncClient() as client: resp = await client.get('https://httpbin.service.oyoclass.com/get') print(resp.text) asyncio.run(main()) Output for this example is the same for the first example: { \"args\": { \"exampleKey\": \"exampleValue\" }, \"headers\": { \"Accept\": \"*/*\", \"Accept-Encoding\": \"gzip\", \"Cdn-Loop\": \"cloudflare\", \"Cf-Connecting-Ip\": \"23.92.19.165\", \"Cf-Ipcountry\": \"US\", \"Cf-Ray\": \"7a45cdbb68178c3b-EWR\", \"Cf-Visitor\": \"{\\\"scheme\\\":\\\"https\\\"}\", \"Host\": \"httpbin.service.oyoclass.com\", \"User-Agent\": \"python-httpx/0.23.3\" }, \"origin\": \"23.92.19.165, 23.92.19.165\", \"url\": \"https://httpbin.service.oyoclass.com/get?exampleKey=exampleValue\" }","title":"asyncio Support"},{"location":"extralibs/httpx/#reference","text":"HTTPX at python-httpx.org","title":"Reference"},{"location":"extralibs/jinja2/","text":"Jinja2 Jinja2 is a templating engine. It allows you to inject variables and write code similar to Python directly into text files, which can be very useful for building webpages. Examples Render a Template from File First, create a template named template.html in your project's directory: <!DOCTYPE html> <html> <head> <title>My Template</title> </head> <body> {% for i in range(count_to) %}{{i}} {% endfor %} {% if say_hi %} Hi! {% else %} Goodbye! {% endif %} </body> </html> Then, in main.py : from jinja2 import Environment, FileSystemLoader environment = Environment(loader=FileSystemLoader('./')) template = environment.get_template('template.html') print(template.render(count_to=10, say_hi=False)) Results: <!DOCTYPE html> <html> <head> <title>My Template</title> </head> <body> 0 1 2 3 4 5 6 7 8 9 Goodbye! </body> </html> Reference Jinja2 at jinja.palletsprojects.com","title":"jinja2"},{"location":"extralibs/jinja2/#jinja2","text":"Jinja2 is a templating engine. It allows you to inject variables and write code similar to Python directly into text files, which can be very useful for building webpages.","title":"Jinja2"},{"location":"extralibs/jinja2/#examples","text":"","title":"Examples"},{"location":"extralibs/jinja2/#render-a-template-from-file","text":"First, create a template named template.html in your project's directory: <!DOCTYPE html> <html> <head> <title>My Template</title> </head> <body> {% for i in range(count_to) %}{{i}} {% endfor %} {% if say_hi %} Hi! {% else %} Goodbye! {% endif %} </body> </html> Then, in main.py : from jinja2 import Environment, FileSystemLoader environment = Environment(loader=FileSystemLoader('./')) template = environment.get_template('template.html') print(template.render(count_to=10, say_hi=False)) Results: <!DOCTYPE html> <html> <head> <title>My Template</title> </head> <body> 0 1 2 3 4 5 6 7 8 9 Goodbye! </body> </html>","title":"Render a Template from File"},{"location":"extralibs/jinja2/#reference","text":"Jinja2 at jinja.palletsprojects.com","title":"Reference"},{"location":"extralibs/matplotlib/","text":"Matplotlib Matplotlib is a library for creating various data visualizations in Python. You can render many different kinds of graphs and charts with a simple interface. This library works closely with NumPy to handle its datasets. Examples Plot a Simple Line Let's make a basic straight line segment graph: import matplotlib.pyplot as plt # define the 1st point's coordinate (x=1, y=2) pt1 = [1, 2] # define the 2nd point's coordinate (x=3, y=8) pt2 = [3, 8] # draw a line from point1 to point2, also mark these 2 points plt.plot(pt1, pt2, marker='o') plt.show() Output: Plot a Histogram import matplotlib.pyplot as plt import numpy as np plt.style.use('_mpl-gallery') np.random.seed(1) # set random seed x = 4 + np.random.normal(0, 1.5, 200) # Create a random normal distribution # plot: fig, ax = plt.subplots() ax.hist(x, bins=8, linewidth=0.5, edgecolor=\"white\") # Create histogram ax.set(xlim=(0, 8), xticks=np.arange(1, 8), ylim=(0, 56), yticks=np.linspace(0, 56, 9)) # Set legend constraints plt.show() Output: Reference Matplotlib at matplotlib.org","title":"matplotlib"},{"location":"extralibs/matplotlib/#matplotlib","text":"Matplotlib is a library for creating various data visualizations in Python. You can render many different kinds of graphs and charts with a simple interface. This library works closely with NumPy to handle its datasets.","title":"Matplotlib"},{"location":"extralibs/matplotlib/#examples","text":"","title":"Examples"},{"location":"extralibs/matplotlib/#plot-a-simple-line","text":"Let's make a basic straight line segment graph: import matplotlib.pyplot as plt # define the 1st point's coordinate (x=1, y=2) pt1 = [1, 2] # define the 2nd point's coordinate (x=3, y=8) pt2 = [3, 8] # draw a line from point1 to point2, also mark these 2 points plt.plot(pt1, pt2, marker='o') plt.show() Output:","title":"Plot a Simple Line"},{"location":"extralibs/matplotlib/#plot-a-histogram","text":"import matplotlib.pyplot as plt import numpy as np plt.style.use('_mpl-gallery') np.random.seed(1) # set random seed x = 4 + np.random.normal(0, 1.5, 200) # Create a random normal distribution # plot: fig, ax = plt.subplots() ax.hist(x, bins=8, linewidth=0.5, edgecolor=\"white\") # Create histogram ax.set(xlim=(0, 8), xticks=np.arange(1, 8), ylim=(0, 56), yticks=np.linspace(0, 56, 9)) # Set legend constraints plt.show() Output:","title":"Plot a Histogram"},{"location":"extralibs/matplotlib/#reference","text":"Matplotlib at matplotlib.org","title":"Reference"},{"location":"extralibs/motor/","text":"Motor Motor is an asyncio driver for MongoDB databases in Python. Note This package assumes you already know how to create a Mongo database and connect to it with Python3 Editor. If you don't know how to do this, follow the \"Setting Up Your Database\" section of the PyMongo documentation. Warning When including private database credentials in your code, make sure you DO NOT make your project \"Open Source\" when you share it. Examples Using the asyncio Client Since motor is an async package, we need to perform database operations in async functions. Let's make a simple function that inserts 50 documents into a collection in our database: Make sure you replace the mongodb server url with the one from your cloud MongoDB import asyncio import motor.motor_asyncio client = motor.motor_asyncio.AsyncIOMotorClient(\"mongodb+srv://testuser:<password>@<your cluster>.mongodb.net/?retryWrites=true&w=majority\") db = client.test_database async def do_insert(): result = await db.test_collection.insert_many( [{'i': i} for i in range(50)] ) print(f'inserted {len(result.inserted_ids)} docs') loop = client.get_io_loop() loop.run_until_complete(do_insert()) We run it and will get the output: inserted 50 docs If we check out Mongo Atlas, we will see a list of all the documents we inserted to confirm the operation succeeded: Reference Motor at readthedocs.io","title":"motor"},{"location":"extralibs/motor/#motor","text":"Motor is an asyncio driver for MongoDB databases in Python. Note This package assumes you already know how to create a Mongo database and connect to it with Python3 Editor. If you don't know how to do this, follow the \"Setting Up Your Database\" section of the PyMongo documentation. Warning When including private database credentials in your code, make sure you DO NOT make your project \"Open Source\" when you share it.","title":"Motor"},{"location":"extralibs/motor/#examples","text":"","title":"Examples"},{"location":"extralibs/motor/#using-the-asyncio-client","text":"Since motor is an async package, we need to perform database operations in async functions. Let's make a simple function that inserts 50 documents into a collection in our database: Make sure you replace the mongodb server url with the one from your cloud MongoDB import asyncio import motor.motor_asyncio client = motor.motor_asyncio.AsyncIOMotorClient(\"mongodb+srv://testuser:<password>@<your cluster>.mongodb.net/?retryWrites=true&w=majority\") db = client.test_database async def do_insert(): result = await db.test_collection.insert_many( [{'i': i} for i in range(50)] ) print(f'inserted {len(result.inserted_ids)} docs') loop = client.get_io_loop() loop.run_until_complete(do_insert()) We run it and will get the output: inserted 50 docs If we check out Mongo Atlas, we will see a list of all the documents we inserted to confirm the operation succeeded:","title":"Using the asyncio Client"},{"location":"extralibs/motor/#reference","text":"Motor at readthedocs.io","title":"Reference"},{"location":"extralibs/nltk/","text":"nltk nltk, or Natural Language Toolkit , is a natural language processing library for Python. It allows you to take normal written sentences or passages and tokenize them. After a passage has been tokenized, you can further analyze it for data and even identify parts of speech for individual words. Examples Tokenizing a Sentence The most basic thing we can do is tokenize a sentence. This will take an input string and break it down into an array of identifiable words: import nltk # Depending on which functions you're using, nltk will require you to download # certain resources. The errors in the console will tell you which ones you # need nltk.download('punkt') sentence = ''' It's time to go to school! Grab your bag and get on the bus. ''' tokens = nltk.word_tokenize(sentence) print(tokens) Output: ['It', \"'s\", 'time', 'to', 'go', 'to', 'school', '!', 'Grab', 'your', 'bag', 'and', 'get', 'on', 'the', 'bus', '.'] Note that nltk may identify certain words we may not normally consider to be their own words like 's or punctuations. Tag Parts of Speech After we break our sentence down to a token array, we can use nltk to further analyze the sentence by marking parts of speech: import nltk # Depending on which functions you're using, nltk will require you # to download certain resources. The errors in the console will tell # you which ones you need nltk.download('punkt') nltk.download('averaged_perceptron_tagger') sentence = ''' It's time to go to school! Grab your bag and get on the bus. ''' tokens = nltk.word_tokenize(sentence) tagged = nltk.pos_tag(tokens) print(tagged) Each word in our array will now be a tuple of the original word, and the part of speech it represents: [('It', 'PRP'), (\"'s\", 'VBZ'), ('time', 'NN'), ('to', 'TO'), ('go', 'VB'), ('to', 'TO'), ('school', 'NN'), ('!', '.'), ('Grab', 'VB'), ('your', 'PRP$'), ('bag', 'NN'), ('and', 'CC'), ('get', 'VB'), ('on', 'IN'), ('the', 'DT'), ('bus', 'NN'), ('.', '.')] There are many supported parts of speech, but for this example the tags that appear in order are: PRP - Personal Pronoun VBZ - 3rd Person Singular Verb NN - Singular Noun TO - The word \"to\" VB - Verb . - Punctuation PRP$ - Posessive Pronoun CC - Conjunction IN - Preposition DT - Determiner You can find a complete list in nltk's documentation Identify Proper Nouns Note This example requires NumPy to be installed in your project. We can tokenize a sentence, then use nltk to extract named entities from the sentence: import nltk # Depending on which functions you're using, nltk will require you to download # certain resources. The errors in the console will tell you which ones you # need nltk.download('punkt') nltk.download('maxent_ne_chunker') nltk.download('averaged_perceptron_tagger') nltk.download('words') sentence = ''' Mr. Brown went to the store to buy a TV, but forgot his wallet at home. Christina came to give it to him. ''' tokens = nltk.word_tokenize(sentence) tagged = nltk.pos_tag(tokens) entities = nltk.chunk.ne_chunk(tagged) print(entities) Will give the following output, where we can see all parts of the sentence relating to named people has the PERSON label: (S (PERSON Mr./NNP) (PERSON Brown/NNP) went/VBD to/TO the/DT store/NN to/TO buy/VB a/DT TV/NN ,/, but/CC forgot/VBD his/PRP$ wallet/NN at/IN home/NN ./. (PERSON Christina/NNP) came/VBD to/TO give/VB it/PRP to/TO him/PRP ./.) Reference Natural Language Processing with Python , the full O'Reilly published book at nltk.org","title":"nltk"},{"location":"extralibs/nltk/#nltk","text":"nltk, or Natural Language Toolkit , is a natural language processing library for Python. It allows you to take normal written sentences or passages and tokenize them. After a passage has been tokenized, you can further analyze it for data and even identify parts of speech for individual words.","title":"nltk"},{"location":"extralibs/nltk/#examples","text":"","title":"Examples"},{"location":"extralibs/nltk/#tokenizing-a-sentence","text":"The most basic thing we can do is tokenize a sentence. This will take an input string and break it down into an array of identifiable words: import nltk # Depending on which functions you're using, nltk will require you to download # certain resources. The errors in the console will tell you which ones you # need nltk.download('punkt') sentence = ''' It's time to go to school! Grab your bag and get on the bus. ''' tokens = nltk.word_tokenize(sentence) print(tokens) Output: ['It', \"'s\", 'time', 'to', 'go', 'to', 'school', '!', 'Grab', 'your', 'bag', 'and', 'get', 'on', 'the', 'bus', '.'] Note that nltk may identify certain words we may not normally consider to be their own words like 's or punctuations.","title":"Tokenizing a Sentence"},{"location":"extralibs/nltk/#tag-parts-of-speech","text":"After we break our sentence down to a token array, we can use nltk to further analyze the sentence by marking parts of speech: import nltk # Depending on which functions you're using, nltk will require you # to download certain resources. The errors in the console will tell # you which ones you need nltk.download('punkt') nltk.download('averaged_perceptron_tagger') sentence = ''' It's time to go to school! Grab your bag and get on the bus. ''' tokens = nltk.word_tokenize(sentence) tagged = nltk.pos_tag(tokens) print(tagged) Each word in our array will now be a tuple of the original word, and the part of speech it represents: [('It', 'PRP'), (\"'s\", 'VBZ'), ('time', 'NN'), ('to', 'TO'), ('go', 'VB'), ('to', 'TO'), ('school', 'NN'), ('!', '.'), ('Grab', 'VB'), ('your', 'PRP$'), ('bag', 'NN'), ('and', 'CC'), ('get', 'VB'), ('on', 'IN'), ('the', 'DT'), ('bus', 'NN'), ('.', '.')] There are many supported parts of speech, but for this example the tags that appear in order are: PRP - Personal Pronoun VBZ - 3rd Person Singular Verb NN - Singular Noun TO - The word \"to\" VB - Verb . - Punctuation PRP$ - Posessive Pronoun CC - Conjunction IN - Preposition DT - Determiner You can find a complete list in nltk's documentation","title":"Tag Parts of Speech"},{"location":"extralibs/nltk/#identify-proper-nouns","text":"Note This example requires NumPy to be installed in your project. We can tokenize a sentence, then use nltk to extract named entities from the sentence: import nltk # Depending on which functions you're using, nltk will require you to download # certain resources. The errors in the console will tell you which ones you # need nltk.download('punkt') nltk.download('maxent_ne_chunker') nltk.download('averaged_perceptron_tagger') nltk.download('words') sentence = ''' Mr. Brown went to the store to buy a TV, but forgot his wallet at home. Christina came to give it to him. ''' tokens = nltk.word_tokenize(sentence) tagged = nltk.pos_tag(tokens) entities = nltk.chunk.ne_chunk(tagged) print(entities) Will give the following output, where we can see all parts of the sentence relating to named people has the PERSON label: (S (PERSON Mr./NNP) (PERSON Brown/NNP) went/VBD to/TO the/DT store/NN to/TO buy/VB a/DT TV/NN ,/, but/CC forgot/VBD his/PRP$ wallet/NN at/IN home/NN ./. (PERSON Christina/NNP) came/VBD to/TO give/VB it/PRP to/TO him/PRP ./.)","title":"Identify Proper Nouns"},{"location":"extralibs/nltk/#reference","text":"Natural Language Processing with Python , the full O'Reilly published book at nltk.org","title":"Reference"},{"location":"extralibs/numba/","text":"numba numba is a Just-In-Time compiler for Python array and numerical functions that gives you the power to speed up your applications with high performance functions written directly in Python [1] . Examples The following sample code is taken from the numba official documentation [2] . It first defines a go_fast function with using the tanh function of numpy , then simply adds a @jit decorator to speed up the code execution. from numba import jit import numpy as np x = np.arange(100).reshape(10, 10) @jit(nopython=True) def go_fast(a): trace = 0.0 for i in range(a.shape[0]): # Numba likes loops trace += np.tanh(a[i, i]) # Numba likes NumPy functions return a + trace # Numba likes NumPy broadcasting print(go_fast(x)) For more examples, please head to numba official documentation [2] . Reference [1]: https://numba.readthedocs.io/en/stable/user/overview.html [2]: https://numba.readthedocs.io/","title":"numba"},{"location":"extralibs/numba/#numba","text":"numba is a Just-In-Time compiler for Python array and numerical functions that gives you the power to speed up your applications with high performance functions written directly in Python [1] .","title":"numba"},{"location":"extralibs/numba/#examples","text":"The following sample code is taken from the numba official documentation [2] . It first defines a go_fast function with using the tanh function of numpy , then simply adds a @jit decorator to speed up the code execution. from numba import jit import numpy as np x = np.arange(100).reshape(10, 10) @jit(nopython=True) def go_fast(a): trace = 0.0 for i in range(a.shape[0]): # Numba likes loops trace += np.tanh(a[i, i]) # Numba likes NumPy functions return a + trace # Numba likes NumPy broadcasting print(go_fast(x)) For more examples, please head to numba official documentation [2] .","title":"Examples"},{"location":"extralibs/numba/#reference","text":"[1]: https://numba.readthedocs.io/en/stable/user/overview.html [2]: https://numba.readthedocs.io/","title":"Reference"},{"location":"extralibs/numpy/","text":"NumPy NumPy is a powerful number processing library, used by data scientists due to it being able to process large amounts of data much faster than native Python. This package works well with data visualization packages like Matplotlib . NumPy is used as the base of many other libraries like Pandas and SciPy and work together with them closely. It is very common for these libraries to take NumPy arrays in as arguments. Examples Create and Add Matrices The most basic function of NumPy is performing math with arrays and matricies: import numpy # Create a 4x4 matrix of ones ones_mat = numpy.ones((4, 4)) # Create a default numpy random number generator rg = numpy.random.default_rng(1) # Create a 4x4 matrix of random numbers random_mat = rg.random((4, 4)) # Add the two matrices together added_mat = numpy.add(ones_mat, random_mat) print(f'ones_mat:\\n{ones_mat}\\n') print(f'random_mat:\\n{random_mat}\\n') print(f'added_mat:\\n{added_mat}\\n') Output: ones_mat: [[1. 1. 1. 1.] [1. 1. 1. 1.] [1. 1. 1. 1.] [1. 1. 1. 1.]] random_mat: [[0.51182162 0.9504637 0.14415961 0.94864945] [0.31183145 0.42332645 0.82770259 0.40919914] [0.54959369 0.02755911 0.75351311 0.53814331] [0.32973172 0.7884287 0.30319483 0.45349789]] added_mat: [[1.51182162 1.9504637 1.14415961 1.94864945] [1.31183145 1.42332645 1.82770259 1.40919914] [1.54959369 1.02755911 1.75351311 1.53814331] [1.32973172 1.7884287 1.30319483 1.45349789]] Create a Sine Wave Graph with Matplotlib NumPy is also useful for creating data to pass to a rendering library for data visualization, like Matplotlib : import numpy as np import matplotlib.pyplot as plt # Get x and y coordinates of sine wave x = np.arange(0, 4*np.pi, 0.1) y = np.sin(x) # Make the graph plt.plot(x, y) plt.title('Sine') # Show the figure. plt.show() Output: Reference NumPy at numpy.org","title":"numpy"},{"location":"extralibs/numpy/#numpy","text":"NumPy is a powerful number processing library, used by data scientists due to it being able to process large amounts of data much faster than native Python. This package works well with data visualization packages like Matplotlib . NumPy is used as the base of many other libraries like Pandas and SciPy and work together with them closely. It is very common for these libraries to take NumPy arrays in as arguments.","title":"NumPy"},{"location":"extralibs/numpy/#examples","text":"","title":"Examples"},{"location":"extralibs/numpy/#create-and-add-matrices","text":"The most basic function of NumPy is performing math with arrays and matricies: import numpy # Create a 4x4 matrix of ones ones_mat = numpy.ones((4, 4)) # Create a default numpy random number generator rg = numpy.random.default_rng(1) # Create a 4x4 matrix of random numbers random_mat = rg.random((4, 4)) # Add the two matrices together added_mat = numpy.add(ones_mat, random_mat) print(f'ones_mat:\\n{ones_mat}\\n') print(f'random_mat:\\n{random_mat}\\n') print(f'added_mat:\\n{added_mat}\\n') Output: ones_mat: [[1. 1. 1. 1.] [1. 1. 1. 1.] [1. 1. 1. 1.] [1. 1. 1. 1.]] random_mat: [[0.51182162 0.9504637 0.14415961 0.94864945] [0.31183145 0.42332645 0.82770259 0.40919914] [0.54959369 0.02755911 0.75351311 0.53814331] [0.32973172 0.7884287 0.30319483 0.45349789]] added_mat: [[1.51182162 1.9504637 1.14415961 1.94864945] [1.31183145 1.42332645 1.82770259 1.40919914] [1.54959369 1.02755911 1.75351311 1.53814331] [1.32973172 1.7884287 1.30319483 1.45349789]]","title":"Create and Add Matrices"},{"location":"extralibs/numpy/#create-a-sine-wave-graph-with-matplotlib","text":"NumPy is also useful for creating data to pass to a rendering library for data visualization, like Matplotlib : import numpy as np import matplotlib.pyplot as plt # Get x and y coordinates of sine wave x = np.arange(0, 4*np.pi, 0.1) y = np.sin(x) # Make the graph plt.plot(x, y) plt.title('Sine') # Show the figure. plt.show() Output:","title":"Create a Sine Wave Graph with Matplotlib"},{"location":"extralibs/numpy/#reference","text":"NumPy at numpy.org","title":"Reference"},{"location":"extralibs/openai/","text":"OpenAI The OpenAI Python library provides convenient access to the OpenAI API from applications written in the Python language. It includes a pre-defined set of classes for API resources that initialize themselves dynamically from API responses which makes it compatible with a wide range of versions of the OpenAI API [1] . To use the openAI's API, you first need to have your openAI's API key. To do so, you could register your account in https://platform.openai.com/ , then go to your account API-key settings , click \"+ Create new secret key\" to generate an API key, then you copy the key and use it in the sample code below. For a step-by-step tutorial on how to obtain the API key, please click here . Warning When including private API keys in your code, make sure you DO NOT make your project \"Open Source\" when you share it. Examples Built AI to answer question import openai api_key = input(\"\ud83e\udd16 What's your openAI's API Key?\\n\") openai.api_key = api_key question = input(\"\ud83e\udd16 What's your question?\\n\") print(\"\ud83e\udd16 Please wait a second ...\") completion = openai.ChatCompletion.create( model=\"gpt-3.5-turbo\", messages=[ {\"role\": \"system\", \"content\": \"You are ChatGPT\"}, {\"role\": \"user\", \"content\": question}, ] ) answer = completion[\"choices\"][0][\"message\"][\"content\"] print(\"\ud83e\udd16\", answer) For more information on how to use the openAI library, see the official openAI documentation [2] . Reference https://pypi.org/project/openai/ openAI's official documentation","title":"openai"},{"location":"extralibs/openai/#openai","text":"The OpenAI Python library provides convenient access to the OpenAI API from applications written in the Python language. It includes a pre-defined set of classes for API resources that initialize themselves dynamically from API responses which makes it compatible with a wide range of versions of the OpenAI API [1] . To use the openAI's API, you first need to have your openAI's API key. To do so, you could register your account in https://platform.openai.com/ , then go to your account API-key settings , click \"+ Create new secret key\" to generate an API key, then you copy the key and use it in the sample code below. For a step-by-step tutorial on how to obtain the API key, please click here . Warning When including private API keys in your code, make sure you DO NOT make your project \"Open Source\" when you share it.","title":"OpenAI"},{"location":"extralibs/openai/#examples","text":"","title":"Examples"},{"location":"extralibs/openai/#built-ai-to-answer-question","text":"import openai api_key = input(\"\ud83e\udd16 What's your openAI's API Key?\\n\") openai.api_key = api_key question = input(\"\ud83e\udd16 What's your question?\\n\") print(\"\ud83e\udd16 Please wait a second ...\") completion = openai.ChatCompletion.create( model=\"gpt-3.5-turbo\", messages=[ {\"role\": \"system\", \"content\": \"You are ChatGPT\"}, {\"role\": \"user\", \"content\": question}, ] ) answer = completion[\"choices\"][0][\"message\"][\"content\"] print(\"\ud83e\udd16\", answer) For more information on how to use the openAI library, see the official openAI documentation [2] .","title":"Built AI to answer question"},{"location":"extralibs/openai/#reference","text":"https://pypi.org/project/openai/ openAI's official documentation","title":"Reference"},{"location":"extralibs/pandas/","text":"Pandas Pandas is a Python library focused on data science and analysis. Pandas is built on top of NumPy and focuses on working with tables of data called DataFrames . Examples Creating a DataFrame We can create a DataFrame in Pandas by simply passing it a dictionary of data: import random import pandas as pd def create_random_array(length, low_bound, high_bound): return [random.randint(low_bound, high_bound) for _ in range(length)] # Values of a DataFrame dictionary must all be of the same length data = { \"A\": create_random_array(5, 10, 20), \"B\": create_random_array(5, 10, 20), \"C\": create_random_array(5, 10, 20), \"D\": create_random_array(5, 10, 20) } dataframe = pd.DataFrame(data) print(dataframe) Output: A B C D 0 13 14 20 19 1 19 18 19 13 2 15 16 14 11 3 12 11 20 17 4 10 20 16 15 Filtering a DataFrame Let's take our previous example and add a filter function and pass it to applymap() : import random import pandas as pd def create_random_array(length, low_bound, high_bound): return [random.randint(low_bound, high_bound) for _ in range(length)] # Values of a DataFrame dictionary must all be of the same length data = { \"A\": create_random_array(5, 10, 20), \"B\": create_random_array(5, 10, 20), \"C\": create_random_array(5, 10, 20), \"D\": create_random_array(5, 10, 20) } dataframe = pd.DataFrame(data) # Let's create a filter function to pass to pandas. # This simple filter will just zero any element that is less than 15: def min_val_filter(item): if item < 15: return 0 return item filtered_frame = dataframe.applymap(min_val_filter) print(filtered_frame) Output: A B C D 0 0 17 0 16 1 0 20 0 0 2 0 0 18 0 3 0 0 16 0 4 0 20 17 16 Note that since our array is randomly populated each run, the results will be different each time. Reference Pandas at pandas.pydata.org","title":"pandas"},{"location":"extralibs/pandas/#pandas","text":"Pandas is a Python library focused on data science and analysis. Pandas is built on top of NumPy and focuses on working with tables of data called DataFrames .","title":"Pandas"},{"location":"extralibs/pandas/#examples","text":"","title":"Examples"},{"location":"extralibs/pandas/#creating-a-dataframe","text":"We can create a DataFrame in Pandas by simply passing it a dictionary of data: import random import pandas as pd def create_random_array(length, low_bound, high_bound): return [random.randint(low_bound, high_bound) for _ in range(length)] # Values of a DataFrame dictionary must all be of the same length data = { \"A\": create_random_array(5, 10, 20), \"B\": create_random_array(5, 10, 20), \"C\": create_random_array(5, 10, 20), \"D\": create_random_array(5, 10, 20) } dataframe = pd.DataFrame(data) print(dataframe) Output: A B C D 0 13 14 20 19 1 19 18 19 13 2 15 16 14 11 3 12 11 20 17 4 10 20 16 15","title":"Creating a DataFrame"},{"location":"extralibs/pandas/#filtering-a-dataframe","text":"Let's take our previous example and add a filter function and pass it to applymap() : import random import pandas as pd def create_random_array(length, low_bound, high_bound): return [random.randint(low_bound, high_bound) for _ in range(length)] # Values of a DataFrame dictionary must all be of the same length data = { \"A\": create_random_array(5, 10, 20), \"B\": create_random_array(5, 10, 20), \"C\": create_random_array(5, 10, 20), \"D\": create_random_array(5, 10, 20) } dataframe = pd.DataFrame(data) # Let's create a filter function to pass to pandas. # This simple filter will just zero any element that is less than 15: def min_val_filter(item): if item < 15: return 0 return item filtered_frame = dataframe.applymap(min_val_filter) print(filtered_frame) Output: A B C D 0 0 17 0 16 1 0 20 0 0 2 0 0 18 0 3 0 0 16 0 4 0 20 17 16 Note that since our array is randomly populated each run, the results will be different each time.","title":"Filtering a DataFrame"},{"location":"extralibs/pandas/#reference","text":"Pandas at pandas.pydata.org","title":"Reference"},{"location":"extralibs/pillow/","text":"Pillow Pillow is an image processing library for Python. It enables you to load pictures for viewing and editing, perform transformations, and apply filters to them. Examples Upload an Image to Your Project The first thing we need to do to use this package is have an image to work with. We're going to use an image of OYObot in the following examples, click here to download a copy. After it's downloaded, open up the Python3 Editor and select Upload File from the dropdown at the top of your project's file list: Find the picture you downloaded in your file browser, then confirm the upload was successful by finding the image in your project's file list: Get Image Info Pillow is able to read metadata from an image it opens, and provide phsyical properties like its dimensions and format: from PIL import Image img = Image.open('oyobot.png') # print out image info print(f'filename: {img.filename}') print(f'dimensions: {img.width}x{img.height}') print(f'format: {img.format}') Output: filename: oyobot.png dimensions: 1200x1200 format: PNG Render Image We can render the image by calling the show() method of the image: from PIL import Image img = Image.open('oyobot.png') img.show() You will get an ImageMagick window rendered to the right of your code that looks like this: You can use your mouse and keyboard to interact with this window. The second smaller window allows you to pan around the image by clicking and dragging since it will most likely be too big to fit on one screen. Apply a Filter to an Image We can also use Pillow to apply various filters and transforms to images. Here's a simple example where we apply a gaussian blur to our OYObot picture: from PIL import Image, ImageFilter img = Image.open('oyobot.png') img = img.filter(ImageFilter.GaussianBlur(20)) img.show() You will get an ImageMagick window rendered to the right of your code that looks like this: Save Image After Filtering If you want to apply your filters to an image and then save it afterwards, we can do that with the save() method: from PIL import Image, ImageFilter img = Image.open('oyobot.png') img = img.filter(ImageFilter.GaussianBlur(20)) # make sure this filename is different, otherwise you will overwrite your # original image! img.save('oyobot_blurred.png') You will see that the file will appear automatically to the left of your code in your projects file list: From here, you can simply click on the picture in your file list to open it and see a preview directly in your editor window: Reference Pillow at pillow.readthedocs.io","title":"pillow"},{"location":"extralibs/pillow/#pillow","text":"Pillow is an image processing library for Python. It enables you to load pictures for viewing and editing, perform transformations, and apply filters to them.","title":"Pillow"},{"location":"extralibs/pillow/#examples","text":"","title":"Examples"},{"location":"extralibs/pillow/#upload-an-image-to-your-project","text":"The first thing we need to do to use this package is have an image to work with. We're going to use an image of OYObot in the following examples, click here to download a copy. After it's downloaded, open up the Python3 Editor and select Upload File from the dropdown at the top of your project's file list: Find the picture you downloaded in your file browser, then confirm the upload was successful by finding the image in your project's file list:","title":"Upload an Image to Your Project"},{"location":"extralibs/pillow/#get-image-info","text":"Pillow is able to read metadata from an image it opens, and provide phsyical properties like its dimensions and format: from PIL import Image img = Image.open('oyobot.png') # print out image info print(f'filename: {img.filename}') print(f'dimensions: {img.width}x{img.height}') print(f'format: {img.format}') Output: filename: oyobot.png dimensions: 1200x1200 format: PNG","title":"Get Image Info"},{"location":"extralibs/pillow/#render-image","text":"We can render the image by calling the show() method of the image: from PIL import Image img = Image.open('oyobot.png') img.show() You will get an ImageMagick window rendered to the right of your code that looks like this: You can use your mouse and keyboard to interact with this window. The second smaller window allows you to pan around the image by clicking and dragging since it will most likely be too big to fit on one screen.","title":"Render Image"},{"location":"extralibs/pillow/#apply-a-filter-to-an-image","text":"We can also use Pillow to apply various filters and transforms to images. Here's a simple example where we apply a gaussian blur to our OYObot picture: from PIL import Image, ImageFilter img = Image.open('oyobot.png') img = img.filter(ImageFilter.GaussianBlur(20)) img.show() You will get an ImageMagick window rendered to the right of your code that looks like this:","title":"Apply a Filter to an Image"},{"location":"extralibs/pillow/#save-image-after-filtering","text":"If you want to apply your filters to an image and then save it afterwards, we can do that with the save() method: from PIL import Image, ImageFilter img = Image.open('oyobot.png') img = img.filter(ImageFilter.GaussianBlur(20)) # make sure this filename is different, otherwise you will overwrite your # original image! img.save('oyobot_blurred.png') You will see that the file will appear automatically to the left of your code in your projects file list: From here, you can simply click on the picture in your file list to open it and see a preview directly in your editor window:","title":"Save Image After Filtering"},{"location":"extralibs/pillow/#reference","text":"Pillow at pillow.readthedocs.io","title":"Reference"},{"location":"extralibs/plyvel/","text":"Plyvel Plyvel is a Python library that provides an interface to LevelDB. LevelDB is a simple datastore which exlusively maps byte strings to byte strings. This database is best used when you will always know the keys you will be accessing and don't need advanced database features like querying. Examples Create, Update, and Read Keys Using db.put to write to the same key multiple times will simply overwrite the value in the database, so create and update operations are done the exact same way: import plyvel db = plyvel.DB('exampledb', create_if_missing=True) db.put(b'example_key', b'example_value1') print(db.get(b'example_key')) db.put(b'example_key', b'example_value2') print(db.get(b'example_key')) Output: b'example_value1' b'example_value2' Note In our example, we used the argument create_if_missing=True . This will automatically create the database folder and put into your project's file list if it doesn't already exist. Since we used 'exampledb' in our code above, you can see it added in your project's file list to the left: Delete Keys You can also delete keys with the db.delete() method: import plyvel db = plyvel.DB('exampledb', create_if_missing=True) db.put(b'example_key', b'example_value') print(db.get(b'example_key')) db.delete(b'example_key') print(db.get(b'example_key')) Output: b'example_value' None Iterate Over All Keys When a new key is insterted into the database, it is stored (and later returned) in lexicographical order : import plyvel db = plyvel.DB('exampledb', create_if_missing=True) db.put(b'z', b'zval') db.put(b'A', b'Aval') db.put(b'2', b'2val') db.put(b'1', b'1val') db.put(b'a', b'aval') for key, value in db: print(key, value) Output from print: b'1' b'1val' b'2' b'2val' b'A' b'Aval' b'a' b'aval' b'z' b'zval' Reference Plyvel at plyvel.redthedocs.io","title":"plyvel"},{"location":"extralibs/plyvel/#plyvel","text":"Plyvel is a Python library that provides an interface to LevelDB. LevelDB is a simple datastore which exlusively maps byte strings to byte strings. This database is best used when you will always know the keys you will be accessing and don't need advanced database features like querying.","title":"Plyvel"},{"location":"extralibs/plyvel/#examples","text":"","title":"Examples"},{"location":"extralibs/plyvel/#create-update-and-read-keys","text":"Using db.put to write to the same key multiple times will simply overwrite the value in the database, so create and update operations are done the exact same way: import plyvel db = plyvel.DB('exampledb', create_if_missing=True) db.put(b'example_key', b'example_value1') print(db.get(b'example_key')) db.put(b'example_key', b'example_value2') print(db.get(b'example_key')) Output: b'example_value1' b'example_value2' Note In our example, we used the argument create_if_missing=True . This will automatically create the database folder and put into your project's file list if it doesn't already exist. Since we used 'exampledb' in our code above, you can see it added in your project's file list to the left:","title":"Create, Update, and Read Keys"},{"location":"extralibs/plyvel/#delete-keys","text":"You can also delete keys with the db.delete() method: import plyvel db = plyvel.DB('exampledb', create_if_missing=True) db.put(b'example_key', b'example_value') print(db.get(b'example_key')) db.delete(b'example_key') print(db.get(b'example_key')) Output: b'example_value' None","title":"Delete Keys"},{"location":"extralibs/plyvel/#iterate-over-all-keys","text":"When a new key is insterted into the database, it is stored (and later returned) in lexicographical order : import plyvel db = plyvel.DB('exampledb', create_if_missing=True) db.put(b'z', b'zval') db.put(b'A', b'Aval') db.put(b'2', b'2val') db.put(b'1', b'1val') db.put(b'a', b'aval') for key, value in db: print(key, value) Output from print: b'1' b'1val' b'2' b'2val' b'A' b'Aval' b'a' b'aval' b'z' b'zval'","title":"Iterate Over All Keys"},{"location":"extralibs/plyvel/#reference","text":"Plyvel at plyvel.redthedocs.io","title":"Reference"},{"location":"extralibs/pydub/","text":"Pydub Pydub is a Python library that allows you to edit audio files with a simple interface. Note Since this library uses sounds, you will need to upload your own music or music loop. For a quick sample, you can create an account on a website like SampleFocus and grab a royalty free sample. Examples Upload a Sound to Your Project The first thing we need to do to use this package is have a sound to work with. We're going to use a sound obtained from a sample library, click here and make an account to download a sample or you can upload a song you already have on your computer. After it's downloaded, open up the Python3 Editor and select Upload File from the dropdown at the top of your project's file list: Find the sound you want to upload in your file browser, then confirm the upload was successful by finding the sound in your project's file list: Get Sound Info Similar to images with Pillow , we can use Pydub to extract and print information about audio files: from pydub.utils import mediainfo import os info = mediainfo('riff-loop.wav') print('Filename:', info['filename']) print('Format:', info['format_name']) print('Sample Rate:', info['sample_rate']) print('File Size:', int(info['size']), \"bytes\") Output: Filename: riff-loop.wav Format: wav Sample Rate: 44100 File Size: 3146306 bytes Play a Sound Run the following code and your program will begin playing audio: Note make sure your file format matches the file you uploaded. If you uploaded an mp3, make sure you change the format to \"mp3\" from pydub import AudioSegment from pydub.playback import play sound = AudioSegment.from_file('riff-loop.wav', format='wav') play(sound) Your output should look similar to this: nan : 0.000 fd= 0 aq= 0KB vq= 0KB Input #0, wav, from '/tmp/tmpxyn846ga.wav': Duration: 00:00:17.84, bitrate: 1411 kb/s Stream #0:0: Audio: pcm_s16le ([1][0][0][0] / 0x0001), 44100 Hz, 2 channels, s16, 1411 kb/s 0.02 M-A: 0.000 fd= 0 aq= 176KB vq= 0KB 0.05 M-A: 0.000 fd= 0 aq= 176KB vq= 0KB 0.08 M-A: 0.000 fd= 0 aq= 176KB vq= 0KB 0.11 M-A: 0.000 fd= 0 aq= 176KB vq= 0KB 0.14 M-A: 0.000 fd= 0 aq= 176KB vq= 0KB ... This is the raw text output of processing the audio stream. To actually hear the audio, you must click on the speaker icon on the top right of your running project: You know if audio was successfully enabled if the speaker icon changes and turns green: Modify a Sound Every time you modify a sound, it creates a new AudioSegment . Let's try a basic edit where we reverse our sound: from pydub import AudioSegment from pydub.playback import play sound = AudioSegment.from_file('riff-loop.wav', format='wav') reversed_sound = sound.reverse() # need to store edit in new variable play(reversed_sound) The output will be similar to the previous example, except now the audio file will be playing in reverse. Reference Pydub at pydub.com Pydub API Reference at github.com","title":"pydub"},{"location":"extralibs/pydub/#pydub","text":"Pydub is a Python library that allows you to edit audio files with a simple interface. Note Since this library uses sounds, you will need to upload your own music or music loop. For a quick sample, you can create an account on a website like SampleFocus and grab a royalty free sample.","title":"Pydub"},{"location":"extralibs/pydub/#examples","text":"","title":"Examples"},{"location":"extralibs/pydub/#upload-a-sound-to-your-project","text":"The first thing we need to do to use this package is have a sound to work with. We're going to use a sound obtained from a sample library, click here and make an account to download a sample or you can upload a song you already have on your computer. After it's downloaded, open up the Python3 Editor and select Upload File from the dropdown at the top of your project's file list: Find the sound you want to upload in your file browser, then confirm the upload was successful by finding the sound in your project's file list:","title":"Upload a Sound to Your Project"},{"location":"extralibs/pydub/#get-sound-info","text":"Similar to images with Pillow , we can use Pydub to extract and print information about audio files: from pydub.utils import mediainfo import os info = mediainfo('riff-loop.wav') print('Filename:', info['filename']) print('Format:', info['format_name']) print('Sample Rate:', info['sample_rate']) print('File Size:', int(info['size']), \"bytes\") Output: Filename: riff-loop.wav Format: wav Sample Rate: 44100 File Size: 3146306 bytes","title":"Get Sound Info"},{"location":"extralibs/pydub/#play-a-sound","text":"Run the following code and your program will begin playing audio: Note make sure your file format matches the file you uploaded. If you uploaded an mp3, make sure you change the format to \"mp3\" from pydub import AudioSegment from pydub.playback import play sound = AudioSegment.from_file('riff-loop.wav', format='wav') play(sound) Your output should look similar to this: nan : 0.000 fd= 0 aq= 0KB vq= 0KB Input #0, wav, from '/tmp/tmpxyn846ga.wav': Duration: 00:00:17.84, bitrate: 1411 kb/s Stream #0:0: Audio: pcm_s16le ([1][0][0][0] / 0x0001), 44100 Hz, 2 channels, s16, 1411 kb/s 0.02 M-A: 0.000 fd= 0 aq= 176KB vq= 0KB 0.05 M-A: 0.000 fd= 0 aq= 176KB vq= 0KB 0.08 M-A: 0.000 fd= 0 aq= 176KB vq= 0KB 0.11 M-A: 0.000 fd= 0 aq= 176KB vq= 0KB 0.14 M-A: 0.000 fd= 0 aq= 176KB vq= 0KB ... This is the raw text output of processing the audio stream. To actually hear the audio, you must click on the speaker icon on the top right of your running project: You know if audio was successfully enabled if the speaker icon changes and turns green:","title":"Play a Sound"},{"location":"extralibs/pydub/#modify-a-sound","text":"Every time you modify a sound, it creates a new AudioSegment . Let's try a basic edit where we reverse our sound: from pydub import AudioSegment from pydub.playback import play sound = AudioSegment.from_file('riff-loop.wav', format='wav') reversed_sound = sound.reverse() # need to store edit in new variable play(reversed_sound) The output will be similar to the previous example, except now the audio file will be playing in reverse.","title":"Modify a Sound"},{"location":"extralibs/pydub/#reference","text":"Pydub at pydub.com Pydub API Reference at github.com","title":"Reference"},{"location":"extralibs/pygame/","text":"Pygame Pygame is a collection of Python modules for creating video games. It provides access to keyboard and mouse inputs, rendering images, playing sounds, and more. The main draw of Pygame, especially for learners, is the ease of use without the need to install bulky full featured or enterprise level game engines like Unreal or Unity. Examples Run Built-in Aliens Demo Game Pygame has several built in demos that we can try running simply by importing them from the library's builtin examples package. Let's try running the aliens demo: import pygame.examples.aliens pygame.examples.aliens.main() You will get a game window open to the right of your code, you can use the left and right arrow keys to move, and space to shoot: You can try out the other example projects too. You can find a list of them at the official Pygame Examples Reference Note Some Pygame demos require PyOpenGL installed to work properly. If you get an error running one of the Pygame examples because PyOpenGL is missing from your project, you can install it from the libraries tab. Keyboard Controls Creating your own game requires we do a bit more than calling a single function. In the following example, we will create a simple game where you can move a small red ball around the screen with the arrow keys. Included are comments that explain what each section of the code is doing: import sys import pygame # You must call pygame.init() before anything else pygame.init() # Many Pygame methods take tuples as arguments, so we will save the desired # screen width and height (in pixels) into a tuple named \"size\" to make our # code more readable width, height = 640, 480 size = (width, height) # The screen variable is how we will render graphics to the screen screen = pygame.display.set_mode(size) # Colors are in tuples of (RED, GREEN, BLUE) black = (0, 0, 0) red = (255, 0, 0) # Start the circle in the middle of the screen circle_x = width//2 circle_y = height//2 radius = 10 # We will use an infinite \"while True\" loop to only force exit our game once # the pygame.QUIT event is fired (like pressing the escape key) while True: # Check pygame events every frame to process player's inputs for event in pygame.event.get(): if event.type == pygame.QUIT: sys.exit() elif event.type == pygame.KEYDOWN: if event.key == pygame.K_LEFT: circle_x -= 10 elif event.key == pygame.K_RIGHT: circle_x += 10 elif event.key == pygame.K_UP: circle_y -= 10 elif event.key == pygame.K_DOWN: circle_y += 10 # Cover the previous frame with a plain black background screen.fill(black) # Draw the circle at its current X and Y position pygame.draw.circle(screen, red, (circle_x, circle_y), radius) # the display.flip() function takes all the changes we made to the screen # and actually displays the changes to the player pygame.display.flip() You will get a game window open to the right of your code, you can use the arrow keys to move the ball up, down, left, and right: References Pygame at pygame.org In particular, the Newbie Guide section is a good thing to read if you've never used Pygame before, and has some good tips for game development in general","title":"pygame"},{"location":"extralibs/pygame/#pygame","text":"Pygame is a collection of Python modules for creating video games. It provides access to keyboard and mouse inputs, rendering images, playing sounds, and more. The main draw of Pygame, especially for learners, is the ease of use without the need to install bulky full featured or enterprise level game engines like Unreal or Unity.","title":"Pygame"},{"location":"extralibs/pygame/#examples","text":"","title":"Examples"},{"location":"extralibs/pygame/#run-built-in-aliens-demo-game","text":"Pygame has several built in demos that we can try running simply by importing them from the library's builtin examples package. Let's try running the aliens demo: import pygame.examples.aliens pygame.examples.aliens.main() You will get a game window open to the right of your code, you can use the left and right arrow keys to move, and space to shoot: You can try out the other example projects too. You can find a list of them at the official Pygame Examples Reference Note Some Pygame demos require PyOpenGL installed to work properly. If you get an error running one of the Pygame examples because PyOpenGL is missing from your project, you can install it from the libraries tab.","title":"Run Built-in Aliens Demo Game"},{"location":"extralibs/pygame/#keyboard-controls","text":"Creating your own game requires we do a bit more than calling a single function. In the following example, we will create a simple game where you can move a small red ball around the screen with the arrow keys. Included are comments that explain what each section of the code is doing: import sys import pygame # You must call pygame.init() before anything else pygame.init() # Many Pygame methods take tuples as arguments, so we will save the desired # screen width and height (in pixels) into a tuple named \"size\" to make our # code more readable width, height = 640, 480 size = (width, height) # The screen variable is how we will render graphics to the screen screen = pygame.display.set_mode(size) # Colors are in tuples of (RED, GREEN, BLUE) black = (0, 0, 0) red = (255, 0, 0) # Start the circle in the middle of the screen circle_x = width//2 circle_y = height//2 radius = 10 # We will use an infinite \"while True\" loop to only force exit our game once # the pygame.QUIT event is fired (like pressing the escape key) while True: # Check pygame events every frame to process player's inputs for event in pygame.event.get(): if event.type == pygame.QUIT: sys.exit() elif event.type == pygame.KEYDOWN: if event.key == pygame.K_LEFT: circle_x -= 10 elif event.key == pygame.K_RIGHT: circle_x += 10 elif event.key == pygame.K_UP: circle_y -= 10 elif event.key == pygame.K_DOWN: circle_y += 10 # Cover the previous frame with a plain black background screen.fill(black) # Draw the circle at its current X and Y position pygame.draw.circle(screen, red, (circle_x, circle_y), radius) # the display.flip() function takes all the changes we made to the screen # and actually displays the changes to the player pygame.display.flip() You will get a game window open to the right of your code, you can use the arrow keys to move the ball up, down, left, and right:","title":"Keyboard Controls"},{"location":"extralibs/pygame/#references","text":"Pygame at pygame.org In particular, the Newbie Guide section is a good thing to read if you've never used Pygame before, and has some good tips for game development in general","title":"References"},{"location":"extralibs/pymongo/","text":"PyMongo PyMongo is a Python library that provides an interface for using MongoDB. MongoDB is a NoSQL database, which means it does not use Structured Query Language like SQLite . MongoDB is useful for an easy to understand database interface without the rigidity a traditional relational SQL database may have. Note Python3 Editor does not provide access to a locally running Mongo database. You can, however, connect to a Mongo cloud database using the Python3 Editor. Mongo provides a free tier for their cloud database service and you can get one by making an account with them. We have written a short guide on how to properly set up a Mongo cloud instance to work with Python3 Editor. You can check it out here: MongoDB Free Cloud Database Warning When including private database credentials in your code, make sure you DO NOT make your project \"Open Source\" when you share it. Connecting to Your Database Before we can write or read anything to our new cloud database, we need to actually have our code connect to it. Mongo provides a pre-built connection URL that you can copy and paste into your code. To find this URL, do the following: 1. Find your cloud cluster, and click the Connect button: 2. Click on Connect your application in the window that pops up: 3. Select Python and 3.11 or later in the dropdowns, and follow the directions about replacing <password> in the provided URL with the password you chose when setting up your cluster's user account: After you do all that, you can finally paste the code provided into Python3 Editor and test your connection with the database: Note For this example and all the following examples, they will provide dummy database URLs that you must replace with the one provided by your Mongo cloud instance. import pymongo client = pymongo.MongoClient(\"mongodb+srv://testuser:<password>@<your cluster>.mongodb.net/?retryWrites=true&w=majority\") # this will fail if the provided URL or database has a problem client.server_info() print(\"Database connected successfully\") If you have done everything correctly, then congratulations! You have successfully created and connected to a MongoDB cloud instance properly configured to work with the Python3 Editor. Examples Create a New Document Now that we have a database up and running, it's time to actually use it! Let's begin by inserting a document into our database: import datetime import pymongo client = pymongo.MongoClient(\"mongodb+srv://testuser:<password>@<your cluster>.mongodb.net/?retryWrites=true&w=majority\") # Use a database we named \"health\". If the desired database doesn't exist, it # will automatically be created for us. health_db = client.health # In the \"health database\", use a collection named \"food\". This will also be # created for us if it doesn't exist food_collection = health_db.food new_food = { \"name\": \"pizza\", \"serving_size\": \"1/8 pie\", \"healthy\": False, \"add_time\": datetime.datetime.utcnow() } food_id = food_collection.insert_one(new_food).inserted_id print(food_id) Output: 640760df51dae8bf5b6f9282 Every document inserted is automatically given an _id field even if we don't give it one. We can see the full document if we look at our database in Mongo Atlas: Read an Existing Document Once we have a piece of data in our database, we can read from it by making queries: import pprint import pymongo client = pymongo.MongoClient(\"mongodb+srv://testuser:<password>@<your cluster>.mongodb.net/?retryWrites=true&w=majority\") health_db = client.health food_collection = health_db.food query_cond = { \"name\": \"pizza\" } food_item = food_collection.find_one(query_cond) pprint.pprint(food_item) Output: {'_id': ObjectId('640760df51dae8bf5b6f9282'), 'add_time': datetime.datetime(2023, 3, 7, 16, 5, 51, 883000), 'healthy': False, 'name': 'pizza', 'serving_size': '1/8 pie'} Update an Existing Document We can change a document already in our database with an update query. Let's update our pizza entry to increase the serving size, and add an update_time field: import datetime import pymongo client = pymongo.MongoClient(\"mongodb+srv://testuser:<password>@<yourcluster>.mongodb.net/?retryWrites=true&w=majority\") health_db = client.health food_collection = health_db.food query_cond = { \"name\": \"pizza\" } update_data = { \"$set\": { \"serving_size\": \"1/6 pie\", \"update_time\": datetime.datetime.utcnow() } } food_item = food_collection.update_one(query_cond, update_data) Delete a Document Finally, let's get rid of the pizza document altogether. We can do this with a delete query: import pymongo client = pymongo.MongoClient(\"mongodb+srv://testuser:<password>@<yourcluster>.mongodb.net/?retryWrites=true&w=majority\") health_db = client.health food_collection = health_db.food delete_cond = { \"name\": \"pizza\" } food_item = food_collection.delete_one(delete_cond) If we check our database now, we can see that this collection is now fully empty since we deleted the only document from it. Reference PyMongo at readthedocs.io MongoDB User Manual at mongodb.com","title":"pymongo"},{"location":"extralibs/pymongo/#pymongo","text":"PyMongo is a Python library that provides an interface for using MongoDB. MongoDB is a NoSQL database, which means it does not use Structured Query Language like SQLite . MongoDB is useful for an easy to understand database interface without the rigidity a traditional relational SQL database may have. Note Python3 Editor does not provide access to a locally running Mongo database. You can, however, connect to a Mongo cloud database using the Python3 Editor. Mongo provides a free tier for their cloud database service and you can get one by making an account with them. We have written a short guide on how to properly set up a Mongo cloud instance to work with Python3 Editor. You can check it out here: MongoDB Free Cloud Database Warning When including private database credentials in your code, make sure you DO NOT make your project \"Open Source\" when you share it.","title":"PyMongo"},{"location":"extralibs/pymongo/#connecting-to-your-database","text":"Before we can write or read anything to our new cloud database, we need to actually have our code connect to it. Mongo provides a pre-built connection URL that you can copy and paste into your code. To find this URL, do the following: 1. Find your cloud cluster, and click the Connect button: 2. Click on Connect your application in the window that pops up: 3. Select Python and 3.11 or later in the dropdowns, and follow the directions about replacing <password> in the provided URL with the password you chose when setting up your cluster's user account: After you do all that, you can finally paste the code provided into Python3 Editor and test your connection with the database: Note For this example and all the following examples, they will provide dummy database URLs that you must replace with the one provided by your Mongo cloud instance. import pymongo client = pymongo.MongoClient(\"mongodb+srv://testuser:<password>@<your cluster>.mongodb.net/?retryWrites=true&w=majority\") # this will fail if the provided URL or database has a problem client.server_info() print(\"Database connected successfully\") If you have done everything correctly, then congratulations! You have successfully created and connected to a MongoDB cloud instance properly configured to work with the Python3 Editor.","title":"Connecting to Your Database"},{"location":"extralibs/pymongo/#examples","text":"","title":"Examples"},{"location":"extralibs/pymongo/#create-a-new-document","text":"Now that we have a database up and running, it's time to actually use it! Let's begin by inserting a document into our database: import datetime import pymongo client = pymongo.MongoClient(\"mongodb+srv://testuser:<password>@<your cluster>.mongodb.net/?retryWrites=true&w=majority\") # Use a database we named \"health\". If the desired database doesn't exist, it # will automatically be created for us. health_db = client.health # In the \"health database\", use a collection named \"food\". This will also be # created for us if it doesn't exist food_collection = health_db.food new_food = { \"name\": \"pizza\", \"serving_size\": \"1/8 pie\", \"healthy\": False, \"add_time\": datetime.datetime.utcnow() } food_id = food_collection.insert_one(new_food).inserted_id print(food_id) Output: 640760df51dae8bf5b6f9282 Every document inserted is automatically given an _id field even if we don't give it one. We can see the full document if we look at our database in Mongo Atlas:","title":"Create a New Document"},{"location":"extralibs/pymongo/#read-an-existing-document","text":"Once we have a piece of data in our database, we can read from it by making queries: import pprint import pymongo client = pymongo.MongoClient(\"mongodb+srv://testuser:<password>@<your cluster>.mongodb.net/?retryWrites=true&w=majority\") health_db = client.health food_collection = health_db.food query_cond = { \"name\": \"pizza\" } food_item = food_collection.find_one(query_cond) pprint.pprint(food_item) Output: {'_id': ObjectId('640760df51dae8bf5b6f9282'), 'add_time': datetime.datetime(2023, 3, 7, 16, 5, 51, 883000), 'healthy': False, 'name': 'pizza', 'serving_size': '1/8 pie'}","title":"Read an Existing Document"},{"location":"extralibs/pymongo/#update-an-existing-document","text":"We can change a document already in our database with an update query. Let's update our pizza entry to increase the serving size, and add an update_time field: import datetime import pymongo client = pymongo.MongoClient(\"mongodb+srv://testuser:<password>@<yourcluster>.mongodb.net/?retryWrites=true&w=majority\") health_db = client.health food_collection = health_db.food query_cond = { \"name\": \"pizza\" } update_data = { \"$set\": { \"serving_size\": \"1/6 pie\", \"update_time\": datetime.datetime.utcnow() } } food_item = food_collection.update_one(query_cond, update_data)","title":"Update an Existing Document"},{"location":"extralibs/pymongo/#delete-a-document","text":"Finally, let's get rid of the pizza document altogether. We can do this with a delete query: import pymongo client = pymongo.MongoClient(\"mongodb+srv://testuser:<password>@<yourcluster>.mongodb.net/?retryWrites=true&w=majority\") health_db = client.health food_collection = health_db.food delete_cond = { \"name\": \"pizza\" } food_item = food_collection.delete_one(delete_cond) If we check our database now, we can see that this collection is now fully empty since we deleted the only document from it.","title":"Delete a Document"},{"location":"extralibs/pymongo/#reference","text":"PyMongo at readthedocs.io MongoDB User Manual at mongodb.com","title":"Reference"},{"location":"extralibs/pysimplegui/","text":"PySimpleGUI PySimpleGUI is a meta-library, as in it combines several other GUI libraries into one single package with a common programming interface. This increases your options and gives you less things to think about when building a GUI with Python. Examples Rendering Text First thing we will do is simply get a window with text rendered on it. All PythonSimpleGUI projects will have similar structures where we will define elements, put them in a layout list, then render them to a window: import PySimpleGUI as pg # Create a text layout element hello_world_text_element = pg.Text( text='I Rendered Text!', # What the text will say font=('Arial Bold', 20), # Which font and size to use text_color='orange', # Color for the text justification='center' # Center the text element ) # Create a layout of one row, with one element layout = [[hello_world_text_element]] # Create a window to render the layout on window = pg.Window('HelloWorld', layout) # Keep the window open forever until we close it manually while True: # Read if there's any event every loop event, values = window.read() if event in (None, 'Exit'): break window.close() To the right of your code, you will see a window that looks like this, which will remain open until you click the \" x \" on the window: Understanding the Layout List The layout that we need to give to the window is a list of lists . We can create lists to describe how we want our elements rendered in the window, like this: layout = [ [elem1, elem2, elem3], [elem4], [elem5, elem6] ] This would create a window with three rows. The first row would contain elems 1, 2, and 3. The second would contain only elem 4, and the final row would contain elems 5 and 6. Let's create another simple demo to see this in action: import PySimpleGUI as pg # Create several buttons btns = [] btn_font = ('Arial Black', 16) for i in range(6): btns.append(pg.Button(f'btn{i}', font=btn_font)) # Create the layout like above, a list of three lists layout = [ [btns[0], btns[1], btns[2]], [btns[3]], [btns[4], btns[5]] ] window = pg.Window('Button Layout Demo', layout) while True: event, values = window.read() if event in (None, 'Exit'): break window.close() Then we can see the window rendered to the right like we expect: Handling Button Events Buttons wouldn't be much use if we can't detect when and which button was clicked. The following example creates two buttons and prints a different message when each one is clicked: import PySimpleGUI as pg # Create a layout of two buttons font = ('Arial Black', 16) layout = [ [pg.Button('Left Button', font=font), pg.Button('Right Button', font=font)] ] window = pg.Window('Button Events Demo', layout) while True: event, values = window.read() # We will check for the button event here. # The event will be the same as the button's text if event in (None, 'Exit'): break elif event == 'Left Button': print('Left button clicked!') elif event == 'Right Button': print('Right button clicked!') window.close() Rendered on the right: Then each time when we click each button, we will see our print message appear in the console below the running project: Left button clicked! Left button clicked! Right button clicked! Left button clicked! Customizing Events By default, the event that is fired by the button is the same as its text. If you wanted this to be different, you can pass a string to your button as the keyword argument key like this: pg.Button('very long button text that would be too long to repeat', key='short') Now, the event fired by this button will now be 'short' instead of the button's text. Reference PySimpleGUI on pysimplegui.org The PySimpleGUI Cookbook Section has good tips on patterns of designing several common GUI situations and how to handle them with example code","title":"pysimplegui"},{"location":"extralibs/pysimplegui/#pysimplegui","text":"PySimpleGUI is a meta-library, as in it combines several other GUI libraries into one single package with a common programming interface. This increases your options and gives you less things to think about when building a GUI with Python.","title":"PySimpleGUI"},{"location":"extralibs/pysimplegui/#examples","text":"","title":"Examples"},{"location":"extralibs/pysimplegui/#rendering-text","text":"First thing we will do is simply get a window with text rendered on it. All PythonSimpleGUI projects will have similar structures where we will define elements, put them in a layout list, then render them to a window: import PySimpleGUI as pg # Create a text layout element hello_world_text_element = pg.Text( text='I Rendered Text!', # What the text will say font=('Arial Bold', 20), # Which font and size to use text_color='orange', # Color for the text justification='center' # Center the text element ) # Create a layout of one row, with one element layout = [[hello_world_text_element]] # Create a window to render the layout on window = pg.Window('HelloWorld', layout) # Keep the window open forever until we close it manually while True: # Read if there's any event every loop event, values = window.read() if event in (None, 'Exit'): break window.close() To the right of your code, you will see a window that looks like this, which will remain open until you click the \" x \" on the window:","title":"Rendering Text"},{"location":"extralibs/pysimplegui/#understanding-the-layout-list","text":"The layout that we need to give to the window is a list of lists . We can create lists to describe how we want our elements rendered in the window, like this: layout = [ [elem1, elem2, elem3], [elem4], [elem5, elem6] ] This would create a window with three rows. The first row would contain elems 1, 2, and 3. The second would contain only elem 4, and the final row would contain elems 5 and 6. Let's create another simple demo to see this in action: import PySimpleGUI as pg # Create several buttons btns = [] btn_font = ('Arial Black', 16) for i in range(6): btns.append(pg.Button(f'btn{i}', font=btn_font)) # Create the layout like above, a list of three lists layout = [ [btns[0], btns[1], btns[2]], [btns[3]], [btns[4], btns[5]] ] window = pg.Window('Button Layout Demo', layout) while True: event, values = window.read() if event in (None, 'Exit'): break window.close() Then we can see the window rendered to the right like we expect:","title":"Understanding the Layout List"},{"location":"extralibs/pysimplegui/#handling-button-events","text":"Buttons wouldn't be much use if we can't detect when and which button was clicked. The following example creates two buttons and prints a different message when each one is clicked: import PySimpleGUI as pg # Create a layout of two buttons font = ('Arial Black', 16) layout = [ [pg.Button('Left Button', font=font), pg.Button('Right Button', font=font)] ] window = pg.Window('Button Events Demo', layout) while True: event, values = window.read() # We will check for the button event here. # The event will be the same as the button's text if event in (None, 'Exit'): break elif event == 'Left Button': print('Left button clicked!') elif event == 'Right Button': print('Right button clicked!') window.close() Rendered on the right: Then each time when we click each button, we will see our print message appear in the console below the running project: Left button clicked! Left button clicked! Right button clicked! Left button clicked!","title":"Handling Button Events"},{"location":"extralibs/pysimplegui/#customizing-events","text":"By default, the event that is fired by the button is the same as its text. If you wanted this to be different, you can pass a string to your button as the keyword argument key like this: pg.Button('very long button text that would be too long to repeat', key='short') Now, the event fired by this button will now be 'short' instead of the button's text.","title":"Customizing Events"},{"location":"extralibs/pysimplegui/#reference","text":"PySimpleGUI on pysimplegui.org The PySimpleGUI Cookbook Section has good tips on patterns of designing several common GUI situations and how to handle them with example code","title":"Reference"},{"location":"extralibs/python-multipart/","text":"Python-Multipart Python-Multipart is a library for handling multipart/form-data POST requests. This is usually only needed or used when running a web server and you have a place where users can upload files. Note This library is needed for handling POST requests with Starlette . Example Handling a Multipart Request Below is an example of how to handle a basic multipart request using the Bottle library for our server: from bottle import request, get, post, run import multipart @get('/') def index_get(): return 'hi' @post('/') def index_post(): field_to_values = {} filenames = [] ret = { 'field_to_values': field_to_values, 'filenames': filenames } def on_field(field): field_to_values[field.field_name.decode()] = field.value.decode() def on_file(file): filenames.append(file.field_name.decode()) # Python-Multipart doesn't assume we are using WSGI, so we need to # manually create a header dictionary to pass to it. environ = request.environ headers = {'Content-Type': environ['CONTENT_TYPE']} if 'HTTP_X_FILE_NAME' in environ: headers['X-File-Name'] = environ['HTTP_X_FILE_NAME'] if 'CONTENT_LENGTH' in environ: headers['Content-Length'] = environ['CONTENT_LENGTH'] # Parse the form multipart.parse_form(headers, environ['wsgi.input'], on_field, on_file) return ret # host must be 0.0.0.0 to work in the Python3 Editor run(host='0.0.0.0', port=8000) Then we need to take the URL generated in our running app to the right of our code and use it to make a POST request to our server. Note When you run your program, you will get a random URL in the form of: https://(random).app.oyoprofile.com Make sure you copy the whole URL for the next part of this example. Then we can open a command line tool ( cmd in Windows or Terminal in macOS) and write the following: curl -X POST -d \"key1=val1&key2=val2\" https://(YOUR URL HERE)/ Our server will return the following and it will be printed in your terminal: {\"field_to_values\": {\"key1\": \"val1\", \"key2\": \"val2\"}, \"filenames\": []} Reference Python Multipart at github.io","title":"python-multipart"},{"location":"extralibs/python-multipart/#python-multipart","text":"Python-Multipart is a library for handling multipart/form-data POST requests. This is usually only needed or used when running a web server and you have a place where users can upload files. Note This library is needed for handling POST requests with Starlette .","title":"Python-Multipart"},{"location":"extralibs/python-multipart/#example","text":"","title":"Example"},{"location":"extralibs/python-multipart/#handling-a-multipart-request","text":"Below is an example of how to handle a basic multipart request using the Bottle library for our server: from bottle import request, get, post, run import multipart @get('/') def index_get(): return 'hi' @post('/') def index_post(): field_to_values = {} filenames = [] ret = { 'field_to_values': field_to_values, 'filenames': filenames } def on_field(field): field_to_values[field.field_name.decode()] = field.value.decode() def on_file(file): filenames.append(file.field_name.decode()) # Python-Multipart doesn't assume we are using WSGI, so we need to # manually create a header dictionary to pass to it. environ = request.environ headers = {'Content-Type': environ['CONTENT_TYPE']} if 'HTTP_X_FILE_NAME' in environ: headers['X-File-Name'] = environ['HTTP_X_FILE_NAME'] if 'CONTENT_LENGTH' in environ: headers['Content-Length'] = environ['CONTENT_LENGTH'] # Parse the form multipart.parse_form(headers, environ['wsgi.input'], on_field, on_file) return ret # host must be 0.0.0.0 to work in the Python3 Editor run(host='0.0.0.0', port=8000) Then we need to take the URL generated in our running app to the right of our code and use it to make a POST request to our server. Note When you run your program, you will get a random URL in the form of: https://(random).app.oyoprofile.com Make sure you copy the whole URL for the next part of this example. Then we can open a command line tool ( cmd in Windows or Terminal in macOS) and write the following: curl -X POST -d \"key1=val1&key2=val2\" https://(YOUR URL HERE)/ Our server will return the following and it will be printed in your terminal: {\"field_to_values\": {\"key1\": \"val1\", \"key2\": \"val2\"}, \"filenames\": []}","title":"Handling a Multipart Request"},{"location":"extralibs/python-multipart/#reference","text":"Python Multipart at github.io","title":"Reference"},{"location":"extralibs/pyxel/","text":"Pyxel Pyxel is a retro game engine made for Python. There are some intentional limitations to the game engine, such as only being allowed to display 16 colors on the screen at any given time and only 4 sounds can be playing simultaneously. These limitations are meant to help games made in it stay true to the retro-gaming era the library is aiming at recreating, and it can also be a good exercise in keeping your projects small and focused. Examples Drawing an Object on the Screen Let's draw a basic square on the screen and make it constantly move to the right: import pyxel class App: def __init__(self): # Initialize the screen self.screen_width = 640 self.screen_height = 480 pyxel.init(self.screen_width, self.screen_height) # Initialize some variables for our box self.width = 50 self.height = 50 self.x = 0 self.y = self.screen_height//2 - self.height//2 self.x_speed = 10 # Tell pyxel to run with our update and draw functions pyxel.run(self.update, self.draw) def update(self): self.x = (self.x + self.x_speed) % pyxel.width def draw(self): # pyxel.cls(0) clears the previous frame pyxel.cls(0) # This draws a rectangle on the screen pyxel.rect(self.x, self.y, self.width, self.height, 9) App() Getting User Input Let's add some basic controls to our game. Let's make that square move with the keyboard: import pyxel class App: def __init__(self): # Initialize the screen self.screen_width = 640 self.screen_height = 480 pyxel.init(self.screen_width, self.screen_height) # Initialize some variables for our box self.width = 50 self.height = 50 self.x = 0 self.y = self.screen_height//2 - self.height//2 self.x_speed = 10 self.y_speed = 10 # Tell pyxel to run with our update and draw functions pyxel.run(self.update, self.draw) def get_player_movement(self): x_vel = 0 y_vel = 0 if pyxel.btn(pyxel.KEY_LEFT): x_vel -= self.x_speed if pyxel.btn(pyxel.KEY_RIGHT): x_vel += self.x_speed if pyxel.btn(pyxel.KEY_UP): y_vel -= self.y_speed if pyxel.btn(pyxel.KEY_DOWN): y_vel += self.y_speed return x_vel, y_vel def update(self): x_vel, y_vel = self.get_player_movement() self.x = (self.x + x_vel) % pyxel.width self.y = (self.y + y_vel) % pyxel.height def draw(self): pyxel.cls(0) pyxel.rect(self.x, self.y, self.width, self.height, 9) App() We can now move our box freely around with the arrow keys: Reference Pyxel README at github.com","title":"pyxel"},{"location":"extralibs/pyxel/#pyxel","text":"Pyxel is a retro game engine made for Python. There are some intentional limitations to the game engine, such as only being allowed to display 16 colors on the screen at any given time and only 4 sounds can be playing simultaneously. These limitations are meant to help games made in it stay true to the retro-gaming era the library is aiming at recreating, and it can also be a good exercise in keeping your projects small and focused.","title":"Pyxel"},{"location":"extralibs/pyxel/#examples","text":"","title":"Examples"},{"location":"extralibs/pyxel/#drawing-an-object-on-the-screen","text":"Let's draw a basic square on the screen and make it constantly move to the right: import pyxel class App: def __init__(self): # Initialize the screen self.screen_width = 640 self.screen_height = 480 pyxel.init(self.screen_width, self.screen_height) # Initialize some variables for our box self.width = 50 self.height = 50 self.x = 0 self.y = self.screen_height//2 - self.height//2 self.x_speed = 10 # Tell pyxel to run with our update and draw functions pyxel.run(self.update, self.draw) def update(self): self.x = (self.x + self.x_speed) % pyxel.width def draw(self): # pyxel.cls(0) clears the previous frame pyxel.cls(0) # This draws a rectangle on the screen pyxel.rect(self.x, self.y, self.width, self.height, 9) App()","title":"Drawing an Object on the Screen"},{"location":"extralibs/pyxel/#getting-user-input","text":"Let's add some basic controls to our game. Let's make that square move with the keyboard: import pyxel class App: def __init__(self): # Initialize the screen self.screen_width = 640 self.screen_height = 480 pyxel.init(self.screen_width, self.screen_height) # Initialize some variables for our box self.width = 50 self.height = 50 self.x = 0 self.y = self.screen_height//2 - self.height//2 self.x_speed = 10 self.y_speed = 10 # Tell pyxel to run with our update and draw functions pyxel.run(self.update, self.draw) def get_player_movement(self): x_vel = 0 y_vel = 0 if pyxel.btn(pyxel.KEY_LEFT): x_vel -= self.x_speed if pyxel.btn(pyxel.KEY_RIGHT): x_vel += self.x_speed if pyxel.btn(pyxel.KEY_UP): y_vel -= self.y_speed if pyxel.btn(pyxel.KEY_DOWN): y_vel += self.y_speed return x_vel, y_vel def update(self): x_vel, y_vel = self.get_player_movement() self.x = (self.x + x_vel) % pyxel.width self.y = (self.y + y_vel) % pyxel.height def draw(self): pyxel.cls(0) pyxel.rect(self.x, self.y, self.width, self.height, 9) App() We can now move our box freely around with the arrow keys:","title":"Getting User Input"},{"location":"extralibs/pyxel/#reference","text":"Pyxel README at github.com","title":"Reference"},{"location":"extralibs/redis/","text":"Redis Redis is an in-memory datastore which boasts high speed data storage and access. Redis is most often used for caching frequently used data that doesn't need to be stored forever, such as client sessions for a web service. redis-py is a Python library that allows interfacing with Redis. Note Python3 Editor does not provide access to a locally running Redis instance. You can, however, connect to a Redis cloud database using the Python3 Editor. Redis provides a free tier for their cloud database service and you can get one by making an account with them. We have written a short guide on how to properly set up a Redis cloud instance to work with Python3 Editor. You can check it out here: Redis Free Cloud Database Warning When including private database credentials in your code, make sure you DO NOT make your project \"Open Source\" when you share it. Connecting to Your Database First, open up your Redis account and go to your database list. Here, click on the Connect button: In the following list, click on Redis Client : In the menu that appears, select Python as your client, then copy the code into your Python3 Editor project: Note If you click the Copy button above, Redis will automatically insert your database's password into the code snippet. A password is added by default when you create your database. If you want to set your own password, you can click on your database, and scroll down you can find the Security section which includes the password Redis generated: Make sure you don't share this password with anyone. Congratulations! You're now ready to use your Redis cloud with Python3 Editor. Examples Create and Read Keys Storing keys and values are simple with Redis. We can use the set() method to set a value in Redis: import redis r = redis.Redis( host='<YOUR DATABASE>.cloud.redislabs.com', port=11588, password='<YOUR PASSWORD>' ) r.set('example_key', 'example_val') print(r.get('example_key')) print(r.get('not_exist_key')) Output: b'example_val' None Notice two things: our example_val string got automatically converted to bytes when we attempt to access a key that doesn't exist, we get None , not an error Update Keys If we want to update an existing key, we can just overwrite it: import redis r = redis.Redis( host='<YOUR DATABASE>.cloud.redislabs.com', port=11588, password='<YOUR PASSWORD>' ) r.set('example_key', 'val1') print(r.get('example_key')) r.set('example_key', 'val2') print(r.get('example_key')) Output: b'val1' b'val2' Delete Keys We can also delete keys with the delete() method: import redis r = redis.Redis( host='<YOUR DATABASE>.cloud.redislabs.com', port=11588, password='<YOUR PASSWORD>' ) r.set('example_key', 'val1') print(r.get('example_key')) r.delete('example_key') print(r.get('example_key')) Output: b'val1' None Reference redis-py at readthedocs.io","title":"redis"},{"location":"extralibs/redis/#redis","text":"Redis is an in-memory datastore which boasts high speed data storage and access. Redis is most often used for caching frequently used data that doesn't need to be stored forever, such as client sessions for a web service. redis-py is a Python library that allows interfacing with Redis. Note Python3 Editor does not provide access to a locally running Redis instance. You can, however, connect to a Redis cloud database using the Python3 Editor. Redis provides a free tier for their cloud database service and you can get one by making an account with them. We have written a short guide on how to properly set up a Redis cloud instance to work with Python3 Editor. You can check it out here: Redis Free Cloud Database Warning When including private database credentials in your code, make sure you DO NOT make your project \"Open Source\" when you share it.","title":"Redis"},{"location":"extralibs/redis/#connecting-to-your-database","text":"First, open up your Redis account and go to your database list. Here, click on the Connect button: In the following list, click on Redis Client : In the menu that appears, select Python as your client, then copy the code into your Python3 Editor project: Note If you click the Copy button above, Redis will automatically insert your database's password into the code snippet. A password is added by default when you create your database. If you want to set your own password, you can click on your database, and scroll down you can find the Security section which includes the password Redis generated: Make sure you don't share this password with anyone. Congratulations! You're now ready to use your Redis cloud with Python3 Editor.","title":"Connecting to Your Database"},{"location":"extralibs/redis/#examples","text":"","title":"Examples"},{"location":"extralibs/redis/#create-and-read-keys","text":"Storing keys and values are simple with Redis. We can use the set() method to set a value in Redis: import redis r = redis.Redis( host='<YOUR DATABASE>.cloud.redislabs.com', port=11588, password='<YOUR PASSWORD>' ) r.set('example_key', 'example_val') print(r.get('example_key')) print(r.get('not_exist_key')) Output: b'example_val' None Notice two things: our example_val string got automatically converted to bytes when we attempt to access a key that doesn't exist, we get None , not an error","title":"Create and Read Keys"},{"location":"extralibs/redis/#update-keys","text":"If we want to update an existing key, we can just overwrite it: import redis r = redis.Redis( host='<YOUR DATABASE>.cloud.redislabs.com', port=11588, password='<YOUR PASSWORD>' ) r.set('example_key', 'val1') print(r.get('example_key')) r.set('example_key', 'val2') print(r.get('example_key')) Output: b'val1' b'val2'","title":"Update Keys"},{"location":"extralibs/redis/#delete-keys","text":"We can also delete keys with the delete() method: import redis r = redis.Redis( host='<YOUR DATABASE>.cloud.redislabs.com', port=11588, password='<YOUR PASSWORD>' ) r.set('example_key', 'val1') print(r.get('example_key')) r.delete('example_key') print(r.get('example_key')) Output: b'val1' None","title":"Delete Keys"},{"location":"extralibs/redis/#reference","text":"redis-py at readthedocs.io","title":"Reference"},{"location":"extralibs/requests/","text":"Requests Requests is a Python library that simplifies the syntax for making HTTP requests. You can easily GET the content of webpages as well as POST data to them without needing to manually build query strings. Examples GET Content from a Webpage The basic way to load a webpage is with a GET request. The following code will send a GET request to a webpage, and load the result into a response object: import requests query = {'exampleKey': 'exampleValue'} resp = requests.get('https://httpbin.service.oyoclass.com/get', params=query) print(resp.text) Most webpages will give their raw HTML, however this site acts like an echo for testing: { \"args\": { \"exampleKey\": \"exampleValue\" }, \"headers\": { \"Accept\": \"*/*\", \"Accept-Encoding\": \"gzip\", \"Cdn-Loop\": \"cloudflare\", \"Cf-Connecting-Ip\": \"23.92.19.165\", \"Cf-Ipcountry\": \"US\", \"Cf-Ray\": \"7a3b936cd84978d0-EWR\", \"Cf-Visitor\": \"{\\\"scheme\\\":\\\"https\\\"}\", \"Host\": \"httpbin.service.oyoclass.com\", \"User-Agent\": \"python-requests/2.28.2\" }, \"origin\": \"23.92.19.165, 23.92.19.165\", \"url\": \"https://httpbin.service.oyoclass.com/get?exampleKey=exampleValue\" } Access a Public API Let's access coingecko.com 's public API for getting the current price of bitcoin in USD: import requests url = 'https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd' resp = requests.get(url) print(resp.text) Output (your results will vary depending on the current price of BTC) : {\"bitcoin\":{\"usd\":24218}} Using the OYOclass Proxy If the above API is being blocked, you can try adding https://proxy.oyoclass.com/ to the beginning of your URL: import requests url = 'https://proxy.oyoclass.com/https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd' resp = requests.get(url) print(resp.text) POST Data to a Webpage We can also POST data to webpages with Requests. This action is like submitting form data or logging into a webpage, not trying to load a page: import requests post_data = {'exampleKey': 'exampleValue'} resp = requests.post('https://httpbin.service.oyoclass.com/post', data=post_data) print(resp.text) The target URL in the example is also a special echo endpoint: { \"args\": {}, \"data\": \"\", \"files\": {}, \"form\": { \"exampleKey\": \"exampleValue\" }, \"headers\": { \"Accept\": \"*/*\", \"Accept-Encoding\": \"gzip\", \"Cdn-Loop\": \"cloudflare\", \"Cf-Connecting-Ip\": \"23.92.19.165\", \"Cf-Ipcountry\": \"US\", \"Cf-Ray\": \"7a3b94b99a97c468-EWR\", \"Cf-Visitor\": \"{\\\"scheme\\\":\\\"https\\\"}\", \"Content-Length\": \"23\", \"Content-Type\": \"application/x-www-form-urlencoded\", \"Host\": \"httpbin.service.oyoclass.com\", \"User-Agent\": \"python-requests/2.28.2\" }, \"json\": null, \"origin\": \"23.92.19.165, 23.92.19.165\", \"url\": \"https://httpbin.service.oyoclass.com/post\" } Requests Requests at requests.readthedocs.io","title":"requests"},{"location":"extralibs/requests/#requests","text":"Requests is a Python library that simplifies the syntax for making HTTP requests. You can easily GET the content of webpages as well as POST data to them without needing to manually build query strings.","title":"Requests"},{"location":"extralibs/requests/#examples","text":"","title":"Examples"},{"location":"extralibs/requests/#get-content-from-a-webpage","text":"The basic way to load a webpage is with a GET request. The following code will send a GET request to a webpage, and load the result into a response object: import requests query = {'exampleKey': 'exampleValue'} resp = requests.get('https://httpbin.service.oyoclass.com/get', params=query) print(resp.text) Most webpages will give their raw HTML, however this site acts like an echo for testing: { \"args\": { \"exampleKey\": \"exampleValue\" }, \"headers\": { \"Accept\": \"*/*\", \"Accept-Encoding\": \"gzip\", \"Cdn-Loop\": \"cloudflare\", \"Cf-Connecting-Ip\": \"23.92.19.165\", \"Cf-Ipcountry\": \"US\", \"Cf-Ray\": \"7a3b936cd84978d0-EWR\", \"Cf-Visitor\": \"{\\\"scheme\\\":\\\"https\\\"}\", \"Host\": \"httpbin.service.oyoclass.com\", \"User-Agent\": \"python-requests/2.28.2\" }, \"origin\": \"23.92.19.165, 23.92.19.165\", \"url\": \"https://httpbin.service.oyoclass.com/get?exampleKey=exampleValue\" }","title":"GET Content from a Webpage"},{"location":"extralibs/requests/#access-a-public-api","text":"Let's access coingecko.com 's public API for getting the current price of bitcoin in USD: import requests url = 'https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd' resp = requests.get(url) print(resp.text) Output (your results will vary depending on the current price of BTC) : {\"bitcoin\":{\"usd\":24218}}","title":"Access a Public API"},{"location":"extralibs/requests/#using-the-oyoclass-proxy","text":"If the above API is being blocked, you can try adding https://proxy.oyoclass.com/ to the beginning of your URL: import requests url = 'https://proxy.oyoclass.com/https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd' resp = requests.get(url) print(resp.text)","title":"Using the OYOclass Proxy"},{"location":"extralibs/requests/#post-data-to-a-webpage","text":"We can also POST data to webpages with Requests. This action is like submitting form data or logging into a webpage, not trying to load a page: import requests post_data = {'exampleKey': 'exampleValue'} resp = requests.post('https://httpbin.service.oyoclass.com/post', data=post_data) print(resp.text) The target URL in the example is also a special echo endpoint: { \"args\": {}, \"data\": \"\", \"files\": {}, \"form\": { \"exampleKey\": \"exampleValue\" }, \"headers\": { \"Accept\": \"*/*\", \"Accept-Encoding\": \"gzip\", \"Cdn-Loop\": \"cloudflare\", \"Cf-Connecting-Ip\": \"23.92.19.165\", \"Cf-Ipcountry\": \"US\", \"Cf-Ray\": \"7a3b94b99a97c468-EWR\", \"Cf-Visitor\": \"{\\\"scheme\\\":\\\"https\\\"}\", \"Content-Length\": \"23\", \"Content-Type\": \"application/x-www-form-urlencoded\", \"Host\": \"httpbin.service.oyoclass.com\", \"User-Agent\": \"python-requests/2.28.2\" }, \"json\": null, \"origin\": \"23.92.19.165, 23.92.19.165\", \"url\": \"https://httpbin.service.oyoclass.com/post\" }","title":"POST Data to a Webpage"},{"location":"extralibs/requests/#requests_1","text":"Requests at requests.readthedocs.io","title":"Requests"},{"location":"extralibs/scikit-learn/","text":"scikit-learn scikit-learn is a machine learning library built for Python. It is built on NumPy , SciPy , and Matplotlib . It's useful for statistical problems like data classification or predicting trends . Examples Classification From scikit-learn's examples (column names array has been modified for space in output window): from sklearn import svm X = [[0, 0], [1, 1]] y = [0, 1] clf = svm.SVC() clf.fit(X, y) # Code source: Ga\u00ebl Varoquaux # Andreas M\u00fcller # Modified for documentation by Jaques Grobler # License: BSD 3 clause import numpy as np import matplotlib.pyplot as plt from matplotlib.colors import ListedColormap from sklearn.model_selection import train_test_split from sklearn.preprocessing import StandardScaler from sklearn.pipeline import make_pipeline from sklearn.datasets import make_moons, make_circles, make_classification from sklearn.neural_network import MLPClassifier from sklearn.neighbors import KNeighborsClassifier from sklearn.svm import SVC from sklearn.gaussian_process import GaussianProcessClassifier from sklearn.gaussian_process.kernels import RBF from sklearn.tree import DecisionTreeClassifier from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier from sklearn.naive_bayes import GaussianNB from sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis from sklearn.inspection import DecisionBoundaryDisplay names = [ \"NN\", \"Linear SVM\", \"RBF SVM\", \"GP\", \"DT\", \"RF\", \"NeuralNet\", \"AB\", \"NB\", \"QDA\", ] classifiers = [ KNeighborsClassifier(3), SVC(kernel=\"linear\", C=0.025), SVC(gamma=2, C=1), GaussianProcessClassifier(1.0 * RBF(1.0)), DecisionTreeClassifier(max_depth=5), RandomForestClassifier(max_depth=5, n_estimators=10, max_features=1), MLPClassifier(alpha=1, max_iter=1000), AdaBoostClassifier(), GaussianNB(), QuadraticDiscriminantAnalysis(), ] X, y = make_classification( n_features=2, n_redundant=0, n_informative=2, random_state=1, n_clusters_per_class=1 ) rng = np.random.RandomState(2) X += 2 * rng.uniform(size=X.shape) linearly_separable = (X, y) datasets = [ make_moons(noise=0.3, random_state=0), make_circles(noise=0.2, factor=0.5, random_state=1), linearly_separable, ] figure = plt.figure(figsize=(27, 9)) i = 1 # iterate over datasets for ds_cnt, ds in enumerate(datasets): # preprocess dataset, split into training and test part X, y = ds X_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.4, random_state=42 ) x_min, x_max = X[:, 0].min() - 0.5, X[:, 0].max() + 0.5 y_min, y_max = X[:, 1].min() - 0.5, X[:, 1].max() + 0.5 # just plot the dataset first cm = plt.cm.RdBu cm_bright = ListedColormap([\"#FF0000\", \"#0000FF\"]) ax = plt.subplot(len(datasets), len(classifiers) + 1, i) if ds_cnt == 0: ax.set_title(\"Input data\") # Plot the training points ax.scatter(X_train[:, 0], X_train[:, 1], c=y_train, cmap=cm_bright, edgecolors=\"k\") # Plot the testing points ax.scatter( X_test[:, 0], X_test[:, 1], c=y_test, cmap=cm_bright, alpha=0.6, edgecolors=\"k\" ) ax.set_xlim(x_min, x_max) ax.set_ylim(y_min, y_max) ax.set_xticks(()) ax.set_yticks(()) i += 1 # iterate over classifiers for name, clf in zip(names, classifiers): ax = plt.subplot(len(datasets), len(classifiers) + 1, i) clf = make_pipeline(StandardScaler(), clf) clf.fit(X_train, y_train) score = clf.score(X_test, y_test) DecisionBoundaryDisplay.from_estimator( clf, X, cmap=cm, alpha=0.8, ax=ax, eps=0.5 ) # Plot the training points ax.scatter( X_train[:, 0], X_train[:, 1], c=y_train, cmap=cm_bright, edgecolors=\"k\" ) # Plot the testing points ax.scatter( X_test[:, 0], X_test[:, 1], c=y_test, cmap=cm_bright, edgecolors=\"k\", alpha=0.6, ) ax.set_xlim(x_min, x_max) ax.set_ylim(y_min, y_max) ax.set_xticks(()) ax.set_yticks(()) if ds_cnt == 0: ax.set_title(name) ax.text( x_max - 0.3, y_min + 0.3, (\"%.2f\" % score).lstrip(\"0\"), size=15, horizontalalignment=\"right\", ) i += 1 plt.tight_layout() plt.show() Will generate a window showing a plot of the data and the classificaiton fields derived from it: Color Clustering The following example takes a sample image and uses scikit-learn to identify clusters of colors. It then uses that cluster info to reduce the amount of colors in the image to only 64 instead of over 90,000: # Authors: Robert Layton <robertlayton@gmail.com> # Olivier Grisel <olivier.grisel@ensta.org> # Mathieu Blondel <mathieu@mblondel.org> # # License: BSD 3 clause import numpy as np import matplotlib.pyplot as plt from sklearn.cluster import KMeans from sklearn.metrics import pairwise_distances_argmin from sklearn.datasets import load_sample_image from sklearn.utils import shuffle from time import time n_colors = 64 # Load the Summer Palace photo china = load_sample_image(\"china.jpg\") # Convert to floats instead of the default 8 bits integer coding. Dividing by # 255 is important so that plt.imshow behaves works well on float data (need to # be in the range [0-1]) china = np.array(china, dtype=np.float64) / 255 # Load Image and transform to a 2D numpy array. w, h, d = original_shape = tuple(china.shape) assert d == 3 image_array = np.reshape(china, (w * h, d)) print(\"Fitting model on a small sub-sample of the data\") t0 = time() image_array_sample = shuffle(image_array, random_state=0, n_samples=1_000) kmeans = KMeans(n_clusters=n_colors, n_init=\"auto\", random_state=0).fit( image_array_sample ) print(f\"done in {time() - t0:0.3f}s.\") # Get labels for all points print(\"Predicting color indices on the full image (k-means)\") t0 = time() labels = kmeans.predict(image_array) print(f\"done in {time() - t0:0.3f}s.\") codebook_random = shuffle(image_array, random_state=0, n_samples=n_colors) print(\"Predicting color indices on the full image (random)\") t0 = time() labels_random = pairwise_distances_argmin(codebook_random, image_array, axis=0) print(f\"done in {time() - t0:0.3f}s.\") def recreate_image(codebook, labels, w, h): \"\"\"Recreate the (compressed) image from the code book & labels\"\"\" return codebook[labels].reshape(w, h, -1) # Display all results, alongside original image plt.figure(1) plt.clf() plt.axis(\"off\") plt.title(\"Original image (96,615 colors)\") plt.imshow(china) plt.figure(2) plt.clf() plt.axis(\"off\") plt.title(f\"Quantized image ({n_colors} colors, K-Means)\") plt.imshow(recreate_image(kmeans.cluster_centers_, labels, w, h)) plt.figure(3) plt.clf() plt.axis(\"off\") plt.title(f\"Quantized image ({n_colors} colors, Random)\") plt.imshow(recreate_image(codebook_random, labels_random, w, h)) plt.show() Your output will generate 3 separate windows showing the original image, the reduced color image using an average of the color clusters using K-Means, and a final image where the cluster colors are calculated by random selection: Note When there are multiple windows in an output in Python3 Editor, you can use your mouse to click and drag the windows around to reposition them. Reference scikit-learn at scikit-learn.org","title":"scikit-learn"},{"location":"extralibs/scikit-learn/#scikit-learn","text":"scikit-learn is a machine learning library built for Python. It is built on NumPy , SciPy , and Matplotlib . It's useful for statistical problems like data classification or predicting trends .","title":"scikit-learn"},{"location":"extralibs/scikit-learn/#examples","text":"","title":"Examples"},{"location":"extralibs/scikit-learn/#classification","text":"From scikit-learn's examples (column names array has been modified for space in output window): from sklearn import svm X = [[0, 0], [1, 1]] y = [0, 1] clf = svm.SVC() clf.fit(X, y) # Code source: Ga\u00ebl Varoquaux # Andreas M\u00fcller # Modified for documentation by Jaques Grobler # License: BSD 3 clause import numpy as np import matplotlib.pyplot as plt from matplotlib.colors import ListedColormap from sklearn.model_selection import train_test_split from sklearn.preprocessing import StandardScaler from sklearn.pipeline import make_pipeline from sklearn.datasets import make_moons, make_circles, make_classification from sklearn.neural_network import MLPClassifier from sklearn.neighbors import KNeighborsClassifier from sklearn.svm import SVC from sklearn.gaussian_process import GaussianProcessClassifier from sklearn.gaussian_process.kernels import RBF from sklearn.tree import DecisionTreeClassifier from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier from sklearn.naive_bayes import GaussianNB from sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis from sklearn.inspection import DecisionBoundaryDisplay names = [ \"NN\", \"Linear SVM\", \"RBF SVM\", \"GP\", \"DT\", \"RF\", \"NeuralNet\", \"AB\", \"NB\", \"QDA\", ] classifiers = [ KNeighborsClassifier(3), SVC(kernel=\"linear\", C=0.025), SVC(gamma=2, C=1), GaussianProcessClassifier(1.0 * RBF(1.0)), DecisionTreeClassifier(max_depth=5), RandomForestClassifier(max_depth=5, n_estimators=10, max_features=1), MLPClassifier(alpha=1, max_iter=1000), AdaBoostClassifier(), GaussianNB(), QuadraticDiscriminantAnalysis(), ] X, y = make_classification( n_features=2, n_redundant=0, n_informative=2, random_state=1, n_clusters_per_class=1 ) rng = np.random.RandomState(2) X += 2 * rng.uniform(size=X.shape) linearly_separable = (X, y) datasets = [ make_moons(noise=0.3, random_state=0), make_circles(noise=0.2, factor=0.5, random_state=1), linearly_separable, ] figure = plt.figure(figsize=(27, 9)) i = 1 # iterate over datasets for ds_cnt, ds in enumerate(datasets): # preprocess dataset, split into training and test part X, y = ds X_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.4, random_state=42 ) x_min, x_max = X[:, 0].min() - 0.5, X[:, 0].max() + 0.5 y_min, y_max = X[:, 1].min() - 0.5, X[:, 1].max() + 0.5 # just plot the dataset first cm = plt.cm.RdBu cm_bright = ListedColormap([\"#FF0000\", \"#0000FF\"]) ax = plt.subplot(len(datasets), len(classifiers) + 1, i) if ds_cnt == 0: ax.set_title(\"Input data\") # Plot the training points ax.scatter(X_train[:, 0], X_train[:, 1], c=y_train, cmap=cm_bright, edgecolors=\"k\") # Plot the testing points ax.scatter( X_test[:, 0], X_test[:, 1], c=y_test, cmap=cm_bright, alpha=0.6, edgecolors=\"k\" ) ax.set_xlim(x_min, x_max) ax.set_ylim(y_min, y_max) ax.set_xticks(()) ax.set_yticks(()) i += 1 # iterate over classifiers for name, clf in zip(names, classifiers): ax = plt.subplot(len(datasets), len(classifiers) + 1, i) clf = make_pipeline(StandardScaler(), clf) clf.fit(X_train, y_train) score = clf.score(X_test, y_test) DecisionBoundaryDisplay.from_estimator( clf, X, cmap=cm, alpha=0.8, ax=ax, eps=0.5 ) # Plot the training points ax.scatter( X_train[:, 0], X_train[:, 1], c=y_train, cmap=cm_bright, edgecolors=\"k\" ) # Plot the testing points ax.scatter( X_test[:, 0], X_test[:, 1], c=y_test, cmap=cm_bright, edgecolors=\"k\", alpha=0.6, ) ax.set_xlim(x_min, x_max) ax.set_ylim(y_min, y_max) ax.set_xticks(()) ax.set_yticks(()) if ds_cnt == 0: ax.set_title(name) ax.text( x_max - 0.3, y_min + 0.3, (\"%.2f\" % score).lstrip(\"0\"), size=15, horizontalalignment=\"right\", ) i += 1 plt.tight_layout() plt.show() Will generate a window showing a plot of the data and the classificaiton fields derived from it:","title":"Classification"},{"location":"extralibs/scikit-learn/#color-clustering","text":"The following example takes a sample image and uses scikit-learn to identify clusters of colors. It then uses that cluster info to reduce the amount of colors in the image to only 64 instead of over 90,000: # Authors: Robert Layton <robertlayton@gmail.com> # Olivier Grisel <olivier.grisel@ensta.org> # Mathieu Blondel <mathieu@mblondel.org> # # License: BSD 3 clause import numpy as np import matplotlib.pyplot as plt from sklearn.cluster import KMeans from sklearn.metrics import pairwise_distances_argmin from sklearn.datasets import load_sample_image from sklearn.utils import shuffle from time import time n_colors = 64 # Load the Summer Palace photo china = load_sample_image(\"china.jpg\") # Convert to floats instead of the default 8 bits integer coding. Dividing by # 255 is important so that plt.imshow behaves works well on float data (need to # be in the range [0-1]) china = np.array(china, dtype=np.float64) / 255 # Load Image and transform to a 2D numpy array. w, h, d = original_shape = tuple(china.shape) assert d == 3 image_array = np.reshape(china, (w * h, d)) print(\"Fitting model on a small sub-sample of the data\") t0 = time() image_array_sample = shuffle(image_array, random_state=0, n_samples=1_000) kmeans = KMeans(n_clusters=n_colors, n_init=\"auto\", random_state=0).fit( image_array_sample ) print(f\"done in {time() - t0:0.3f}s.\") # Get labels for all points print(\"Predicting color indices on the full image (k-means)\") t0 = time() labels = kmeans.predict(image_array) print(f\"done in {time() - t0:0.3f}s.\") codebook_random = shuffle(image_array, random_state=0, n_samples=n_colors) print(\"Predicting color indices on the full image (random)\") t0 = time() labels_random = pairwise_distances_argmin(codebook_random, image_array, axis=0) print(f\"done in {time() - t0:0.3f}s.\") def recreate_image(codebook, labels, w, h): \"\"\"Recreate the (compressed) image from the code book & labels\"\"\" return codebook[labels].reshape(w, h, -1) # Display all results, alongside original image plt.figure(1) plt.clf() plt.axis(\"off\") plt.title(\"Original image (96,615 colors)\") plt.imshow(china) plt.figure(2) plt.clf() plt.axis(\"off\") plt.title(f\"Quantized image ({n_colors} colors, K-Means)\") plt.imshow(recreate_image(kmeans.cluster_centers_, labels, w, h)) plt.figure(3) plt.clf() plt.axis(\"off\") plt.title(f\"Quantized image ({n_colors} colors, Random)\") plt.imshow(recreate_image(codebook_random, labels_random, w, h)) plt.show() Your output will generate 3 separate windows showing the original image, the reduced color image using an average of the color clusters using K-Means, and a final image where the cluster colors are calculated by random selection: Note When there are multiple windows in an output in Python3 Editor, you can use your mouse to click and drag the windows around to reposition them.","title":"Color Clustering"},{"location":"extralibs/scikit-learn/#reference","text":"scikit-learn at scikit-learn.org","title":"Reference"},{"location":"extralibs/scipy/","text":"SciPy SciPy is a scientific computation library that was made by the author of NumPy . In fact, SciPy uses NumPy for its functions. SciPy exists as a separate package built on top of NumPy and further optimizes some commonly used functions in Data Science. Examples Linear Algebra One good reason to use SciPy is that it has an enhanced set of features for linear algebra and matrix operations. Let's use SciPy to extract the eigenvalues and eigenvectors from a matrix: from scipy import linalg import numpy as np matrix = np.array([[0,1],[-2,-3]]) eigenvals, eigenvects = linalg.eig(matrix) print(f'matrix: \\n{matrix}\\n') print(f'eigenvalues: \\n{eigenvals}\\n') print(f'eigenvectors: \\n{eigenvects}') Output: matrix: [[ 0 1] [-2 -3]] eigenvalues: [-1.+0.j -2.+0.j] eigenvectors: [[ 0.70710678 -0.4472136 ] [-0.70710678 0.89442719]] Special Functions SciPy has access to some special functions. One example are the combinatorics calculators: Calculate 5 choose 2 (5C2) from scipy.special import comb ans = comb(5, 2, exact = True) print(ans) Output: 10 Calculate 5 permutation 2 (5P2) from scipy.special import perm ans = perm(5, 2, exact = True) print(ans) Output: 20 Reference SciPy at docs.scipy.org","title":"scipy"},{"location":"extralibs/scipy/#scipy","text":"SciPy is a scientific computation library that was made by the author of NumPy . In fact, SciPy uses NumPy for its functions. SciPy exists as a separate package built on top of NumPy and further optimizes some commonly used functions in Data Science.","title":"SciPy"},{"location":"extralibs/scipy/#examples","text":"","title":"Examples"},{"location":"extralibs/scipy/#linear-algebra","text":"One good reason to use SciPy is that it has an enhanced set of features for linear algebra and matrix operations. Let's use SciPy to extract the eigenvalues and eigenvectors from a matrix: from scipy import linalg import numpy as np matrix = np.array([[0,1],[-2,-3]]) eigenvals, eigenvects = linalg.eig(matrix) print(f'matrix: \\n{matrix}\\n') print(f'eigenvalues: \\n{eigenvals}\\n') print(f'eigenvectors: \\n{eigenvects}') Output: matrix: [[ 0 1] [-2 -3]] eigenvalues: [-1.+0.j -2.+0.j] eigenvectors: [[ 0.70710678 -0.4472136 ] [-0.70710678 0.89442719]]","title":"Linear Algebra"},{"location":"extralibs/scipy/#special-functions","text":"SciPy has access to some special functions. One example are the combinatorics calculators:","title":"Special Functions"},{"location":"extralibs/scipy/#calculate-5-choose-2-5c2","text":"from scipy.special import comb ans = comb(5, 2, exact = True) print(ans) Output: 10","title":"Calculate 5 choose 2 (5C2)"},{"location":"extralibs/scipy/#calculate-5-permutation-2-5p2","text":"from scipy.special import perm ans = perm(5, 2, exact = True) print(ans) Output: 20","title":"Calculate 5 permutation 2 (5P2)"},{"location":"extralibs/scipy/#reference","text":"SciPy at docs.scipy.org","title":"Reference"},{"location":"extralibs/seaborn/","text":"Seaborn Seaborn is a data visualization library for Python built on top of Matplotlib , and works well with pandas dataframes. Examples Note The following examples are taken from Seaborn's official documents and uses sample data included in the package. Lineplot import matplotlib.pyplot as plt import seaborn as sns sns.set_theme(style=\"darkgrid\") # Load an example dataset with long-form data fmri = sns.load_dataset(\"fmri\") # Plot the responses for different events and regions sns.lineplot(x=\"timepoint\", y=\"signal\", hue=\"region\", style=\"event\", data=fmri) plt.show() Output: Scatterplot import matplotlib.pyplot as plt import numpy as np import seaborn as sns sns.set_theme(style=\"dark\") # Simulate data from a bivariate Gaussian n = 10000 mean = [0, 0] cov = [(2, .4), (.4, .2)] rng = np.random.RandomState(0) x, y = rng.multivariate_normal(mean, cov, n).T # Draw a combo histogram and scatterplot with density contours f, ax = plt.subplots(figsize=(6, 6)) sns.scatterplot(x=x, y=y, s=5, color=\".15\") sns.histplot(x=x, y=y, bins=50, pthresh=.1, cmap=\"mako\") sns.kdeplot(x=x, y=y, levels=5, color=\"w\", linewidths=1) plt.show() Output: Reference Seaborn at pydata.org Seaborn Examples","title":"seaborn"},{"location":"extralibs/seaborn/#seaborn","text":"Seaborn is a data visualization library for Python built on top of Matplotlib , and works well with pandas dataframes.","title":"Seaborn"},{"location":"extralibs/seaborn/#examples","text":"Note The following examples are taken from Seaborn's official documents and uses sample data included in the package.","title":"Examples"},{"location":"extralibs/seaborn/#lineplot","text":"import matplotlib.pyplot as plt import seaborn as sns sns.set_theme(style=\"darkgrid\") # Load an example dataset with long-form data fmri = sns.load_dataset(\"fmri\") # Plot the responses for different events and regions sns.lineplot(x=\"timepoint\", y=\"signal\", hue=\"region\", style=\"event\", data=fmri) plt.show() Output:","title":"Lineplot"},{"location":"extralibs/seaborn/#scatterplot","text":"import matplotlib.pyplot as plt import numpy as np import seaborn as sns sns.set_theme(style=\"dark\") # Simulate data from a bivariate Gaussian n = 10000 mean = [0, 0] cov = [(2, .4), (.4, .2)] rng = np.random.RandomState(0) x, y = rng.multivariate_normal(mean, cov, n).T # Draw a combo histogram and scatterplot with density contours f, ax = plt.subplots(figsize=(6, 6)) sns.scatterplot(x=x, y=y, s=5, color=\".15\") sns.histplot(x=x, y=y, bins=50, pthresh=.1, cmap=\"mako\") sns.kdeplot(x=x, y=y, levels=5, color=\"w\", linewidths=1) plt.show() Output:","title":"Scatterplot"},{"location":"extralibs/seaborn/#reference","text":"Seaborn at pydata.org Seaborn Examples","title":"Reference"},{"location":"extralibs/sqlalchemy/","text":"SQLAlchemy SQLAlchemy is an SQL database engine library for Python. It uses its own syntax for handling database operations with Python objects and writes the SQL queries for you. SQLAlchemy can be useful if you're uncomfortable writing your own SQL queries directly with SQLite . Examples Create a Table First thing we need to do is create a table in our database: from sqlalchemy import create_engine, MetaData, Table, Column, Integer, String engine = create_engine('sqlite:///college.db', echo = True) meta = MetaData() students = Table( 'students', meta, Column('id', Integer, primary_key = True), Column('firstname', String), Column('lastname', String), ) meta.create_all(engine) In our console, we can see that SQLAlchemy will print the raw SQL query: CREATE TABLE students ( id INTEGER NOT NULL, firstname VARCHAR, lastname VARCHAR, PRIMARY KEY (id) ) Note The 'sqlite:///' URI indicates that we're using a SQLite database in a relative path. For Python3 Editor, that means your project's file list. When you try to open a database that doesn't exist, it will automatically be created and put into your file list. Since we used 'sqlite:///college.db' in our code above, you can see that college.db was added in your project's file list to the left: Insert a Row In the following snippet, we will insert a student with the firstname field set to 'Karen' : import sqlalchemy as db engine = db.create_engine('sqlite:///college.db', echo = True) conn = engine.connect() meta = db.MetaData() # Get access to the students table students = db.Table('students', meta, autoload_with=engine) # Create the insert SQL statement ins = students.insert().values(firstname='Karen') # Begin a transaction trans = conn.begin() # Execute insert in transaction conn.execute(ins) # Commit the transaction trans.commit() We can't see our result immedaitely, but we will read from this table in the next example to see the student we inserted. Read a Row We can read an entire table with a select() call: import sqlalchemy as db engine = db.create_engine('sqlite:///college.db', echo = True) conn = engine.connect() meta = db.MetaData() # Get access to the students table students = db.Table('students', meta, autoload_with=engine) s = students.select() res = conn.execute(s) for row in res.fetchall(): print(row) This will print out the data: (1, 'Karen', None) It's our student that we inserted before! They were given an id of 1 and since we did not specify a lastname for our student, it has been left null ( None in Python) Update a Row Let's write a program to update a student with id==1 to have the lastname Karenston : import sqlalchemy as db engine = db.create_engine('sqlite:///college.db', echo = True) conn = engine.connect() meta = db.MetaData() # Get access to the students table students = db.Table('students', meta, autoload_with=engine) s = students.update().where(students.c.id==1).values(lastname='Karenston') trans = conn.begin() res = conn.execute(s) trans.commit() Now, if we run the fetchall() example from before, our program will now output: (1, 'Karen', 'Karenston') Delete a Row Finally, let's delete the row we've been working with. The process is almost identical to the update() example: import sqlalchemy as db engine = db.create_engine('sqlite:///college.db', echo = True) conn = engine.connect() meta = db.MetaData() # Get access to the students table students = db.Table('students', meta, autoload_with=engine) s = students.delete().where(students.c.id==1) trans = conn.begin() res = conn.execute(s) trans.commit() Now our database table is empty once again. Reference SQLAlchemy at sqlalchemy.org","title":"sqlalchemy"},{"location":"extralibs/sqlalchemy/#sqlalchemy","text":"SQLAlchemy is an SQL database engine library for Python. It uses its own syntax for handling database operations with Python objects and writes the SQL queries for you. SQLAlchemy can be useful if you're uncomfortable writing your own SQL queries directly with SQLite .","title":"SQLAlchemy"},{"location":"extralibs/sqlalchemy/#examples","text":"","title":"Examples"},{"location":"extralibs/sqlalchemy/#create-a-table","text":"First thing we need to do is create a table in our database: from sqlalchemy import create_engine, MetaData, Table, Column, Integer, String engine = create_engine('sqlite:///college.db', echo = True) meta = MetaData() students = Table( 'students', meta, Column('id', Integer, primary_key = True), Column('firstname', String), Column('lastname', String), ) meta.create_all(engine) In our console, we can see that SQLAlchemy will print the raw SQL query: CREATE TABLE students ( id INTEGER NOT NULL, firstname VARCHAR, lastname VARCHAR, PRIMARY KEY (id) ) Note The 'sqlite:///' URI indicates that we're using a SQLite database in a relative path. For Python3 Editor, that means your project's file list. When you try to open a database that doesn't exist, it will automatically be created and put into your file list. Since we used 'sqlite:///college.db' in our code above, you can see that college.db was added in your project's file list to the left:","title":"Create a Table"},{"location":"extralibs/sqlalchemy/#insert-a-row","text":"In the following snippet, we will insert a student with the firstname field set to 'Karen' : import sqlalchemy as db engine = db.create_engine('sqlite:///college.db', echo = True) conn = engine.connect() meta = db.MetaData() # Get access to the students table students = db.Table('students', meta, autoload_with=engine) # Create the insert SQL statement ins = students.insert().values(firstname='Karen') # Begin a transaction trans = conn.begin() # Execute insert in transaction conn.execute(ins) # Commit the transaction trans.commit() We can't see our result immedaitely, but we will read from this table in the next example to see the student we inserted.","title":"Insert a Row"},{"location":"extralibs/sqlalchemy/#read-a-row","text":"We can read an entire table with a select() call: import sqlalchemy as db engine = db.create_engine('sqlite:///college.db', echo = True) conn = engine.connect() meta = db.MetaData() # Get access to the students table students = db.Table('students', meta, autoload_with=engine) s = students.select() res = conn.execute(s) for row in res.fetchall(): print(row) This will print out the data: (1, 'Karen', None) It's our student that we inserted before! They were given an id of 1 and since we did not specify a lastname for our student, it has been left null ( None in Python)","title":"Read a Row"},{"location":"extralibs/sqlalchemy/#update-a-row","text":"Let's write a program to update a student with id==1 to have the lastname Karenston : import sqlalchemy as db engine = db.create_engine('sqlite:///college.db', echo = True) conn = engine.connect() meta = db.MetaData() # Get access to the students table students = db.Table('students', meta, autoload_with=engine) s = students.update().where(students.c.id==1).values(lastname='Karenston') trans = conn.begin() res = conn.execute(s) trans.commit() Now, if we run the fetchall() example from before, our program will now output: (1, 'Karen', 'Karenston')","title":"Update a Row"},{"location":"extralibs/sqlalchemy/#delete-a-row","text":"Finally, let's delete the row we've been working with. The process is almost identical to the update() example: import sqlalchemy as db engine = db.create_engine('sqlite:///college.db', echo = True) conn = engine.connect() meta = db.MetaData() # Get access to the students table students = db.Table('students', meta, autoload_with=engine) s = students.delete().where(students.c.id==1) trans = conn.begin() res = conn.execute(s) trans.commit() Now our database table is empty once again.","title":"Delete a Row"},{"location":"extralibs/sqlalchemy/#reference","text":"SQLAlchemy at sqlalchemy.org","title":"Reference"},{"location":"extralibs/starlette/","text":"Starlette Starlette is an ASGI framework that allows for ease of building async web services in Python. To work properly, it must be used together with an ASGI server to run the service such as Uvicorn . Examples Basic ASGI Server First install the uvicorn library, then paste the following into main.py : from starlette.applications import Starlette from starlette.responses import PlainTextResponse from starlette.routing import Route import uvicorn async def homepage(request): return PlainTextResponse('Hello, World!') async def greeting(request): username = request.path_params['username'] return PlainTextResponse(f'Greetings, {username}!') app = Starlette(debug=True, routes=[ Route('/', homepage), Route('/greetings/{username}', greeting) ]) if __name__ == '__main__': # host must be 0.0.0.0 to work in the Python3 Editor uvicorn.run(app, host='0.0.0.0', port=8000) When you visit \"/\", you will see a page like this: And when you visit \"/greetings/jordan\", you will see a page like this: Handling POST requests Note To handle POST requests with Starlette, you need to have an additional library Python-Multipart installed in your project. Then, we can access POST data with the request.form() method. Here's a project that creates a file upload input and returns the content as an undecoded string: from starlette.applications import Starlette from starlette.responses import HTMLResponse, PlainTextResponse from starlette.routing import Route import uvicorn async def homepage(request): return HTMLResponse(''' <form action=\"/upload-file\" method=\"post\" enctype=\"multipart/form-data\"> <input type=\"file\" name=\"file\"> <br> <input type=\"submit\"/> </form> ''') async def upload_file(request): form = await request.form() if 'file' in form and form['file']: file_content = await form['file'].read() return PlainTextResponse(str(file_content)) return PlainTextResponse('no file uploaded') app = Starlette(debug=True, routes=[ Route('/', homepage), Route('/upload-file', upload_file, methods=['post']) ]) if __name__ == \"__main__\": uvicorn.run(app, host='0.0.0.0', port=8000) Your output will vary depending on what file you upload, but a simple .txt file will print out similar to this: b\"I'm uploading this text file.\\r\\n2nd line\\r\\n3rd line\" Reference Starlette at starlette.io","title":"starlette"},{"location":"extralibs/starlette/#starlette","text":"Starlette is an ASGI framework that allows for ease of building async web services in Python. To work properly, it must be used together with an ASGI server to run the service such as Uvicorn .","title":"Starlette"},{"location":"extralibs/starlette/#examples","text":"","title":"Examples"},{"location":"extralibs/starlette/#basic-asgi-server","text":"First install the uvicorn library, then paste the following into main.py : from starlette.applications import Starlette from starlette.responses import PlainTextResponse from starlette.routing import Route import uvicorn async def homepage(request): return PlainTextResponse('Hello, World!') async def greeting(request): username = request.path_params['username'] return PlainTextResponse(f'Greetings, {username}!') app = Starlette(debug=True, routes=[ Route('/', homepage), Route('/greetings/{username}', greeting) ]) if __name__ == '__main__': # host must be 0.0.0.0 to work in the Python3 Editor uvicorn.run(app, host='0.0.0.0', port=8000) When you visit \"/\", you will see a page like this: And when you visit \"/greetings/jordan\", you will see a page like this:","title":"Basic ASGI Server"},{"location":"extralibs/starlette/#handling-post-requests","text":"Note To handle POST requests with Starlette, you need to have an additional library Python-Multipart installed in your project. Then, we can access POST data with the request.form() method. Here's a project that creates a file upload input and returns the content as an undecoded string: from starlette.applications import Starlette from starlette.responses import HTMLResponse, PlainTextResponse from starlette.routing import Route import uvicorn async def homepage(request): return HTMLResponse(''' <form action=\"/upload-file\" method=\"post\" enctype=\"multipart/form-data\"> <input type=\"file\" name=\"file\"> <br> <input type=\"submit\"/> </form> ''') async def upload_file(request): form = await request.form() if 'file' in form and form['file']: file_content = await form['file'].read() return PlainTextResponse(str(file_content)) return PlainTextResponse('no file uploaded') app = Starlette(debug=True, routes=[ Route('/', homepage), Route('/upload-file', upload_file, methods=['post']) ]) if __name__ == \"__main__\": uvicorn.run(app, host='0.0.0.0', port=8000) Your output will vary depending on what file you upload, but a simple .txt file will print out similar to this: b\"I'm uploading this text file.\\r\\n2nd line\\r\\n3rd line\"","title":"Handling POST requests"},{"location":"extralibs/starlette/#reference","text":"Starlette at starlette.io","title":"Reference"},{"location":"extralibs/tinydb/","text":"TinyDB TinyDB is a database package for Python written entirely in Python with a focus on providing a simple database solution for simple programs without the need for an extra external database server like Mongo. You should use TinyDB if you only need to track a small amount of data across separate runs of a program. If you need advanced features like concurrent access or handling data for an HTTP server, you should use a more robust database package like Mongo or SQLite. Examples Record Runtimes import time from tinydb import TinyDB db = TinyDB('runtimes.json') db.insert({\"runtime\": time.time()}) for entry in iter(db): print(entry) Each time you run this program, another entry with the key runtime will be inserted with the current time.time() , and all the previous times the program was ran will also be printed. First run: {'runtime': 1678895895.8667424} Second run: {'runtime': 1678895895.8667424} {'runtime': 1678895897.6668615} Note When you try to open a database that doesn't exist, it will automatically be created and put into your file list. Since we used 'runtimes.json' in our code above, you can see it added in your project's file list to the left: Search Database Entries We can search through our database and only pull certain values that meet some specific critera with a Query : from tinydb import TinyDB, Query db = TinyDB('marbles.json') # db.truncate() deletes the entire contents of database. # This is just an example. Don't do this if you want to keep your data! db.truncate() db.insert({'color': 'red', 'count': 1}) db.insert({'color': 'green', 'count': 2}) db.insert({'color': 'blue', 'count': 3}) db.insert({'color': 'orange', 'count': 4}) db.insert({'color': 'purple', 'count': 5}) marbles = Query() for entry in db.search(marbles.count >= 3): print(entry) Output: {'color': 'blue', 'count': 3} {'color': 'orange', 'count': 4} {'color': 'purple', 'count': 5} Update Entry in Database We can also use Query to select a certain document or documents to update. The following code creates an animals.json , inserts two items, and then adds 10 to animals with the type \"dog\": from tinydb import TinyDB, Query from tinydb.operations import add db = TinyDB('animals.json') # db.truncate() deletes the entire contents of database. # This is just an example. Don't do this if you want to keep your data! db.truncate() db.insert({'type': 'cat', 'count': 5}) db.insert({'type': 'dog', 'count': 5}) animals = Query() db.update(add('count', 10), animals.type == 'dog') for entry in iter(db): print(entry) Output: {'type': 'cat', 'count': 5} {'type': 'dog', 'count': 15} Reference TinyDB at tinydb.readthedocs.io","title":"tinydb"},{"location":"extralibs/tinydb/#tinydb","text":"TinyDB is a database package for Python written entirely in Python with a focus on providing a simple database solution for simple programs without the need for an extra external database server like Mongo. You should use TinyDB if you only need to track a small amount of data across separate runs of a program. If you need advanced features like concurrent access or handling data for an HTTP server, you should use a more robust database package like Mongo or SQLite.","title":"TinyDB"},{"location":"extralibs/tinydb/#examples","text":"","title":"Examples"},{"location":"extralibs/tinydb/#record-runtimes","text":"import time from tinydb import TinyDB db = TinyDB('runtimes.json') db.insert({\"runtime\": time.time()}) for entry in iter(db): print(entry) Each time you run this program, another entry with the key runtime will be inserted with the current time.time() , and all the previous times the program was ran will also be printed. First run: {'runtime': 1678895895.8667424} Second run: {'runtime': 1678895895.8667424} {'runtime': 1678895897.6668615} Note When you try to open a database that doesn't exist, it will automatically be created and put into your file list. Since we used 'runtimes.json' in our code above, you can see it added in your project's file list to the left:","title":"Record Runtimes"},{"location":"extralibs/tinydb/#search-database-entries","text":"We can search through our database and only pull certain values that meet some specific critera with a Query : from tinydb import TinyDB, Query db = TinyDB('marbles.json') # db.truncate() deletes the entire contents of database. # This is just an example. Don't do this if you want to keep your data! db.truncate() db.insert({'color': 'red', 'count': 1}) db.insert({'color': 'green', 'count': 2}) db.insert({'color': 'blue', 'count': 3}) db.insert({'color': 'orange', 'count': 4}) db.insert({'color': 'purple', 'count': 5}) marbles = Query() for entry in db.search(marbles.count >= 3): print(entry) Output: {'color': 'blue', 'count': 3} {'color': 'orange', 'count': 4} {'color': 'purple', 'count': 5}","title":"Search Database Entries"},{"location":"extralibs/tinydb/#update-entry-in-database","text":"We can also use Query to select a certain document or documents to update. The following code creates an animals.json , inserts two items, and then adds 10 to animals with the type \"dog\": from tinydb import TinyDB, Query from tinydb.operations import add db = TinyDB('animals.json') # db.truncate() deletes the entire contents of database. # This is just an example. Don't do this if you want to keep your data! db.truncate() db.insert({'type': 'cat', 'count': 5}) db.insert({'type': 'dog', 'count': 5}) animals = Query() db.update(add('count', 10), animals.type == 'dog') for entry in iter(db): print(entry) Output: {'type': 'cat', 'count': 5} {'type': 'dog', 'count': 15}","title":"Update Entry in Database"},{"location":"extralibs/tinydb/#reference","text":"TinyDB at tinydb.readthedocs.io","title":"Reference"},{"location":"extralibs/uvicorn/","text":"Uvicorn Uvicorn is an ASGI web server implementation for Python. It allows for hosting an ASGI server and serving requests. It is highly recommended that uvicorn be used together with an ASGI framework library, like Starlette . Examples Standalone Uvicorn Hello World We can run a simple web server that has an index page which returns \"Hello, World!\" when visited: import uvicorn async def app(scope, receive, send): assert scope['type'] == 'http' await send({ 'type': 'http.response.start', 'status': 200, 'headers': [ [b'content-type', b'text/plain'], ], }) await send({ 'type': 'http.response.body', 'body': b'Hello, world!', }) if __name__ == \"__main__\": # host must be 0.0.0.0 to work in the Python3 Editor uvicorn.run('main:app', host='0.0.0.0', port=8000, log_level='info') On the right, we will see our page: Handling Routing If you would like to have routing to different pages in your app, you should use an ASGI framework like Starlette , otherwise you will have to parse the scope['path'] variable and handle the different request paths yourself. This example has an index page, and also has an extra /hello/<anything> path that acts like an echo: import uvicorn async def index(send): await send({ 'type': 'http.response.body', 'body': b'Index Page!', }) async def greet(send, name): await send({ 'type': 'http.response.body', 'body': f'Hello, {name}'.encode(), }) async def app(scope, receive, send): assert scope['type'] == 'http' await send({ 'type': 'http.response.start', 'status': 200, 'headers': [ [b'content-type', b'text/plain'], ], }) if scope['path'] == \"/\": await index(send) elif scope['path'].startswith(\"/hello/\"): await greet(send, scope['path'][7:]) if __name__ == \"__main__\": # host must be 0.0.0.0 to work in the Python3 Editor uvicorn.run('main:app', host='0.0.0.0', port=8000, log_level='info') Then, if we visit the /hello/<anything> endpoint, we will get this output: Reference Uvicorn at uvicorn.org","title":"uvicorn"},{"location":"extralibs/uvicorn/#uvicorn","text":"Uvicorn is an ASGI web server implementation for Python. It allows for hosting an ASGI server and serving requests. It is highly recommended that uvicorn be used together with an ASGI framework library, like Starlette .","title":"Uvicorn"},{"location":"extralibs/uvicorn/#examples","text":"","title":"Examples"},{"location":"extralibs/uvicorn/#standalone-uvicorn-hello-world","text":"We can run a simple web server that has an index page which returns \"Hello, World!\" when visited: import uvicorn async def app(scope, receive, send): assert scope['type'] == 'http' await send({ 'type': 'http.response.start', 'status': 200, 'headers': [ [b'content-type', b'text/plain'], ], }) await send({ 'type': 'http.response.body', 'body': b'Hello, world!', }) if __name__ == \"__main__\": # host must be 0.0.0.0 to work in the Python3 Editor uvicorn.run('main:app', host='0.0.0.0', port=8000, log_level='info') On the right, we will see our page:","title":"Standalone Uvicorn Hello World"},{"location":"extralibs/uvicorn/#handling-routing","text":"If you would like to have routing to different pages in your app, you should use an ASGI framework like Starlette , otherwise you will have to parse the scope['path'] variable and handle the different request paths yourself. This example has an index page, and also has an extra /hello/<anything> path that acts like an echo: import uvicorn async def index(send): await send({ 'type': 'http.response.body', 'body': b'Index Page!', }) async def greet(send, name): await send({ 'type': 'http.response.body', 'body': f'Hello, {name}'.encode(), }) async def app(scope, receive, send): assert scope['type'] == 'http' await send({ 'type': 'http.response.start', 'status': 200, 'headers': [ [b'content-type', b'text/plain'], ], }) if scope['path'] == \"/\": await index(send) elif scope['path'].startswith(\"/hello/\"): await greet(send, scope['path'][7:]) if __name__ == \"__main__\": # host must be 0.0.0.0 to work in the Python3 Editor uvicorn.run('main:app', host='0.0.0.0', port=8000, log_level='info') Then, if we visit the /hello/<anything> endpoint, we will get this output:","title":"Handling Routing"},{"location":"extralibs/uvicorn/#reference","text":"Uvicorn at uvicorn.org","title":"Reference"},{"location":"modules/","text":"Standard Python Libraries The OYOclass Python3 IDE app is based on Python 3.11 behind the scene, so technically you can use any of the standard Python3.11 libraries in the app. Here we list some libraries as examples, for more you could find all libraries in Python's official documents. math library random library sqlite library string library time library tkinter library turtle library urllib library For 3rd-party libraries, please check the \"Extra Python Libraries\" section on the left.","title":"Intro"},{"location":"modules/#standard-python-libraries","text":"The OYOclass Python3 IDE app is based on Python 3.11 behind the scene, so technically you can use any of the standard Python3.11 libraries in the app. Here we list some libraries as examples, for more you could find all libraries in Python's official documents. math library random library sqlite library string library time library tkinter library turtle library urllib library For 3rd-party libraries, please check the \"Extra Python Libraries\" section on the left.","title":"Standard Python Libraries"},{"location":"modules/math/","text":"math \u2014 Mathematical Functions This module contains mathematical operations. In order to use these functions, you should import math at the start of your file. Constants math.e : The mathematical constant e = 2.718281... to available precision. math.pi : The mathematical constant \u03c0 = 3.141592... to available precision. Some Functions math.acos(x) : Returns the arccosine of x in radians. math.acosh(x) : Returns the inverse hyperbolic cosine of x . math.asin(x) : Returns the arcsine of x in radians. math.asinh(x) : Returns the inverse hyperbolic sine of x . math.atan(x) : Returns the arctangent of x in radians. math.atan2(y, x) : Returns atan(y / x) in radians. The result is between -pi and pi. math.atanh(x) : Returns the inverse hyperbolic tangent of x . math.ceil(x) : Returns the ceiling of x as a float, which is the smallest integer value greater than or equal to x . math.copysign(x, y) : Returns x with the sign of y . On a platform that supports signed zeros, copysign(1.0, -0.0) returns -1.0. math.cos(x) : Returns the cosine of x radians. math.cosh(x) : Returns the hyperbolic cosine of x . math.degrees(x) : Converts angle x from radians to degrees. math.exp(x) : Returns e** x . math.fabs(x) : Returns the absolute value of x . math.factorial(x) : Returns x factorial. math.floor(x) : Returns the floor of x as a float, the largest integer value less than or equal to x . math.hypot(x, y) : Returns the Euclidean norm, sqrt(x*x + y*y) . This is the length of the vector from the origin to point (x, y) . math.log(x[,base]) : With one argument, the function returns the natural logarithm of x (to base e ). With two arguments, it returns the logarithm of x to the given base, calculated as log(x)/log(base) . math.log10(x) : Returns the base-10 logarithm of x . This is usually more accurate than log(x, 10) . math.pow(x, y) : Returns x raised to the power y . math.radians : Converts angle x from degrees to radians. math.sin(x) : Returns the sine of x radians. math.sinh(x) : Returns the hyperbolic sine of x . math.sqrt(x) : Returns the square root of x . math.tan(x) : Returns the tangent of x radians. math.tanh(x) : Returns the hyperbolic tangent of x . math.trunc(x) : Returns the real value x truncated to an integral . Example import math print(math.pi) # 3.141592653589793 print(math.sqrt(4)) # 2.0 print(math.sin(math.pi/6)) # 0.49999999999999994 print(math.degrees(math.pi/6)) # 29.999999999999996 Reference Math Module at docs.python.org","title":"math"},{"location":"modules/math/#math-mathematical-functions","text":"This module contains mathematical operations. In order to use these functions, you should import math at the start of your file.","title":"math \u2014 Mathematical Functions"},{"location":"modules/math/#constants","text":"math.e : The mathematical constant e = 2.718281... to available precision. math.pi : The mathematical constant \u03c0 = 3.141592... to available precision.","title":"Constants"},{"location":"modules/math/#some-functions","text":"math.acos(x) : Returns the arccosine of x in radians. math.acosh(x) : Returns the inverse hyperbolic cosine of x . math.asin(x) : Returns the arcsine of x in radians. math.asinh(x) : Returns the inverse hyperbolic sine of x . math.atan(x) : Returns the arctangent of x in radians. math.atan2(y, x) : Returns atan(y / x) in radians. The result is between -pi and pi. math.atanh(x) : Returns the inverse hyperbolic tangent of x . math.ceil(x) : Returns the ceiling of x as a float, which is the smallest integer value greater than or equal to x . math.copysign(x, y) : Returns x with the sign of y . On a platform that supports signed zeros, copysign(1.0, -0.0) returns -1.0. math.cos(x) : Returns the cosine of x radians. math.cosh(x) : Returns the hyperbolic cosine of x . math.degrees(x) : Converts angle x from radians to degrees. math.exp(x) : Returns e** x . math.fabs(x) : Returns the absolute value of x . math.factorial(x) : Returns x factorial. math.floor(x) : Returns the floor of x as a float, the largest integer value less than or equal to x . math.hypot(x, y) : Returns the Euclidean norm, sqrt(x*x + y*y) . This is the length of the vector from the origin to point (x, y) . math.log(x[,base]) : With one argument, the function returns the natural logarithm of x (to base e ). With two arguments, it returns the logarithm of x to the given base, calculated as log(x)/log(base) . math.log10(x) : Returns the base-10 logarithm of x . This is usually more accurate than log(x, 10) . math.pow(x, y) : Returns x raised to the power y . math.radians : Converts angle x from degrees to radians. math.sin(x) : Returns the sine of x radians. math.sinh(x) : Returns the hyperbolic sine of x . math.sqrt(x) : Returns the square root of x . math.tan(x) : Returns the tangent of x radians. math.tanh(x) : Returns the hyperbolic tangent of x . math.trunc(x) : Returns the real value x truncated to an integral .","title":"Some Functions"},{"location":"modules/math/#example","text":"import math print(math.pi) # 3.141592653589793 print(math.sqrt(4)) # 2.0 print(math.sin(math.pi/6)) # 0.49999999999999994 print(math.degrees(math.pi/6)) # 29.999999999999996","title":"Example"},{"location":"modules/math/#reference","text":"Math Module at docs.python.org","title":"Reference"},{"location":"modules/random/","text":"random \u2014 Generate Pseudo-Random Numbers This module implements functions of the random module. It contains pseudo-random number generators for various distributions. To use this module, make sure include import random first. Some Functions random.choice(seq) : Returns a random element from the non-empty sequence seq . random.randint(a, b) : Returns a random integer N such that a <= N <= b . random.random : Returns the next random floating point number in the range [0.0, 1.0). random.randrange(stop) : See below. random.randrange(start, stop[, step]) : Returns a randomly selected element from range(start, stop, step) . This is equivalent to choice( range(start, stop, step) ) . random.sample(population, k) : Returns a k length list of unique elements chosen from the population sequence. random.seed(x) : Initializes the random number generator. random.shuffle(x) : Shuffles the sequence x in place. random.triangular(low, high, mode) : Returns a random floating point number N such that low <= N <= high and with the specified mode. random.uniform(a, b) : Returns a random floating point number N such that a <= N <= b for a <= b and b <= N <= a for b < a. Example import random lst = [1, 2, 3, 4, 5] print(random.choice(lst)) print(random.randint(1, 10)) print(random.random()) random.shuffle(lst) print(random.sample(lst, 2)) print(lst) print(random.sample(range(100), 10)) Reference Random Module at docs.python.org","title":"random"},{"location":"modules/random/#random-generate-pseudo-random-numbers","text":"This module implements functions of the random module. It contains pseudo-random number generators for various distributions. To use this module, make sure include import random first.","title":"random \u2014 Generate Pseudo-Random Numbers"},{"location":"modules/random/#some-functions","text":"random.choice(seq) : Returns a random element from the non-empty sequence seq . random.randint(a, b) : Returns a random integer N such that a <= N <= b . random.random : Returns the next random floating point number in the range [0.0, 1.0). random.randrange(stop) : See below. random.randrange(start, stop[, step]) : Returns a randomly selected element from range(start, stop, step) . This is equivalent to choice( range(start, stop, step) ) . random.sample(population, k) : Returns a k length list of unique elements chosen from the population sequence. random.seed(x) : Initializes the random number generator. random.shuffle(x) : Shuffles the sequence x in place. random.triangular(low, high, mode) : Returns a random floating point number N such that low <= N <= high and with the specified mode. random.uniform(a, b) : Returns a random floating point number N such that a <= N <= b for a <= b and b <= N <= a for b < a.","title":"Some Functions"},{"location":"modules/random/#example","text":"import random lst = [1, 2, 3, 4, 5] print(random.choice(lst)) print(random.randint(1, 10)) print(random.random()) random.shuffle(lst) print(random.sample(lst, 2)) print(lst) print(random.sample(range(100), 10))","title":"Example"},{"location":"modules/random/#reference","text":"Random Module at docs.python.org","title":"Reference"},{"location":"modules/sqlite/","text":"SQLite \u2014 Small + Fast SQL Database Engine SQLite is an SQL database engine that is built into most devices that exist today. Python comes with an SQLite library built in. This library allows you to store data between each time your program is run as well as search through it with queries. Using SQLite will require the use of Structured Query Language to interface with the database. SQL statements can become very complex quickly, but we will go over some basic commands for creating a table, then adding, reading, and deleting rows of data from it. Quick Note About SQL Statements SQL statements are case-insensitive, so the following two statements are the same: SELECT last_name, first_name, age FROM students WHERE age>15; select last_name, first_name, age from students where age>15; Usually key words like SELECT , FROM , WHERE , and so on are capitalized to differntiate them from the custom database table and column names. Example: Simple Student Roster Creating a Database and Initializing a Table Before we store any data, we need to create a table . SQL databases are set up similarly to a spreadsheet, where each entry is a row with data that lines up with named columns . import sqlite3 conn = sqlite3.connect('example.db') create_table_sql_str = ''' CREATE TABLE students ( id INTEGER PRIMARY KEY, last_name TEXT, first_name TEXT, age INTEGER, gpa REAL ); ''' conn.execute(create_table_sql_str) print('Table created successfully') conn.close() This will create a file named \"example.db\" in your project's root folder, and it will create a table that is set up like this: id | last_name | first_name | age | gpa --------------------------------------- The \"id\" field we set up is special as it is the INTEGER PRIMARY KEY . This field will automatically increment each time we insert a row into this table. Note When you try to open a database that doesn't exist, it will automatically be created and put into your file list. Since we used 'example.db' in our code above, you can see it added in your project's file list to the left: Inserting Data Into the Table Now that we have a table, let's write another statement to insert some data into it: import sqlite3 conn = sqlite3.connect('example.db') insert_sql_str = ''' INSERT INTO students (last_name, first_name, age, gpa) VALUES ('Doe', 'John', 16, 3.2), ('Doe', 'Jane', 13, 3.8), ('Smith', 'Ronald', 14, 2.7), ('Aster', 'Jean', 11, 3.4); ''' conn.execute(insert_sql_str) conn.commit() # this line actually finalizes the operation and saves to disk conn.close() After running this code, your table will now have the following data: id | last_name | first_name | age | gpa --------------------------------------- 1 | Doe | John | 16 | 3.2 2 | Doe | Jane | 13 | 3.8 3 | Smith | Ronald | 14 | 2.7 4 | Aster | Jean | 11 | 3.4 Note how we didn't specify an id, and it was automatically added for us. Searching For Specific Students And now that our table has data from it, we want a specific set of data. Let's run the first example query used at the beginning of this guide: import sqlite3 conn = sqlite3.connect('example.db') query_sql_str = ''' SELECT last_name, first_name, age FROM students WHERE age>15; ''' cursor = conn.execute(query_sql_str) for row in cursor.fetchall(): print(row) conn.close() Output: ('Doe', 'John', 16) Ordering Query Results By default, there is no guarantee any data returned by a query will be in any specific order. Most of the time this is ok, but if we need data returned in any specific order, we can do this with the ORDER BY keyphrase: import sqlite3 conn = sqlite3.connect('example.db') query_sql_str = ''' SELECT * FROM students WHERE gpa>=3 ORDER BY last_name; ''' cursor = conn.execute(query_sql_str) for row in cursor.fetchall(): print(row) conn.close() Output: (4, 'Aster', 'Jean', 11, 3.4) (1, 'Doe', 'John', 16, 3.2) (2, 'Doe', 'Jane', 13, 3.8) Notice how it returned the entire row for each student. That's because we used the * character, which selects all existing columns in order without having to write them out individually. Update an Existing Row Sometimes you need to edit a row that is already inserted into the table. You can do this with an update query. Keep in mind that you cannot undo an update after it is committed: import sqlite3 conn = sqlite3.connect('example.db') update_sql_str = ''' UPDATE students SET gpa=3.9 WHERE id=3; ''' conn.execute(update_sql_str) conn.commit() conn.close() After running this code, the student with id=3 will have their GPA updated: id | last_name | first_name | age | gpa --------------------------------------- 3 | Smith | Ronald | 14 | 3.9 Delete Data from a Table Final of the main four operations, we can delete a row of data that is no longer needed. Keep in mind that like updates, you cannot undo a delete once it is committed: import sqlite3 conn = sqlite3.connect('example.db') delete_sql_str = ''' DELETE FROM students WHERE age=16; ''' conn.execute(delete_sql_str) conn.commit() conn.close() Our final table looks like this, note how the id column did not get automatically updated: id | last_name | first_name | age | gpa --------------------------------------- 2 | Doe | Jane | 13 | 3.8 3 | Smith | Ronald | 14 | 2.7 4 | Aster | Jean | 11 | 3.4 We only had one student with an age=16 in our table, but the above query would have deleted all students with age=16 . The next student inserted into this table will have an id of 5. Reference These examples are far from the only thing you can do with SQLite and SQL queries. Read more about SQLite and SQL queries here: Python SQLite Package Documentation at docs.python.org SQLite Documentation at sqlite.org","title":"sqlite"},{"location":"modules/sqlite/#sqlite-small-fast-sql-database-engine","text":"SQLite is an SQL database engine that is built into most devices that exist today. Python comes with an SQLite library built in. This library allows you to store data between each time your program is run as well as search through it with queries. Using SQLite will require the use of Structured Query Language to interface with the database. SQL statements can become very complex quickly, but we will go over some basic commands for creating a table, then adding, reading, and deleting rows of data from it.","title":"SQLite \u2014 Small + Fast SQL Database Engine"},{"location":"modules/sqlite/#quick-note-about-sql-statements","text":"SQL statements are case-insensitive, so the following two statements are the same: SELECT last_name, first_name, age FROM students WHERE age>15; select last_name, first_name, age from students where age>15; Usually key words like SELECT , FROM , WHERE , and so on are capitalized to differntiate them from the custom database table and column names.","title":"Quick Note About SQL Statements"},{"location":"modules/sqlite/#example-simple-student-roster","text":"","title":"Example: Simple Student Roster"},{"location":"modules/sqlite/#creating-a-database-and-initializing-a-table","text":"Before we store any data, we need to create a table . SQL databases are set up similarly to a spreadsheet, where each entry is a row with data that lines up with named columns . import sqlite3 conn = sqlite3.connect('example.db') create_table_sql_str = ''' CREATE TABLE students ( id INTEGER PRIMARY KEY, last_name TEXT, first_name TEXT, age INTEGER, gpa REAL ); ''' conn.execute(create_table_sql_str) print('Table created successfully') conn.close() This will create a file named \"example.db\" in your project's root folder, and it will create a table that is set up like this: id | last_name | first_name | age | gpa --------------------------------------- The \"id\" field we set up is special as it is the INTEGER PRIMARY KEY . This field will automatically increment each time we insert a row into this table. Note When you try to open a database that doesn't exist, it will automatically be created and put into your file list. Since we used 'example.db' in our code above, you can see it added in your project's file list to the left:","title":"Creating a Database and Initializing a Table"},{"location":"modules/sqlite/#inserting-data-into-the-table","text":"Now that we have a table, let's write another statement to insert some data into it: import sqlite3 conn = sqlite3.connect('example.db') insert_sql_str = ''' INSERT INTO students (last_name, first_name, age, gpa) VALUES ('Doe', 'John', 16, 3.2), ('Doe', 'Jane', 13, 3.8), ('Smith', 'Ronald', 14, 2.7), ('Aster', 'Jean', 11, 3.4); ''' conn.execute(insert_sql_str) conn.commit() # this line actually finalizes the operation and saves to disk conn.close() After running this code, your table will now have the following data: id | last_name | first_name | age | gpa --------------------------------------- 1 | Doe | John | 16 | 3.2 2 | Doe | Jane | 13 | 3.8 3 | Smith | Ronald | 14 | 2.7 4 | Aster | Jean | 11 | 3.4 Note how we didn't specify an id, and it was automatically added for us.","title":"Inserting Data Into the Table"},{"location":"modules/sqlite/#searching-for-specific-students","text":"And now that our table has data from it, we want a specific set of data. Let's run the first example query used at the beginning of this guide: import sqlite3 conn = sqlite3.connect('example.db') query_sql_str = ''' SELECT last_name, first_name, age FROM students WHERE age>15; ''' cursor = conn.execute(query_sql_str) for row in cursor.fetchall(): print(row) conn.close() Output: ('Doe', 'John', 16)","title":"Searching For Specific Students"},{"location":"modules/sqlite/#ordering-query-results","text":"By default, there is no guarantee any data returned by a query will be in any specific order. Most of the time this is ok, but if we need data returned in any specific order, we can do this with the ORDER BY keyphrase: import sqlite3 conn = sqlite3.connect('example.db') query_sql_str = ''' SELECT * FROM students WHERE gpa>=3 ORDER BY last_name; ''' cursor = conn.execute(query_sql_str) for row in cursor.fetchall(): print(row) conn.close() Output: (4, 'Aster', 'Jean', 11, 3.4) (1, 'Doe', 'John', 16, 3.2) (2, 'Doe', 'Jane', 13, 3.8) Notice how it returned the entire row for each student. That's because we used the * character, which selects all existing columns in order without having to write them out individually.","title":"Ordering Query Results"},{"location":"modules/sqlite/#update-an-existing-row","text":"Sometimes you need to edit a row that is already inserted into the table. You can do this with an update query. Keep in mind that you cannot undo an update after it is committed: import sqlite3 conn = sqlite3.connect('example.db') update_sql_str = ''' UPDATE students SET gpa=3.9 WHERE id=3; ''' conn.execute(update_sql_str) conn.commit() conn.close() After running this code, the student with id=3 will have their GPA updated: id | last_name | first_name | age | gpa --------------------------------------- 3 | Smith | Ronald | 14 | 3.9","title":"Update an Existing Row"},{"location":"modules/sqlite/#delete-data-from-a-table","text":"Final of the main four operations, we can delete a row of data that is no longer needed. Keep in mind that like updates, you cannot undo a delete once it is committed: import sqlite3 conn = sqlite3.connect('example.db') delete_sql_str = ''' DELETE FROM students WHERE age=16; ''' conn.execute(delete_sql_str) conn.commit() conn.close() Our final table looks like this, note how the id column did not get automatically updated: id | last_name | first_name | age | gpa --------------------------------------- 2 | Doe | Jane | 13 | 3.8 3 | Smith | Ronald | 14 | 2.7 4 | Aster | Jean | 11 | 3.4 We only had one student with an age=16 in our table, but the above query would have deleted all students with age=16 . The next student inserted into this table will have an id of 5.","title":"Delete Data from a Table"},{"location":"modules/sqlite/#reference","text":"These examples are far from the only thing you can do with SQLite and SQL queries. Read more about SQLite and SQL queries here: Python SQLite Package Documentation at docs.python.org SQLite Documentation at sqlite.org","title":"Reference"},{"location":"modules/string/","text":"string - Common String Operations The string module contains useful constants and functions. Constants string.ascii_letters : The concatenation of the ascii_lowercase and ascii_uppercase constants described below. string.ascii_lowercase : The lowercase letters abcdefghijklmnopqrstuvwxyz . This value is not locale-dependent and will not change. string.ascii_uppercase : The uppercase letters ABCDEFGHIJKLMNOPQRSTUVWXYZ . This value is not locale-dependent and will not change. string.digits : The string 0123456789 . string.hexdigits : The string 0123456789abcdefABCDEF . string.letters : The concatenation of the strings lowercase and uppercase described below. string.octdigits : The string 01234567 . string.punctuation : String of ASCII characters that consist of punctuation characters. string.printable : String of characters which are considered printable. This is a combination of digits, letters, punctuation, and whitespace. string.whitespace : A string containing all characters that are considered whitespace. Helper Functions string.capwords(s[, sep]) : Splits the argument into words using str.split() , capitalizes each word using str.capitalize() , and joins the capitalized words using str.join() . Example import string print(string.ascii_letters) # abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ print(string.ascii_lowercase) # abcdefghijklmnopqrstuvwxyz print(string.punctuation) # !\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~ s = \"hello world\" print(string.capwords(s)) # Hello World Reference String Module at docs.python.org","title":"string"},{"location":"modules/string/#string-common-string-operations","text":"The string module contains useful constants and functions.","title":"string - Common String Operations"},{"location":"modules/string/#constants","text":"string.ascii_letters : The concatenation of the ascii_lowercase and ascii_uppercase constants described below. string.ascii_lowercase : The lowercase letters abcdefghijklmnopqrstuvwxyz . This value is not locale-dependent and will not change. string.ascii_uppercase : The uppercase letters ABCDEFGHIJKLMNOPQRSTUVWXYZ . This value is not locale-dependent and will not change. string.digits : The string 0123456789 . string.hexdigits : The string 0123456789abcdefABCDEF . string.letters : The concatenation of the strings lowercase and uppercase described below. string.octdigits : The string 01234567 . string.punctuation : String of ASCII characters that consist of punctuation characters. string.printable : String of characters which are considered printable. This is a combination of digits, letters, punctuation, and whitespace. string.whitespace : A string containing all characters that are considered whitespace.","title":"Constants"},{"location":"modules/string/#helper-functions","text":"string.capwords(s[, sep]) : Splits the argument into words using str.split() , capitalizes each word using str.capitalize() , and joins the capitalized words using str.join() .","title":"Helper Functions"},{"location":"modules/string/#example","text":"import string print(string.ascii_letters) # abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ print(string.ascii_lowercase) # abcdefghijklmnopqrstuvwxyz print(string.punctuation) # !\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~ s = \"hello world\" print(string.capwords(s)) # Hello World","title":"Example"},{"location":"modules/string/#reference","text":"String Module at docs.python.org","title":"Reference"},{"location":"modules/time/","text":"time \u2014 Time access This module contains time-related functions. Attribute time.altzone : The offset of the local DST timezone, in second, west of UTC. time.daylight : Nonzero if a DST timezone is defined. time.timezone : The offset of the local (non-DST) timezone, in seconds, west of UTC (negative in most of Western Europe, positive in the US, zero in the UK). time.tzname : A tuple of two strings: the first is the name of the local non-DST timezone, the second is the name of the local DST timezone. Functions time.asctime([t]) : Converts a tuple or struct_time representing a time as returned by gmtime() or localtime() to a 24-character string of the following form: 'Sun Jun 20 23:21:05 1993'. If t is not provided, the current time as returned by localtime() is used. time.clock() : Returns the current processor time as a floating point number expressed in seconds. time.ctime([secs]) : Converts a time expressed in seconds since the epoch to a string representing local time. If secs is not provided or None , the current time as returned by time() is used. time.gmtime([secs]) : Converts a time expressed in seconds since the epoch to a struct_time in UTC in which the dst flag is always zero. If secs is not provided or None , the current time as returned by time() is used. time.localtime([secs]) : Like gmtime() but converts to local time. If secs is not provided or None , the current time as returned by time() is used. time.mktime(t) : This is the inverse function of localtime() . Its argument is the struct_time or a full 9-tuple. time.sleep(secs) : Suspends execution of the current thread for the given number of seconds. time.time() : Returns the time in seconds since the epoch as a floating point number. Class time.struct_time : The type of the time value sequence returned by gmtime() and localtime() . Example import time print(time.timezone) print(time.altzone) print(time.ctime()) print(time.clock()) print(time.localtime()) print(time.gmtime()) print(time.tzname) # print out time every 1 second for i in range(10): print(time.asctime()) time.sleep(1) Reference Time Module - docs.python.org","title":"time"},{"location":"modules/time/#time-time-access","text":"This module contains time-related functions.","title":"time \u2014 Time access"},{"location":"modules/time/#attribute","text":"time.altzone : The offset of the local DST timezone, in second, west of UTC. time.daylight : Nonzero if a DST timezone is defined. time.timezone : The offset of the local (non-DST) timezone, in seconds, west of UTC (negative in most of Western Europe, positive in the US, zero in the UK). time.tzname : A tuple of two strings: the first is the name of the local non-DST timezone, the second is the name of the local DST timezone.","title":"Attribute"},{"location":"modules/time/#functions","text":"time.asctime([t]) : Converts a tuple or struct_time representing a time as returned by gmtime() or localtime() to a 24-character string of the following form: 'Sun Jun 20 23:21:05 1993'. If t is not provided, the current time as returned by localtime() is used. time.clock() : Returns the current processor time as a floating point number expressed in seconds. time.ctime([secs]) : Converts a time expressed in seconds since the epoch to a string representing local time. If secs is not provided or None , the current time as returned by time() is used. time.gmtime([secs]) : Converts a time expressed in seconds since the epoch to a struct_time in UTC in which the dst flag is always zero. If secs is not provided or None , the current time as returned by time() is used. time.localtime([secs]) : Like gmtime() but converts to local time. If secs is not provided or None , the current time as returned by time() is used. time.mktime(t) : This is the inverse function of localtime() . Its argument is the struct_time or a full 9-tuple. time.sleep(secs) : Suspends execution of the current thread for the given number of seconds. time.time() : Returns the time in seconds since the epoch as a floating point number.","title":"Functions"},{"location":"modules/time/#class","text":"time.struct_time : The type of the time value sequence returned by gmtime() and localtime() .","title":"Class"},{"location":"modules/time/#example","text":"import time print(time.timezone) print(time.altzone) print(time.ctime()) print(time.clock()) print(time.localtime()) print(time.gmtime()) print(time.tzname) # print out time every 1 second for i in range(10): print(time.asctime()) time.sleep(1)","title":"Example"},{"location":"modules/time/#reference","text":"Time Module - docs.python.org","title":"Reference"},{"location":"modules/tkinter/","text":"tkinter Quick Examples 1, Simple messsage box from tkinter import * # create a window instance window = Tk() # set window title window.title(\"Welcome\") # set window size: 350 x 200 window.geometry(\"350x200\") # create a text label lbl = Label(window, text=\"Hello\") # show the label at top-left corner lbl.grid(column=0, row=0) # show this window window.mainloop() Copy the above code to Python3 editor in OYOclass, then click \"Run\", you will see the running result like fhe following:","title":"tkinter"},{"location":"modules/tkinter/#tkinter","text":"","title":"tkinter"},{"location":"modules/tkinter/#quick-examples","text":"","title":"Quick Examples"},{"location":"modules/tkinter/#1-simple-messsage-box","text":"from tkinter import * # create a window instance window = Tk() # set window title window.title(\"Welcome\") # set window size: 350 x 200 window.geometry(\"350x200\") # create a text label lbl = Label(window, text=\"Hello\") # show the label at top-left corner lbl.grid(column=0, row=0) # show this window window.mainloop() Copy the above code to Python3 editor in OYOclass, then click \"Run\", you will see the running result like fhe following:","title":"1, Simple messsage box"},{"location":"modules/turtle/","text":"turtle \u2014 Turtle Graphic Library The turtle library is a popular library for drawing simple graphics. Quick Examples 1, Draw a square from turtle import * t = Turtle() for i in range(4): t.forward(100) t.right(90) done() Please note that you must call the done() function at the end, otherwise the drawing window will be closed automatically after drawing and you may not be able to see the drawings. Copy the above code to Python3 editor in OYOclass, then click \"Run\", you will see the running result like fhe following: 2, Draw with a filled color from turtle import * t = Turtle() t.color(\"red\") t.begin_fill() for i in range(4): t.forward(100) t.right(90) t.end_fill() done() Copy the above code to Python3 editor in OYOclass, then click \"Run\", you will see the running result like fhe following: Reference Turtle Module at docs.python.org","title":"turtle"},{"location":"modules/turtle/#turtle-turtle-graphic-library","text":"The turtle library is a popular library for drawing simple graphics.","title":"turtle \u2014 Turtle Graphic Library"},{"location":"modules/turtle/#quick-examples","text":"","title":"Quick Examples"},{"location":"modules/turtle/#1-draw-a-square","text":"from turtle import * t = Turtle() for i in range(4): t.forward(100) t.right(90) done() Please note that you must call the done() function at the end, otherwise the drawing window will be closed automatically after drawing and you may not be able to see the drawings. Copy the above code to Python3 editor in OYOclass, then click \"Run\", you will see the running result like fhe following:","title":"1, Draw a square"},{"location":"modules/turtle/#2-draw-with-a-filled-color","text":"from turtle import * t = Turtle() t.color(\"red\") t.begin_fill() for i in range(4): t.forward(100) t.right(90) t.end_fill() done() Copy the above code to Python3 editor in OYOclass, then click \"Run\", you will see the running result like fhe following:","title":"2, Draw with a filled color"},{"location":"modules/turtle/#reference","text":"Turtle Module at docs.python.org","title":"Reference"},{"location":"modules/urllib/","text":"urllib \u2014 URL handling This module has several sub-modules that works with URLs, and you can check out the sub-modules in Python's standard documentation . We will show some examples for the most commonly used submodules urllib.request and urllib.parse . urllib.request A common usage of this module is fetching data from the internet. Example 1) Get a webpage's source code from urllib.request import urlopen source_code = urlopen(\"http://sabrinaw.oyosite.com\").read().decode(\"utf-8\") print(source_code) This will print the source code as a string from the website \"sabrinaw.oyosite.com\". Note If you are using the code above to get the source code from a website, it is not uncommon that the function will return a \"forbidden\" error instead of the actual source code. The reason is that many websites have restrictions on who can fetch their code. For example, the website may check if you are an actual browser or a spider robot, and it will return an empty string or a \"forbidden\" error if they think you are a robot. Example 2) Get CSV data and parse it with the CSV lib A comma-separated values (CSV) file is a delimited text file that uses a comma to separate values. Each line of the file is a data record. Each record consists of one or more fields, separated by commas. Read more on Wikipedia >> . Suppose we have a CSV file for a Code Conquest Hackathon: Name, Nickname, Age, Kingdom, Soldier Type, Rank Reuben,The Hammer,59,Prubadour,Lancer,Sergeant Everitt,The Whisper,27,Prubadour,Pikeman,Major Reinhardt,The Mammoth,56,Prubadour,Healer,Private Mel,The Hawk,53,Truisian,Pikeman,Sergeant We can upload this file to our OYO website, and then read from the url. For example: import urllib.request, csv page = urllib.request.urlopen(\"http://sabrinaw.oyosite.com/testing/data3.html\") reader = csv.reader( page.read().decode('utf-8').splitlines(), skipinitialspace=True ) for row in reader: # row now is a python list print(row) Example 3) Calling API Most APIs provide JSON format data. Here we will use an IP-to-Location API to get the location information from an IP address. from urllib.request import urlopen import json ip = input(\"Input the IP you want to query: \") url = f\"http://ip-api.com/json/{ip}\" location = json.loads(urlopen(url).read()) print(\"Approx. Location:\", location[\"city\"], location[\"region\"]) Run it (suppose we want to query the IP 67.84.146.84): Input the IP you want to query: 67.84.146.84 Approx. Location: Ronkonkoma NY Use OYOclass Proxy Some schools may have firewalls that block domains. For example, if your school blocks access to the \"ip-api.com\" domain, you won't get data returned like the above. In these cases, you can use our proxy by simply prepending https://proxy.oyoclass.com/ to any URL that you want to fetch data from. from urllib.request import urlopen import json ip = input(\"Input the IP you want to query: \") url = f\"https://proxy.oyoclass.com/http://ip-api.com/json/{ip}\" location = json.loads(urlopen(url).read()) print(\"Approx. Location:\", location[\"city\"], location[\"region\"]) Here is another example. This is an API you can use to get the bitcoin price in USD: https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd . Suppose your school blocks the \"coingecho.com\" domain, you can just prepend https://proxy.oyoclass.com/ to it: from urllib.request import urlopen import json url = \"https://proxy.oyoclass.com/https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd\" data = json.loads(urlopen(url).read()) print(data) Run it: {'bitcoin': {'usd': 65274}} urllib.parse This submodule can help parse a URL string and split it into different components. Read more >> . Example from urllib.parse import urlparse url = \"https://oyoclass.com/settings/account?name=python#anchor\" parsed = urlparse(url) print(parsed) print(parsed.scheme) print(parsed.netloc) print(parsed.path) print(parsed.query) print(parsed.fragment) Run it: ParseResult(scheme='https', netloc='oyoclass.com', path='/settings/account', params='', query='name=python', fragment='anchor') https oyoclass.com /settings/account name=python anchor","title":"urllib"},{"location":"modules/urllib/#urllib-url-handling","text":"This module has several sub-modules that works with URLs, and you can check out the sub-modules in Python's standard documentation . We will show some examples for the most commonly used submodules urllib.request and urllib.parse .","title":"urllib \u2014 URL handling"},{"location":"modules/urllib/#urllibrequest","text":"A common usage of this module is fetching data from the internet.","title":"urllib.request"},{"location":"modules/urllib/#example-1-get-a-webpages-source-code","text":"from urllib.request import urlopen source_code = urlopen(\"http://sabrinaw.oyosite.com\").read().decode(\"utf-8\") print(source_code) This will print the source code as a string from the website \"sabrinaw.oyosite.com\". Note If you are using the code above to get the source code from a website, it is not uncommon that the function will return a \"forbidden\" error instead of the actual source code. The reason is that many websites have restrictions on who can fetch their code. For example, the website may check if you are an actual browser or a spider robot, and it will return an empty string or a \"forbidden\" error if they think you are a robot.","title":"Example 1) Get a webpage's source code"},{"location":"modules/urllib/#example-2-get-csv-data-and-parse-it-with-the-csv-lib","text":"A comma-separated values (CSV) file is a delimited text file that uses a comma to separate values. Each line of the file is a data record. Each record consists of one or more fields, separated by commas. Read more on Wikipedia >> . Suppose we have a CSV file for a Code Conquest Hackathon: Name, Nickname, Age, Kingdom, Soldier Type, Rank Reuben,The Hammer,59,Prubadour,Lancer,Sergeant Everitt,The Whisper,27,Prubadour,Pikeman,Major Reinhardt,The Mammoth,56,Prubadour,Healer,Private Mel,The Hawk,53,Truisian,Pikeman,Sergeant We can upload this file to our OYO website, and then read from the url. For example: import urllib.request, csv page = urllib.request.urlopen(\"http://sabrinaw.oyosite.com/testing/data3.html\") reader = csv.reader( page.read().decode('utf-8').splitlines(), skipinitialspace=True ) for row in reader: # row now is a python list print(row)","title":"Example 2) Get CSV data and parse it with the CSV lib"},{"location":"modules/urllib/#example-3-calling-api","text":"Most APIs provide JSON format data. Here we will use an IP-to-Location API to get the location information from an IP address. from urllib.request import urlopen import json ip = input(\"Input the IP you want to query: \") url = f\"http://ip-api.com/json/{ip}\" location = json.loads(urlopen(url).read()) print(\"Approx. Location:\", location[\"city\"], location[\"region\"]) Run it (suppose we want to query the IP 67.84.146.84): Input the IP you want to query: 67.84.146.84 Approx. Location: Ronkonkoma NY","title":"Example 3) Calling API"},{"location":"modules/urllib/#use-oyoclass-proxy","text":"Some schools may have firewalls that block domains. For example, if your school blocks access to the \"ip-api.com\" domain, you won't get data returned like the above. In these cases, you can use our proxy by simply prepending https://proxy.oyoclass.com/ to any URL that you want to fetch data from. from urllib.request import urlopen import json ip = input(\"Input the IP you want to query: \") url = f\"https://proxy.oyoclass.com/http://ip-api.com/json/{ip}\" location = json.loads(urlopen(url).read()) print(\"Approx. Location:\", location[\"city\"], location[\"region\"]) Here is another example. This is an API you can use to get the bitcoin price in USD: https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd . Suppose your school blocks the \"coingecho.com\" domain, you can just prepend https://proxy.oyoclass.com/ to it: from urllib.request import urlopen import json url = \"https://proxy.oyoclass.com/https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd\" data = json.loads(urlopen(url).read()) print(data) Run it: {'bitcoin': {'usd': 65274}}","title":"Use OYOclass Proxy"},{"location":"modules/urllib/#urllibparse","text":"This submodule can help parse a URL string and split it into different components. Read more >> .","title":"urllib.parse"},{"location":"modules/urllib/#example","text":"from urllib.parse import urlparse url = \"https://oyoclass.com/settings/account?name=python#anchor\" parsed = urlparse(url) print(parsed) print(parsed.scheme) print(parsed.netloc) print(parsed.path) print(parsed.query) print(parsed.fragment) Run it: ParseResult(scheme='https', netloc='oyoclass.com', path='/settings/account', params='', query='name=python', fragment='anchor') https oyoclass.com /settings/account name=python anchor","title":"Example"}]}